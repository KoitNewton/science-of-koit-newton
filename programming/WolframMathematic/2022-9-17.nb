(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 13.1' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    539029,      10013]
NotebookOptionsPosition[    534165,       9919]
NotebookOutlinePosition[    534630,       9937]
CellTagsIndexPosition[    534587,       9934]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell[BoxData[
 RowBox[{"Integrate", "[", 
  RowBox[{
   RowBox[{"sin", " ", 
    RowBox[{"x", " ", "/", " ", "x"}]}], ",", "x"}], "]"}]], "Input",
 CellChangeTimes->{{3.8724119509616084`*^9, 3.872411974060037*^9}},
 CellLabel->"In[1]:=",ExpressionUUID->"542bf022-1f02-4ad9-a0be-8e231882e0de"],

Cell[BoxData[
 RowBox[{"sin", " ", "x"}]], "Output",
 CellChangeTimes->{3.872411976036333*^9},
 CellLabel->"Out[1]=",ExpressionUUID->"b47a6069-8072-49ff-9571-1ff9f205b799"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Integrate", "[", 
  RowBox[{
   RowBox[{"sin", " ", "x", " ", 
    RowBox[{"x", "^", 
     RowBox[{"{", 
      RowBox[{"-", "1"}], "}"}]}]}], " ", ",", "x"}], "]"}]], "Input",
 CellChangeTimes->{{3.8724119999937415`*^9, 3.8724120176401634`*^9}},
 CellLabel->"In[2]:=",ExpressionUUID->"bb43ff49-28e3-4875-bdf8-7d8176cdbae5"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"sin", " ", "x"}], "}"}]], "Output",
 CellChangeTimes->{3.8724120196666317`*^9},
 CellLabel->"Out[2]=",ExpressionUUID->"89710869-aa0d-49a3-aa1a-27530dafdc38"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Integrate", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"sin", "[", "x", "]"}], "/", "x"}], " ", ",", "x"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.872412035350783*^9, 3.8724120382946806`*^9}, {
  3.872412082250862*^9, 3.872412122870304*^9}},
 CellLabel->"In[3]:=",ExpressionUUID->"fc2b00b5-a9b8-487c-bcc6-f57d8845f7ee"],

Cell[BoxData[
 RowBox[{"\[Integral]", 
  RowBox[{
   FractionBox[
    RowBox[{"sin", "[", "x", "]"}], "x"], 
   RowBox[{"\[DifferentialD]", "x"}]}]}]], "Output",
 CellChangeTimes->{3.8724121027196918`*^9},
 CellLabel->"Out[3]=",ExpressionUUID->"bd4c5432-2b30-4700-adf1-122a78d2ffc0"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Simplify", "[", 
  RowBox[{"Integrate", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"sin", "[", "x", "]"}], "/", "x"}], " ", ",", "x"}], "]"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.8724121269219837`*^9, 3.8724121336871967`*^9}},
 CellLabel->"In[4]:=",ExpressionUUID->"13e5da8c-90de-4b2d-a5f0-b155b6a2628f"],

Cell[BoxData[
 RowBox[{"\[Integral]", 
  RowBox[{
   FractionBox[
    RowBox[{"sin", "[", "x", "]"}], "x"], 
   RowBox[{"\[DifferentialD]", "x"}]}]}]], "Output",
 CellChangeTimes->{3.872412135787468*^9},
 CellLabel->"Out[4]=",ExpressionUUID->"3a86ddef-f949-44ba-bd84-2124f4a59f49"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Simplify", "[", 
  RowBox[{"Integrate", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"Sin", "[", "x", "]"}], "/", "x"}], " ", ",", "x"}], "]"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.8724121798581467`*^9, 3.87241218018757*^9}},
 CellLabel->"In[5]:=",ExpressionUUID->"1c09b411-bf2a-44b4-bde1-8767deea21bc"],

Cell[BoxData[
 RowBox[{"SinIntegral", "[", "x", "]"}]], "Output",
 CellChangeTimes->{3.8724121842522583`*^9},
 CellLabel->"Out[5]=",ExpressionUUID->"6784507b-e9dd-410a-9da5-164ea1d5a941"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Integrate", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"Sin", "[", "x", "]"}], "/", "x"}], " ", ",", "x"}], 
  "]"}]], "Input",
 CellLabel->"In[6]:=",ExpressionUUID->"87002a90-4a2b-4894-a3d5-b492a0265ef4"],

Cell[BoxData[
 RowBox[{"SinIntegral", "[", "x", "]"}]], "Output",
 CellChangeTimes->{3.872412292589682*^9},
 CellLabel->"Out[6]=",ExpressionUUID->"49ec4900-9b23-44dd-ac5b-b2d3ab243be6"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Integrate", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"Sin", "[", "x", "]"}], "/", "x"}], " ", ",", "x"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.872412440170917*^9, 3.872412447898677*^9}},
 CellLabel->"In[7]:=",ExpressionUUID->"1eab905a-a289-4bb7-b487-e01e6ae75169"],

Cell[BoxData[
 RowBox[{"SinIntegral", "[", "x", "]"}]], "Output",
 CellChangeTimes->{3.872412451752499*^9},
 CellLabel->"Out[7]=",ExpressionUUID->"a69d0c5b-a4ca-4510-a66f-afd2977b9a0a"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"\[Integral]", 
  RowBox[{
   FractionBox[
    RowBox[{"Sin", "[", "x", "]"}], "x"], 
   RowBox[{"\[DifferentialD]", "x"}]}]}]], "Input",
 CellChangeTimes->{{3.872412471822159*^9, 3.8724124798314886`*^9}},
 CellLabel->"In[8]:=",ExpressionUUID->"0ffe6e9a-1431-4efd-8196-528b47a0592b"],

Cell[BoxData[
 RowBox[{"SinIntegral", "[", "x", "]"}]], "Output",
 CellChangeTimes->{3.8724124818132677`*^9},
 CellLabel->"Out[8]=",ExpressionUUID->"c6e6487b-3fd0-44ee-a14b-270d10402b3c"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{"SinIntegral", "[", "x", "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", 
     RowBox[{"-", "56.548667764616276`"}], ",", "56.548667764616276`"}], 
    "}"}]}], "]"}]], "Input",
 NumberMarks->False,
 CellLabel->"In[9]:=",ExpressionUUID->"2aa161b6-25ca-4f73-940f-a87267cffa65"],

Cell[BoxData[
 GraphicsBox[{{{}, {}, 
    TagBox[
     {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
      1.], LineBox[CompressedData["
1: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
uQ==
       "]]},
     Annotation[#, "Charting`Private`Tag$21306#1"]& ]}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{
   "DefaultBoundaryStyle" -> Automatic, 
    "DefaultGraphicsInteraction" -> {
     "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
      "Effects" -> {
       "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
        "Droplines" -> {
         "freeformCursorMode" -> True, 
          "placement" -> {"x" -> "All", "y" -> "None"}}}}, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{-56.548667764616276`, 
   56.548667764616276`}, {-1.8518942580872204`, 1.851899725425445}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.8724124968964553`*^9},
 CellLabel->"Out[9]=",ExpressionUUID->"73d72c8e-9032-4302-9145-07869774a539"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"D", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"Sin", "[", "x", "]"}], "/", "x"}], ",", "x"}], "]"}]], "Input",
 CellChangeTimes->{{3.872422795991624*^9, 3.872422809433446*^9}},
 CellLabel->"In[10]:=",ExpressionUUID->"c1f54ab8-e580-4398-9043-c16e7ff88843"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  FractionBox[
   RowBox[{"Cos", "[", "x", "]"}], "x"], "-", 
  FractionBox[
   RowBox[{"Sin", "[", "x", "]"}], 
   SuperscriptBox["x", "2"]]}], "\[IndentingNewLine]", 
 RowBox[{"D", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"Cos", "[", "x", "]"}], "-", 
    RowBox[{"2", " ", 
     RowBox[{
      RowBox[{"Sin", "[", "x", "]"}], "/", " ", "x"}]}]}], ",", "x"}], "]"}]}],\
 "Input",
 CellChangeTimes->{{3.8724228518046184`*^9, 3.872422879516323*^9}},
 CellLabel->"In[11]:=",ExpressionUUID->"6afee3ed-ea7c-4c73-8838-80800b30ba6f"],

Cell[BoxData[
 RowBox[{
  FractionBox[
   RowBox[{"Cos", "[", "x", "]"}], "x"], "-", 
  FractionBox[
   RowBox[{"Sin", "[", "x", "]"}], 
   SuperscriptBox["x", "2"]]}]], "Output",
 CellChangeTimes->{3.87242288090828*^9},
 CellLabel->"Out[11]=",ExpressionUUID->"7e0a744f-a5a1-4214-b0ca-52e656758794"],

Cell[BoxData[
 RowBox[{
  RowBox[{"-", 
   FractionBox[
    RowBox[{"2", " ", 
     RowBox[{"Cos", "[", "x", "]"}]}], "x"]}], "-", 
  RowBox[{"Sin", "[", "x", "]"}], "+", 
  FractionBox[
   RowBox[{"2", " ", 
    RowBox[{"Sin", "[", "x", "]"}]}], 
   SuperscriptBox["x", "2"]]}]], "Output",
 CellChangeTimes->{3.872422880913281*^9},
 CellLabel->"Out[12]=",ExpressionUUID->"f6ac0d48-3157-4b66-98b4-4988217362f2"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Integrate", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"Cos", "[", "x", "]"}], "-", 
    RowBox[{
     RowBox[{"Sin", "[", "x", "]"}], "/", "x"}]}], ",", "x"}], "]"}]], "Input",
 CellChangeTimes->{{3.8724229540161095`*^9, 3.8724229858980513`*^9}},
 CellLabel->"In[13]:=",ExpressionUUID->"dfad6ab7-cb0a-4310-b59b-2fc44a643ca7"],

Cell[BoxData[
 RowBox[{
  RowBox[{"Sin", "[", "x", "]"}], "-", 
  RowBox[{"SinIntegral", "[", "x", "]"}]}]], "Output",
 CellChangeTimes->{3.8724229875851154`*^9},
 CellLabel->"Out[13]=",ExpressionUUID->"11313216-531c-4b2a-b51e-f681ae176603"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"Sin", "[", "x", "]"}], "-", 
    RowBox[{"SinIntegral", "[", "x", "]"}]}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", 
     RowBox[{"-", "37.69911184307752`"}], ",", "37.69911184307752`"}], 
    "}"}]}], "]"}]], "Input",
 NumberMarks->False,
 CellLabel->"In[16]:=",ExpressionUUID->"9b4104a7-5204-4217-9eb2-e45a131daf09"],

Cell[BoxData[
 GraphicsBox[{{}, {}, 
   TagBox[
    {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
     1.], LineBox[CompressedData["
1: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
/v97guj/ACTKVoY=
      "]]},
    Annotation[#, "Charting`Private`Tag$31677#1"]& ]},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{
   "DefaultBoundaryStyle" -> Automatic, 
    "DefaultGraphicsInteraction" -> {
     "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
      "Effects" -> {
       "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
        "Droplines" -> {
         "freeformCursorMode" -> True, 
          "placement" -> {"x" -> "All", "y" -> "None"}}}}, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{-37.69911184307752, 37.69911184307752}, {-2.631683365402467, 
   2.631686309444743}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.8724238125336485`*^9},
 CellLabel->"Out[16]=",ExpressionUUID->"0a784360-5b84-4d63-9f1a-b58cad7610a5"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Integrate", "[", 
  RowBox[{
   RowBox[{"x", " ", 
    RowBox[{"D", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"Sin", "[", "x", "]"}], "/", "x"}], ",", "x"}], "]"}]}], ",", 
   "x"}], "]"}]], "Input",
 CellChangeTimes->{{3.8724230848600063`*^9, 3.872423112407014*^9}},
 CellLabel->"In[14]:=",ExpressionUUID->"6c3922f8-f719-4675-9e4a-01d5a2025948"],

Cell[BoxData[
 RowBox[{
  RowBox[{"Sin", "[", "x", "]"}], "-", 
  RowBox[{"SinIntegral", "[", "x", "]"}]}]], "Output",
 CellChangeTimes->{3.8724231159562626`*^9},
 CellLabel->"Out[14]=",ExpressionUUID->"0e2afdf2-9e3e-4c37-b0b5-0679e8bef95f"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Simplify", "[", 
  RowBox[{"TrigToExp", "[", 
   RowBox[{
    RowBox[{"Sin", "[", "x", "]"}], "-", 
    RowBox[{"SinIntegral", "[", "x", "]"}]}], "]"}], "]"}]], "Input",
 NumberMarks->False,
 CellLabel->"In[15]:=",ExpressionUUID->"9261f573-66d5-42a7-b34b-490d4c3b9ed9"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"-", 
    FractionBox["1", "2"]}], " ", "\[ImaginaryI]", " ", 
   SuperscriptBox["\[ExponentialE]", 
    RowBox[{
     RowBox[{"-", "\[ImaginaryI]"}], " ", "x"}]], " ", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"-", "1"}], "+", 
     SuperscriptBox["\[ExponentialE]", 
      RowBox[{"2", " ", "\[ImaginaryI]", " ", "x"}]]}], ")"}]}], "-", 
  RowBox[{"SinIntegral", "[", "x", "]"}]}]], "Output",
 CellChangeTimes->{3.8724231322880974`*^9},
 CellLabel->"Out[15]=",ExpressionUUID->"fd05d868-b546-4f3b-91b5-d2ef22df0aa7"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Integrate", "[", 
  RowBox[{
   RowBox[{"1", "/", 
    RowBox[{"Log", "[", "x", "]"}]}], ",", "x"}], "]"}]], "Input",
 CellChangeTimes->{{3.8724275820979424`*^9, 3.8724276191239824`*^9}},
 CellLabel->"In[17]:=",ExpressionUUID->"a0d1928a-0b33-4f76-bf5b-3e9994aec608"],

Cell[BoxData[
 RowBox[{"LogIntegral", "[", "x", "]"}]], "Output",
 CellChangeTimes->{3.872427620690982*^9},
 CellLabel->"Out[17]=",ExpressionUUID->"81f68e3a-a17b-469c-835d-2424c30ef44e"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"LogIntegral", "[", "x", "]"}]], "Input",
 CellLabel->"In[18]:=",ExpressionUUID->"0b5189ba-3b38-4913-b3a8-1e5b125086f5"],

Cell[BoxData[
 RowBox[{"LogIntegral", "[", "x", "]"}]], "Output",
 CellChangeTimes->{3.872427631019231*^9},
 CellLabel->"Out[18]=",ExpressionUUID->"9987cdbe-1b02-4059-9988-5797aa87a7d4"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Integrate", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"1", " ", "/", " ", 
     RowBox[{"Log", "[", "x", "]"}]}], "+", 
    RowBox[{"Log", "[", 
     RowBox[{"Log", "[", "x", "]"}], "]"}]}], ",", "x"}], "]"}]], "Input",
 CellChangeTimes->{{3.8724276340532265`*^9, 3.8724276676162806`*^9}},
 CellLabel->"In[19]:=",ExpressionUUID->"c0423d6a-11b7-4a33-9470-edada7b5c538"],

Cell[BoxData[
 RowBox[{"x", " ", 
  RowBox[{"Log", "[", 
   RowBox[{"Log", "[", "x", "]"}], "]"}]}]], "Output",
 CellChangeTimes->{3.872427669631112*^9},
 CellLabel->"Out[19]=",ExpressionUUID->"ed3d706c-08e6-4c46-935f-76509b2b3e7e"]
}, Open  ]],

Cell[CellGroupData[{

Cell["x*Log[Log[x]]", "WolframAlphaLong",
 CellLabel->"In[21]:=",ExpressionUUID->"37db9d51-037c-44b1-a7e1-7ba791bd0a9e"],

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = "x*Log[Log[x]]", Typeset`opts$$ = {
   AppearanceElements -> {
     "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
      "Sources"}, Asynchronous -> All, 
    TimeConstraint -> {20, Automatic, Automatic, Automatic}, 
    Method -> {
     "Formats" -> {"cell", "minput", "msound", "dataformats"}, "Server" -> 
      "https://api.wolframalpha.com/v1/"}}, Typeset`elements$$ = {
   "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
    "Sources"}, Typeset`pod1$$ = XMLElement[
   "pod", {"title" -> "Input", "scanner" -> "Identity", "id" -> "Input", 
     "position" -> "100", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"x Log[Log[x]]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             RowBox[{"x", " ", 
               RowBox[{"log", "(", 
                 RowBox[{"log", "(", "x", ")"}], ")"}]}], 
             PolynomialForm[#, TraditionalOrder -> False]& ], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["infos", {"count" -> "1"}, {
       XMLElement["info", {"text" -> "log(x) is the natural logarithm"}, {
         XMLElement[
         "link", {
          "url" -> "http://reference.wolfram.com/language/ref/Log.html", 
           "text" -> "Documentation", "title" -> "Mathematica"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://functions.wolfram.com/ElementaryFunctions/Log", 
           "text" -> "Properties", "title" -> "Wolfram Functions Site"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/NaturalLogarithm.html", 
           "text" -> "Definition", "title" -> "MathWorld"}, {}]}]}]}], 
   Typeset`pod2$$ = XMLElement[
   "pod", {"title" -> "Plots", "scanner" -> "Plotter", "id" -> "Plot", 
     "position" -> "200", "error" -> "false", "numsubpods" -> "2"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Plot[x Log[Log[x]], {x, -2.5, 7.9}]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              StyleBox[
               
               DynamicModuleBox[{
                CalculateUtilities`GraphicsUtilities`Private`max5399$$ = 0.5, 
                 CalculateUtilities`GraphicsUtilities`Private`min5398$$ = \
-0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False, 
                 Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
                 Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, 
                 Typeset`animvar$$ = 1, Typeset`name$$ = "\"untitled\"", 
                 Typeset`specs$$ = {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], {
                    False, True}}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min5398$$], \
-0.5, "min"}, -1, 1}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max5399$$], 
                    0.5, "max"}, -1, 1}, {
                    Hold[
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]], 
                    Manipulate`Dump`ThisIsNotAControl}}, Typeset`size$$ = 
                 Automatic, Typeset`update$$ = 0, Typeset`initDone$$ = False, 
                 Typeset`skipInitDone$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`more$1193321$$ = 
                 False, CalculateUtilities`GraphicsUtilities`Private`min5398$\
1193326$$ = 0, CalculateUtilities`GraphicsUtilities`Private`max5399$1193327$$ = 
                 0}, 
                DynamicBox[
                 Manipulate`ManipulateBoxes[
                 2, TraditionalForm, 
                  "Variables" :> {
                   CalculateUtilities`GraphicsUtilities`Private`max5399$$ = 
                    0.5, CalculateUtilities`GraphicsUtilities`Private`min5398$\
$ = -0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False}, 
                  "ControllerVariables" :> {
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$, 
                    CalculateUtilities`GraphicsUtilities`Private`more$1193321$\
$, False], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min5398$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min5398$\
1193326$$, 0], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max5399$$, 
                    CalculateUtilities`GraphicsUtilities`Private`max5399$\
1193327$$, 0]}, "OtherVariables" :> {
                   Typeset`show$$, Typeset`bookmarkList$$, 
                    Typeset`bookmarkMode$$, Typeset`animator$$, 
                    Typeset`animvar$$, Typeset`name$$, Typeset`specs$$, 
                    Typeset`size$$, Typeset`update$$, Typeset`initDone$$, 
                    Typeset`skipInitDone$$}, "Body" :> Quiet[
                    Function[Null, 
                    CalculateUtilities`GraphicsUtilities`Private`post$1193300[
                    Plot[
                    SlotSequence[1]]], HoldAll][$CellContext`x Log[
                    Log[$CellContext`x]], {$CellContext`x, 
                    If[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min5398$$], 
                    (
                    Piecewise[{{
                    2.694528049465325 + 
                    5.520527745448381 Tan[1.5040801783846716` #], # < 0}}, 
                    2.694528049465325 + 
                    5.520527745448382 Tan[1.5040801783846716` #]]& )[
                    CalculateUtilities`GraphicsUtilities`Private`min5398$$], \
-2.4694528049465325`], 
                    If[
                    And[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min5398$$], 
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`max5399$$]], 
                    (
                    Piecewise[{{
                    2.694528049465325 + 
                    5.520527745448381 Tan[1.5040801783846716` #], # < 0}}, 
                    2.694528049465325 + 
                    5.520527745448382 Tan[1.5040801783846716` #]]& )[
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`min5398$$ == 
                    CalculateUtilities`GraphicsUtilities`Private`max5399$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min5398$$ + 
                    0.010327961708823717`, 
                    CalculateUtilities`GraphicsUtilities`Private`max5399$$]], 
                    7.858508903877183]}, 
                    LabelStyle -> {FontFamily -> "Bitstream Charter"}, 
                    WorkingPrecision -> MachinePrecision, 
                    PlotRange -> {Full, Automatic}, LabelStyle -> {}, Ticks -> 
                    Automatic, ImageSize -> Scaled[0.4], AxesLabel -> {
                    RawBoxes[
                    FormBox["x", TraditionalForm]], None}]], 
                  "Specifications" :> {{
                    CalculateUtilities`GraphicsUtilities`Private`more$$, {
                    False, True}, ControlType -> None}, {{
                    CalculateUtilities`GraphicsUtilities`Private`min5398$$, \
-0.5, "min"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 1}, {{
                    CalculateUtilities`GraphicsUtilities`Private`max5399$$, 
                    0.5, "max"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 
                    2}, 
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]}, 
                  "Options" :> {
                   ControlPlacement -> Bottom, 
                    FrameMargins -> {{0, 0}, {0, 10}}, Paneled -> False, 
                    AppearanceElements -> {}, 
                    LabelStyle -> {
                    "DialogStyle", FontColor -> GrayLevel[0.25]}}, 
                  "DefaultOptions" :> {}], SingleEvaluation -> True], 
                Initialization :> ({
                   ReleaseHold[
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`res, 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat}, 
                    CalculateUtilities`GraphicsUtilities`Private`res = 
                    ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    Replace[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[
                    Style, $CellContext`UnitNumberForm, NumberForm] -> (#& )],
                     Pattern[CalculateUtilities`GraphicsUtilities`Private`t, {
                    PatternTest[
                    BlankSequence[], NumberQ]}] :> 
                    Thread[{CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`t}]], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; If[
                    MatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    Condition[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`quants, {
                    Alternatives[
                    BlankSequence[$CellContext`ShortQuantity], 
                    BlankSequence[Quantity]]}], Length[
                    Union[
                    
                    Map[$CellContext`UnitObjectPart, 
                    CalculateUtilities`GraphicsUtilities`Private`quants]]] == 
                    1]], CalculateUtilities`GraphicsUtilities`Private`\
unitformat = $CellContext`ToCDFQuantityFunction[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 2]]; 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat -> 
                    Thread[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 1], 
                    $CellContext`QuantityPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    $CellContext`UnitObjectPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 
                    2]]]}], 
                    CalculateUtilities`GraphicsUtilities`Private`res]]; 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`post$1193300]\
 = {"ReturnInteractiveTypes" -> False, "Nearest" -> Automatic}; 
                    CalculateUtilities`GraphicsUtilities`Private`post$1193300[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[Graphics]], 
                    OptionsPattern[]] := Check[
                    
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`lines, 
                    CalculateUtilities`GraphicsUtilities`Private`pts, 
                    CalculateUtilities`GraphicsUtilities`Private`gg, 
                    CalculateUtilities`GraphicsUtilities`Private`type, 
                    CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    CalculateUtilities`GraphicsUtilities`Private`range, 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,
                     CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = OptionValue["Nearest"]}, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog = 
                    Replace[
                    ReplaceAll[Epilog, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Epilog -> Sequence[]]; Switch[
                    ReplaceAll[{Frame, Axes}, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]], {True, 
                    Blank[]}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Frame; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    ReplaceAll[FrameTicks, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]]], {
                    Blank[], True}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Axes; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    ReplaceAll[Ticks, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]], 
                    Blank[], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    And[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    Frame, 
                    Or[
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`t === None, 
                    CalculateUtilities`GraphicsUtilities`Private`b === 
                    CalculateUtilities`GraphicsUtilities`Private`t]], 
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`r === None, 
                    CalculateUtilities`GraphicsUtilities`Private`l === 
                    CalculateUtilities`GraphicsUtilities`Private`r]]]], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    TrueQ[
                    OptionValue["ReturnInteractiveTypes"]], 
                    Which[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], {}, 
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], {}, True, {
                    "Tooltips", "Coordinates"}], If[
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gg = 
                    Normal[CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = 
                    Partition[
                    Flatten[
                    Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Point[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    Infinity]], 2]; 
                    If[Length[
                    CalculateUtilities`GraphicsUtilities`Private`pts] < 2, 
                    CalculateUtilities`GraphicsUtilities`Private`lines = Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Blank[Line], Infinity]; 
                    If[CalculateUtilities`GraphicsUtilities`Private`lines === \
{}, 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = Flatten[
                    Cases[
                    CalculateUtilities`GraphicsUtilities`Private`lines, Line[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, Infinity],
                     1]; If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, If[
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[
                    CalculateUtilities`GraphicsUtilities`Private`lines], 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "1D", CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = "2D"]; Null], 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "2D"]]; 
                    CalculateUtilities`GraphicsUtilities`Private`range = 
                    Replace[
                    ReplaceAll[PlotRange, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Except[{{
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}, {
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}}] :> {
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]], 
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]]}]; CalculateUtilities`GraphicsUtilities`Private`b = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`b, 
                    First[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]; CalculateUtilities`GraphicsUtilities`Private`l = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]; CalculateUtilities`GraphicsUtilities`Private`\
oldgridlines = ReplaceAll[GridLines, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines = 
                    With[{CalculateUtilities`GraphicsUtilities`Private`gray = 
                    GrayLevel[0.7]}, 
                    Replace[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,\
 {Pattern[CalculateUtilities`GraphicsUtilities`Private`a, {
                    Blank[List], 
                    Blank[List]}] :> Dynamic[
                    Join[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]], {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[List]], Automatic} :> 
                    With[{CalculateUtilities`GraphicsUtilities`Private`\
divisions = {CalculateUtilities`GraphicsUtilities`Private`a, 
                    FindDivisions[
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    7]}}, 
                    Dynamic[
                    Join[
                    CalculateUtilities`GraphicsUtilities`Private`divisions, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]]], Blank[] -> Dynamic[
                    
                    Map[{{#, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}& , 
                    MousePosition[{"Graphics", Graphics}, None]]]}]]; If[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    If[CalculateUtilities`GraphicsUtilities`Private`\
neareststyle === "1D", 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 1] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts]}, 
                    CalculateUtilities`GraphicsUtilities`Private`n[
                    Part[#, 1]]& ], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Transpose[
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`pts]/Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts], 
                    CalculateUtilities`GraphicsUtilities`Private`scale = Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]}, CalculateUtilities`GraphicsUtilities`Private`n[#/
                    CalculateUtilities`GraphicsUtilities`Private`scale]& ]], 
                    CalculateUtilities`GraphicsUtilities`Private`left = 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`bottom = 
                    CalculateUtilities`GraphicsUtilities`Private`b}, 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]], 
                    Epilog -> {
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    Dynamic[
                    
                    DynamicModule[{
                    CalculateUtilities`GraphicsUtilities`Private`pt = 
                    CalculateUtilities`GraphicsUtilities`Private`nf[
                    MousePosition[{"Graphics", Graphics}, {0, 0}]], 
                    CalculateUtilities`GraphicsUtilities`Private`scaled = 
                    MousePosition[{"GraphicsScaled", Graphics}, None]}, 
                    If[CalculateUtilities`GraphicsUtilities`Private`scaled === 
                    None, {}, {
                    Text[
                    Style[
                    Row[{
                    CalculateUtilities`GraphicsUtilities`Private`bottom[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 1]], 
                    CalculateUtilities`GraphicsUtilities`Private`left[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 2]]}, 
                    ","], 12], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1], {
                    1.5 Sign[Part[
                    CalculateUtilities`GraphicsUtilities`Private`scaled, 1] - 
                    0.5], 0}, Background -> White], 
                    AbsolutePointSize[7], 
                    Point[CalculateUtilities`GraphicsUtilities`Private`pt], 
                    White, 
                    AbsolutePointSize[5], 
                    Point[
                    CalculateUtilities`GraphicsUtilities`Private`pt]}]]]}]]]]]\
, CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`post$1193300[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`g; 
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    BlankSequence[Line]]}] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`ordered, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals}, 
                    CalculateUtilities`GraphicsUtilities`Private`ordered = 
                    Apply[And, 
                    Map[OrderedQ[
                    Part[#, 1, All, 1]]& , 
                    Hold[CalculateUtilities`GraphicsUtilities`Private`l]]]; If[
                    Not[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`ordered]], 
                    Return[False]]; 
                    CalculateUtilities`GraphicsUtilities`Private`intervals = 
                    Part[{CalculateUtilities`GraphicsUtilities`Private`l}, 
                    All, 1, {1, -1}, 1]; Length[
                    Apply[
                    Interval, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals]] === 
                    Length[CalculateUtilities`GraphicsUtilities`Private`\
intervals]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Alternatives[Automatic, FrameTicks]] = {
                    Identity, Identity, Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]]}}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Blank[]] = {None, None, None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Alternatives[Automatic, Ticks]] = {Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`h, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`v, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`h, 
                    CalculateUtilities`GraphicsUtilities`Private`v}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Blank[]] = {None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`CDFCleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[Style, NumberForm] -> (#& )], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$, 
                    Blank[]]] := 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[None] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[False] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[True] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[Automatic] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[All] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[Pattern[CalculateUtilities`GraphicsUtilities`Private`func, 
                    Blank[]] -> 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := Replace[
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[CalculateUtilities`GraphicsUtilities`Private`ticks], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`f, 
                    Except[None]] :> 
                    Composition[
                    CalculateUtilities`GraphicsUtilities`Private`func, 
                    CalculateUtilities`GraphicsUtilities`Private`f]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[{}] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    Blank[Integer], 
                    Blank[String]}]}]] := Which[
                    Quiet[
                    MatchQ[
                    Apply[SameQ, 
                    Map[Part[
                    DateList[#], 
                    Span[2, All]]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    2}], {1}], {
                    Repeated[True]}]], DateString, 
                    Apply[And, 
                    StringMatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2], NumberString]], 
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Transpose[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    1], 
                    ToExpression[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2]]}]], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    PatternTest[
                    Blank[], NumericQ], 
                    PatternTest[
                    Blank[], NumericQ]}]}]] := Which[
                    MatchQ[
                    Apply[
                    Equal, CalculateUtilities`GraphicsUtilities`Private`ticks,\
 {1}], {
                    Repeated[True]}], Identity, 
                    MatchQ[
                    
                    Apply[# == Log[#2]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {1}], {
                    Repeated[True]}], Exp, 
                    TrueQ[
                    Quiet[
                    Apply[Equal, 
                    Apply[Divide, Transpose[
                    Rest[CalculateUtilities`GraphicsUtilities`Private`ticks]] - 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1]]]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`slope = 
                    Apply[Divide, 
                    Apply[Subtract, 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {-1, 
                    1}]]]}, 
                    SetPrecision[(# - Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 1, 
                    1])/CalculateUtilities`GraphicsUtilities`Private`slope + 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1, 2], 3]& ], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Blank[]] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`type, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`type; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Identity, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm, 
                    CalculateUtilities`GraphicsUtilities`Private`acc = 
                    Floor[Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3] - RealExponent[
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]]]}, 
                    CalculateUtilities`GraphicsUtilities`Private`nf[#, 
                    CalculateUtilities`GraphicsUtilities`Private`acc]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Exp, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`prec = 
                    Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3]}, Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[
                    Exp[#], 
                    CalculateUtilities`GraphicsUtilities`Private`prec]]]]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[DateString, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`pts, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`dates, 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    CalculateUtilities`GraphicsUtilities`Private`dates = 
                    Map[DateList, 
                    CalculateUtilities`GraphicsUtilities`Private`pts]; 
                    CalculateUtilities`GraphicsUtilities`Private`spec = Switch[
                    Map[Length, 
                    Map[Union, 
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`dates]]], {
                    Blank[], 1, 1, 
                    BlankSequence[]}, {"Year"}, {
                    Blank[], 
                    Blank[], 1, 
                    BlankSequence[]}, {"MonthNameShort", " ", "Year"}, 
                    Blank[], {
                    "DayShort", " ", "MonthNameShort", " ", "Year"}]; 
                    If[(CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/
                    31536000 > 25, 
                    CalculateUtilities`GraphicsUtilities`Private`spec = {
                    "Year"}]; 
                    With[{CalculateUtilities`GraphicsUtilities`Private`s = 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    DateString[#, 
                    CalculateUtilities`GraphicsUtilities`Private`s]& ]]; 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm = 
                    Function[{
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    CalculateUtilities`GraphicsUtilities`Private`acc}, 
                    Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Max[1, 
                    Ceiling[
                    RealExponent[
                    CalculateUtilities`GraphicsUtilities`Private`a] + 
                    CalculateUtilities`GraphicsUtilities`Private`acc]], 
                    ExponentFunction -> (Null& ), 
                    NumberFormat -> (StringReplace[#, StringExpression[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`s, 
                    BlankSequence[]], ".", EndOfString] -> 
                    CalculateUtilities`GraphicsUtilities`Private`s]& )]]]]]]], 
                   ReleaseHold[
                    Uncompress[
                    "6:eJztVt9v0zAQbikwfv/\
6D5B4RpTywgMSrGNj0oCSlPfeEiexcO1gO9vgnwef3STN2lWK6QBN6cOpvjSf77777npPj0WQ9Hu9n\
rpuzAfB4mQHT0+MGYt5Lgoevz/LJVGKCp5cw2d3jAmJ3iMMfpDY+W4asy/kHLQ7v8H3gUUFA02+\
asqopkTNDiTkGY1U7ZlIemJ+MmMiAkZ/kmfD4evRaPjCwWAsE9CaSK5GbSHzTIIiSQ+Bbhizy4B/\
c8fH5fFTwVhIvheER0Q9NN6phNjACA4M8/G+9WozdQ8T08BjkPGl02TlOW57gdKS8nRK5jm+\
cTFZw7bAIFPluLlfcrNJQS78W/hAhDYm57FJ27Ml0C+MK0bfeVn9c+4GeH7bFl6K0/\
XEYX7vGPIGmp4QtUrn89Z1coxUXWujX3B1WfNlq0FePGXq/6UjqvRqGC/bhkHmx6bG67W3Cv+\
qLbzIsesX4n5gzGfnKAHXDYdKcB9FXLBFFM2UB06i7dNVuXE4jLsV3yE6fSpY4QQmzrJfbH88qsDrT\
SHE2s22IB1ez4CA5MS4YsvtHk2pHmcgITLAi+v6ZZNNRR2Kx53ta095TM0Ac4RsWp7QHCZLdQcdZV/\
+qLiVXM41GfJ+yDVJidwo+ttYH2nI5fFUeEYS4gVNvXpzWCU1Aekt+0EJEubAKULSX+\
Zjv7mHy5VAqg4kqks6Fge2NGf+SfTLAh8RnuqsuWN7ji7vtsVsAnFaqy6gSbI8bbbHdL/\
JdOOG5kD3JcG3JP4DvdsUuk3hr24KK3twtyZ0a0K3JnRrQrcm/L9rgo0Y/5V+A5wfuC4="]]}; 
                 Typeset`initDone$$ = True), DynamicModuleValues :> {}, 
                Deinitialization :> None, 
                UntrackedVariables :> {Typeset`size$$}, 
                SynchronousInitialization -> True, 
                UnsavedVariables :> {Typeset`initDone$$}, 
                UndoTrackedVariables :> {
                 Typeset`show$$, Typeset`bookmarkMode$$}], "Manipulate", 
               Deployed -> True, StripOnInput -> False], TraditionalForm], 
             Manipulate`InterpretManipulate[1]], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"minput"}]}], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Plot[x Log[Log[x]], {x, -23., 29.}]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              StyleBox[
               
               DynamicModuleBox[{
                CalculateUtilities`GraphicsUtilities`Private`max5401$$ = 0.5, 
                 CalculateUtilities`GraphicsUtilities`Private`min5400$$ = \
-0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False, 
                 Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
                 Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, 
                 Typeset`animvar$$ = 1, Typeset`name$$ = "\"untitled\"", 
                 Typeset`specs$$ = {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], {
                    False, True}}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min5400$$], \
-0.5, "min"}, -1, 1}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max5401$$], 
                    0.5, "max"}, -1, 1}, {
                    Hold[
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]], 
                    Manipulate`Dump`ThisIsNotAControl}}, Typeset`size$$ = 
                 Automatic, Typeset`update$$ = 0, Typeset`initDone$$ = False, 
                 Typeset`skipInitDone$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`more$1193416$$ = 
                 False, CalculateUtilities`GraphicsUtilities`Private`min5400$\
1193417$$ = 0, CalculateUtilities`GraphicsUtilities`Private`max5401$1193418$$ = 
                 0}, 
                DynamicBox[
                 Manipulate`ManipulateBoxes[
                 2, TraditionalForm, 
                  "Variables" :> {
                   CalculateUtilities`GraphicsUtilities`Private`max5401$$ = 
                    0.5, CalculateUtilities`GraphicsUtilities`Private`min5400$\
$ = -0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False}, 
                  "ControllerVariables" :> {
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$, 
                    CalculateUtilities`GraphicsUtilities`Private`more$1193416$\
$, False], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min5400$$, 
                    
                    CalculateUtilities`GraphicsUtilities`Private`min5400$\
1193417$$, 0], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max5401$$, 
                    CalculateUtilities`GraphicsUtilities`Private`max5401$\
1193418$$, 0]}, "OtherVariables" :> {
                   Typeset`show$$, Typeset`bookmarkList$$, 
                    Typeset`bookmarkMode$$, Typeset`animator$$, 
                    Typeset`animvar$$, Typeset`name$$, Typeset`specs$$, 
                    Typeset`size$$, Typeset`update$$, Typeset`initDone$$, 
                    Typeset`skipInitDone$$}, "Body" :> Quiet[
                    Function[Null, 
                    CalculateUtilities`GraphicsUtilities`Private`post$1193397[
                    Plot[
                    SlotSequence[1]]], HoldAll][$CellContext`x Log[
                    Log[$CellContext`x]], {$CellContext`x, 
                    If[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min5400$$], 
                    (
                    Piecewise[{{
                    2.694528049465326 + 
                    27.602638727241906` Tan[1.5040801783846716` #], # < 0}}, 
                    2.694528049465326 + 
                    27.602638727241906` Tan[1.5040801783846716` #]]& )[
                    CalculateUtilities`GraphicsUtilities`Private`min5400$$], \
-23.125376222593964`], 
                    If[
                    And[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min5400$$], 
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`max5401$$]], 
                    (
                    Piecewise[{{
                    2.694528049465326 + 
                    27.602638727241906` Tan[1.5040801783846716` #], # < 0}}, 
                    2.694528049465326 + 
                    27.602638727241906` Tan[1.5040801783846716` #]]& )[
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`min5400$$ == 
                    CalculateUtilities`GraphicsUtilities`Private`max5401$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min5400$$ + 
                    0.05163980854411858, 
                    CalculateUtilities`GraphicsUtilities`Private`max5401$$]], 
                    28.514432321524616`]}, 
                    LabelStyle -> {FontFamily -> "Bitstream Charter"}, 
                    WorkingPrecision -> MachinePrecision, 
                    PlotRange -> {Full, Automatic}, LabelStyle -> {}, Ticks -> 
                    Automatic, ImageSize -> Scaled[0.4], AxesLabel -> {
                    RawBoxes[
                    FormBox["x", TraditionalForm]], None}]], 
                  "Specifications" :> {{
                    CalculateUtilities`GraphicsUtilities`Private`more$$, {
                    False, True}, ControlType -> None}, {{
                    CalculateUtilities`GraphicsUtilities`Private`min5400$$, \
-0.5, "min"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 1}, {{
                    CalculateUtilities`GraphicsUtilities`Private`max5401$$, 
                    0.5, "max"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 
                    2}, 
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]}, 
                  "Options" :> {
                   ControlPlacement -> Bottom, 
                    FrameMargins -> {{0, 0}, {0, 10}}, Paneled -> False, 
                    AppearanceElements -> {}, 
                    LabelStyle -> {
                    "DialogStyle", FontColor -> GrayLevel[0.25]}}, 
                  "DefaultOptions" :> {}], SingleEvaluation -> True], 
                Initialization :> ({
                   ReleaseHold[
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`res, 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat}, 
                    CalculateUtilities`GraphicsUtilities`Private`res = 
                    ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    Replace[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[
                    Style, $CellContext`UnitNumberForm, NumberForm] -> (#& )],
                     Pattern[CalculateUtilities`GraphicsUtilities`Private`t, {
                    PatternTest[
                    BlankSequence[], NumberQ]}] :> 
                    Thread[{CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`t}]], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; If[
                    MatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    Condition[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`quants, {
                    Alternatives[
                    BlankSequence[$CellContext`ShortQuantity], 
                    BlankSequence[Quantity]]}], Length[
                    Union[
                    
                    Map[$CellContext`UnitObjectPart, 
                    CalculateUtilities`GraphicsUtilities`Private`quants]]] == 
                    1]], CalculateUtilities`GraphicsUtilities`Private`\
unitformat = $CellContext`ToCDFQuantityFunction[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 2]]; 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat -> 
                    Thread[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 1], 
                    $CellContext`QuantityPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    $CellContext`UnitObjectPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 
                    2]]]}], 
                    CalculateUtilities`GraphicsUtilities`Private`res]]; 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`post$1193397]\
 = {"ReturnInteractiveTypes" -> False, "Nearest" -> Automatic}; 
                    CalculateUtilities`GraphicsUtilities`Private`post$1193397[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[Graphics]], 
                    OptionsPattern[]] := Check[
                    
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`lines, 
                    CalculateUtilities`GraphicsUtilities`Private`pts, 
                    CalculateUtilities`GraphicsUtilities`Private`gg, 
                    CalculateUtilities`GraphicsUtilities`Private`type, 
                    CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    CalculateUtilities`GraphicsUtilities`Private`range, 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,
                     CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = OptionValue["Nearest"]}, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog = 
                    Replace[
                    ReplaceAll[Epilog, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Epilog -> Sequence[]]; Switch[
                    ReplaceAll[{Frame, Axes}, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]], {True, 
                    Blank[]}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Frame; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    ReplaceAll[FrameTicks, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]]], {
                    Blank[], True}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Axes; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    ReplaceAll[Ticks, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]], 
                    Blank[], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    And[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    Frame, 
                    Or[
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`t === None, 
                    CalculateUtilities`GraphicsUtilities`Private`b === 
                    CalculateUtilities`GraphicsUtilities`Private`t]], 
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`r === None, 
                    CalculateUtilities`GraphicsUtilities`Private`l === 
                    CalculateUtilities`GraphicsUtilities`Private`r]]]], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    TrueQ[
                    OptionValue["ReturnInteractiveTypes"]], 
                    Which[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], {}, 
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], {}, True, {
                    "Tooltips", "Coordinates"}], If[
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gg = 
                    Normal[CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = 
                    Partition[
                    Flatten[
                    Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Point[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    Infinity]], 2]; 
                    If[Length[
                    CalculateUtilities`GraphicsUtilities`Private`pts] < 2, 
                    CalculateUtilities`GraphicsUtilities`Private`lines = Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Blank[Line], Infinity]; 
                    If[CalculateUtilities`GraphicsUtilities`Private`lines === \
{}, 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = Flatten[
                    Cases[
                    CalculateUtilities`GraphicsUtilities`Private`lines, Line[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, Infinity],
                     1]; If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, If[
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[
                    CalculateUtilities`GraphicsUtilities`Private`lines], 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "1D", CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = "2D"]; Null], 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "2D"]]; 
                    CalculateUtilities`GraphicsUtilities`Private`range = 
                    Replace[
                    ReplaceAll[PlotRange, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Except[{{
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}, {
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}}] :> {
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]], 
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]]}]; CalculateUtilities`GraphicsUtilities`Private`b = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`b, 
                    First[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]; CalculateUtilities`GraphicsUtilities`Private`l = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]; CalculateUtilities`GraphicsUtilities`Private`\
oldgridlines = ReplaceAll[GridLines, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines = 
                    With[{CalculateUtilities`GraphicsUtilities`Private`gray = 
                    GrayLevel[0.7]}, 
                    Replace[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,\
 {Pattern[CalculateUtilities`GraphicsUtilities`Private`a, {
                    Blank[List], 
                    Blank[List]}] :> Dynamic[
                    Join[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]], {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[List]], Automatic} :> 
                    With[{CalculateUtilities`GraphicsUtilities`Private`\
divisions = {CalculateUtilities`GraphicsUtilities`Private`a, 
                    FindDivisions[
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    7]}}, 
                    Dynamic[
                    Join[
                    CalculateUtilities`GraphicsUtilities`Private`divisions, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]]], Blank[] -> Dynamic[
                    
                    Map[{{#, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}& , 
                    MousePosition[{"Graphics", Graphics}, None]]]}]]; If[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    If[CalculateUtilities`GraphicsUtilities`Private`\
neareststyle === "1D", 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 1] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts]}, 
                    CalculateUtilities`GraphicsUtilities`Private`n[
                    Part[#, 1]]& ], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Transpose[
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`pts]/Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts], 
                    CalculateUtilities`GraphicsUtilities`Private`scale = Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]}, CalculateUtilities`GraphicsUtilities`Private`n[#/
                    CalculateUtilities`GraphicsUtilities`Private`scale]& ]], 
                    CalculateUtilities`GraphicsUtilities`Private`left = 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`bottom = 
                    CalculateUtilities`GraphicsUtilities`Private`b}, 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]], 
                    Epilog -> {
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    Dynamic[
                    
                    DynamicModule[{
                    CalculateUtilities`GraphicsUtilities`Private`pt = 
                    CalculateUtilities`GraphicsUtilities`Private`nf[
                    MousePosition[{"Graphics", Graphics}, {0, 0}]], 
                    CalculateUtilities`GraphicsUtilities`Private`scaled = 
                    MousePosition[{"GraphicsScaled", Graphics}, None]}, 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`scaled === 
                    None, {}, {
                    Text[
                    Style[
                    Row[{
                    CalculateUtilities`GraphicsUtilities`Private`bottom[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 1]], 
                    CalculateUtilities`GraphicsUtilities`Private`left[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 2]]}, 
                    ","], 12], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1], {
                    1.5 Sign[Part[
                    CalculateUtilities`GraphicsUtilities`Private`scaled, 1] - 
                    0.5], 0}, Background -> White], 
                    AbsolutePointSize[7], 
                    Point[CalculateUtilities`GraphicsUtilities`Private`pt], 
                    White, 
                    AbsolutePointSize[5], 
                    Point[
                    CalculateUtilities`GraphicsUtilities`Private`pt]}]]]}]]]]]\
, CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`post$1193397[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`g; 
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    BlankSequence[Line]]}] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`ordered, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals}, 
                    CalculateUtilities`GraphicsUtilities`Private`ordered = 
                    Apply[And, 
                    Map[OrderedQ[
                    Part[#, 1, All, 1]]& , 
                    Hold[CalculateUtilities`GraphicsUtilities`Private`l]]]; If[
                    Not[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`ordered]], 
                    Return[False]]; 
                    CalculateUtilities`GraphicsUtilities`Private`intervals = 
                    Part[{CalculateUtilities`GraphicsUtilities`Private`l}, 
                    All, 1, {1, -1}, 1]; Length[
                    Apply[
                    Interval, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals]] === 
                    Length[CalculateUtilities`GraphicsUtilities`Private`\
intervals]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Alternatives[Automatic, FrameTicks]] = {
                    Identity, Identity, Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]]}}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Blank[]] = {None, None, None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Alternatives[Automatic, Ticks]] = {Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`h, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`v, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`h, 
                    CalculateUtilities`GraphicsUtilities`Private`v}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Blank[]] = {None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`CDFCleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[Style, NumberForm] -> (#& )], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$, 
                    Blank[]]] := 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[None] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[False] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[True] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[Automatic] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[All] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[Pattern[CalculateUtilities`GraphicsUtilities`Private`func, 
                    Blank[]] -> 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := Replace[
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[CalculateUtilities`GraphicsUtilities`Private`ticks], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`f, 
                    Except[None]] :> 
                    Composition[
                    CalculateUtilities`GraphicsUtilities`Private`func, 
                    CalculateUtilities`GraphicsUtilities`Private`f]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[{}] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    Blank[Integer], 
                    Blank[String]}]}]] := Which[
                    Quiet[
                    MatchQ[
                    Apply[SameQ, 
                    Map[Part[
                    DateList[#], 
                    Span[2, All]]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    2}], {1}], {
                    Repeated[True]}]], DateString, 
                    Apply[And, 
                    StringMatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2], NumberString]], 
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Transpose[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    1], 
                    ToExpression[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2]]}]], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    PatternTest[
                    Blank[], NumericQ], 
                    PatternTest[
                    Blank[], NumericQ]}]}]] := Which[
                    MatchQ[
                    Apply[
                    Equal, CalculateUtilities`GraphicsUtilities`Private`ticks,\
 {1}], {
                    Repeated[True]}], Identity, 
                    MatchQ[
                    
                    Apply[# == Log[#2]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {1}], {
                    Repeated[True]}], Exp, 
                    TrueQ[
                    Quiet[
                    Apply[Equal, 
                    Apply[Divide, Transpose[
                    Rest[CalculateUtilities`GraphicsUtilities`Private`ticks]] - 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1]]]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`slope = 
                    Apply[Divide, 
                    Apply[Subtract, 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {-1, 
                    1}]]]}, 
                    SetPrecision[(# - Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 1, 
                    1])/CalculateUtilities`GraphicsUtilities`Private`slope + 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1, 2], 3]& ], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Blank[]] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`type, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`type; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Identity, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm, 
                    CalculateUtilities`GraphicsUtilities`Private`acc = 
                    Floor[Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3] - RealExponent[
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]]]}, 
                    CalculateUtilities`GraphicsUtilities`Private`nf[#, 
                    CalculateUtilities`GraphicsUtilities`Private`acc]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Exp, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`prec = 
                    Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3]}, Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[
                    Exp[#], 
                    CalculateUtilities`GraphicsUtilities`Private`prec]]]]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[DateString, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`pts, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`dates, 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    CalculateUtilities`GraphicsUtilities`Private`dates = 
                    Map[DateList, 
                    CalculateUtilities`GraphicsUtilities`Private`pts]; 
                    CalculateUtilities`GraphicsUtilities`Private`spec = Switch[
                    Map[Length, 
                    Map[Union, 
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`dates]]], {
                    Blank[], 1, 1, 
                    BlankSequence[]}, {"Year"}, {
                    Blank[], 
                    Blank[], 1, 
                    BlankSequence[]}, {"MonthNameShort", " ", "Year"}, 
                    Blank[], {
                    "DayShort", " ", "MonthNameShort", " ", "Year"}]; 
                    If[(CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/
                    31536000 > 25, 
                    CalculateUtilities`GraphicsUtilities`Private`spec = {
                    "Year"}]; 
                    With[{CalculateUtilities`GraphicsUtilities`Private`s = 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    DateString[#, 
                    CalculateUtilities`GraphicsUtilities`Private`s]& ]]; 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm = 
                    Function[{
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    CalculateUtilities`GraphicsUtilities`Private`acc}, 
                    Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Max[1, 
                    Ceiling[
                    RealExponent[
                    CalculateUtilities`GraphicsUtilities`Private`a] + 
                    CalculateUtilities`GraphicsUtilities`Private`acc]], 
                    ExponentFunction -> (Null& ), 
                    NumberFormat -> (StringReplace[#, StringExpression[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`s, 
                    BlankSequence[]], ".", EndOfString] -> 
                    CalculateUtilities`GraphicsUtilities`Private`s]& )]]]]]]], 
                   ReleaseHold[
                    Uncompress[
                    "6:eJztVt9v0zAQbikwfv/\
6D5B4RpSNBx6QGN0YkwaUpLzXSy6JhWsH29kG/zz47CZp1q5STAdoSh9O9aX5fPfdd9d7eiyCpN/\
r9dR1Yz4IFidbeHpizEjMclHweP8sl6AUFTy5hs/uGBOC3gNGfkDsfDeNeS/\
kjGh3foPvExYVjGj4qimjmoKaHkiSZzRStWcs6Yn5yZSJiDD6E54Nh6+\
3d168cjAYy5hoDZKr7baQeSaJgqSHQDeMeccI/+\
aOj8vjp4KxEL4XwCNQD413IklsYAQnDPPxvvVqM3UPE9OEx0TGl06Tleeo7QVKS8rTCcxyfONisoZt\
gYlMlePmfsnNOgW58G/hAxHamJzHJm3PlkC/MK4Yfedl9c+5G+\
D5bVt4KU5XE4f57TLkjWh6AmqZzuet6+QYqbrWRj/\
n6rLmy0aDvHjK1P9LR1Tp5TBetg0DZsemxqu1twy/0xZe5Nj1c3E/\
MOazc5SAq4ZDJbiPIi7YPIpmygMn0fbpqtw4HMbdiu8QnT4VrHACE2fZL7Y/\
HlXg9aYQYu2mG5AOr2dAADkYV2y53aMp1aOMSBIZ4Pl1/\
bLJJqIOxePO9rWnPKZmgDlC1i1PaA6ThboTHWVf/\
qi4lVzONRnyfsg1pCDXiv421kcacnk8EZ6RhHhBU6/eHFZJjYn0lv2gBAlzwilC0l/mY7+\
5h4uVQKoOJKpLOhYHtjRn/kn0ywIfAU911tyxPUeXd9tiNoE4rVUX0CRZnDabY7rfZLpxQ3Og+\
5LgWxL/gd5tCt2m8Fc3haU9uFsTujWhWxO6NaFbE/7fNcFGjP9KvwH9FLhW"]]}; 
                 Typeset`initDone$$ = True), DynamicModuleValues :> {}, 
                Deinitialization :> None, 
                UntrackedVariables :> {Typeset`size$$}, 
                SynchronousInitialization -> True, 
                UnsavedVariables :> {Typeset`initDone$$}, 
                UndoTrackedVariables :> {
                 Typeset`show$$, Typeset`bookmarkMode$$}], "Manipulate", 
               Deployed -> True, StripOnInput -> False], TraditionalForm], 
             Manipulate`InterpretManipulate[1]], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"minput"}]}], 
     XMLElement["expressiontypes", {"count" -> "2"}, {"\n  ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n "}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "statelist", {
        "count" -> "2", "value" -> "Real-valued plots", "delimiters" -> ""}, {
         XMLElement[
         "state", {
          "name" -> "Real-valued plots", "input" -> 
           "Plot__Real-valued plots"}, {}], 
         XMLElement[
         "state", {
          "name" -> "Complex-valued plots", "input" -> 
           "Plot__Complex-valued plots"}, {}]}]}]}], Typeset`pod3$$ = 
   XMLElement[
   "pod", {"title" -> "Root", "scanner" -> "Reduce", "id" -> "Root", 
     "position" -> "300", "error" -> "false", "numsubpods" -> "1", "primary" -> 
     "true"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Reduce[x Log[Log[x]] == 0, x, Reals]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            FormBox[
             FormBox[
              TagBox[
               GridBox[{{
                  PaneBox[
                   RowBox[{"x", "\[LongEqual]", "\[ExponentialE]"}], 
                   BaselinePosition -> Baseline, ImageSize -> 550]}}, 
                GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                AllowScriptLevelChange -> False, DefaultBaseStyle -> "Column",
                 GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
               "Column"], TraditionalForm], TraditionalForm], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "2"}, {
       XMLElement[
       "state", {
        "name" -> "Approximate form", "input" -> 
         "Root__Approximate form"}, {}], 
       XMLElement[
       "state", {
        "name" -> "Step-by-step solution", "input" -> 
         "Root__Step-by-step solution", "stepbystep" -> "true"}, {}]}]}], 
   Typeset`pod4$$ = XMLElement[
   "pod", {"title" -> "Integer root", "scanner" -> "Reduce", "id" -> 
     "IntegerSolution", "position" -> "400", "error" -> "false", "numsubpods" -> 
     "1", "primary" -> "true"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Reduce[x Log[Log[x]] == 0, x, Integers]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            FormBox[
             TagBox[
              GridBox[{{
                 PaneBox[
                  RowBox[{"x", "\[LongEqual]", "0"}], BaselinePosition -> 
                  Baseline, ImageSize -> 550]}}, 
               GridBoxAlignment -> {"Columns" -> {{Left}}}, 
               AllowScriptLevelChange -> False, DefaultBaseStyle -> "Column", 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
              "Column"], TraditionalForm], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"plaintext,minput,moutput"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod5$$ = XMLElement[
   "pod", {"title" -> "Properties as a real function", "scanner" -> 
     "FunctionProperties", "id" -> "PropertiesAsARealFunction", "position" -> 
     "500", "error" -> "false", "numsubpods" -> "3"}, {
     XMLElement["subpod", {"title" -> "Domain"}, {
       XMLElement["minput", {}, {"FunctionDomain[x Log[Log[x]], x]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TemplateBox[{"\"{\"", 
              RowBox[{"x", "\[Element]", 
                TemplateBox[{}, "Reals"]}], "\" : \"", 
              RowBox[{"x", ">", "1"}], "\"}\""}, "RowDefault"], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata"}]}], 
     XMLElement["subpod", {"title" -> "Range"}, {
       XMLElement["minput", {}, {"FunctionRange[x Log[Log[x]], x, y]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             TemplateBox[{
               TemplateBox[{}, "Reals"], "\"  \"", 
               StyleBox[
                
                RowBox[{
                 "\"(\"", "\[NoBreak]", "\"all real numbers\"", "\[NoBreak]", 
                  "\")\""}], {
                 GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                 LineIndent -> 0}]}, "RowDefault"], LineIndent -> 0], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata"}]}], 
     XMLElement["subpod", {"title" -> "Bijectivity"}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TemplateBox[{"\"bijective \"", 
              StyleBox["\" from its domain to \[DoubleStruckCapitalR]\"", {
                GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                LineIndent -> 0}]}, "RowDefault"], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {"plaintext,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "3"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["infos", {"count" -> "1"}, {
       XMLElement["info", {"text" -> "R is the set of real numbers"}, {
         XMLElement[
         "link", {
          "url" -> "http://reference.wolfram.com/language/ref/Reals.html", 
           "text" -> "Documentation", "title" -> "Documentation"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/R.html", "text" -> 
           "Definition", "title" -> "MathWorld"}, {}]}]}]}], Typeset`pod6$$ = 
   XMLElement[
   "pod", {"title" -> "Series expansion at x = 1", "scanner" -> "Series", 
     "id" -> "SeriesExpansionAtx=1.", "position" -> "600", "error" -> "false",
      "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Series[x Log[Log[x]], {x, 1, 4}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             GridBox[{{
                TemplateBox[{
                  RowBox[{
                    RowBox[{"log", "(", 
                    RowBox[{"x", "-", "1"}], ")"}], "+", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"x", "-", "1"}], ")"}], " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"log", "(", 
                    RowBox[{"x", "-", "1"}], ")"}], "-", 
                    FractionBox["1", "2"]}], ")"}]}], "-", 
                    RowBox[{
                    FractionBox["7", "24"], " ", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"x", "-", "1"}], ")"}], "2"]}], "+", 
                    RowBox[{
                    FractionBox["1", "12"], " ", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"x", "-", "1"}], ")"}], "3"]}], "-", 
                    FractionBox[
                    RowBox[{"109", " ", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"x", "-", "1"}], ")"}], "4"]}], "2880"], "+", 
                    FractionBox[
                    RowBox[{"61", " ", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"x", "-", "1"}], ")"}], "5"]}], "2880"], "+", 
                    InterpretationBox[
                    RowBox[{"O", "(", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"x", "-", "1"}], ")"}], "6"], ")"}], 
                    SeriesData[$CellContext`x, 1, {}, 0, 6, 1], Editable -> 
                    False]}], 
                  RowBox[{"SeriesData", "[", 
                    RowBox[{"x", ",", "1", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Log", "[", 
                    RowBox[{
                    RowBox[{"-", "1"}], "+", "x"}], "]"}], ",", 
                    RowBox[{
                    RowBox[{"-", 
                    FractionBox["1", "2"]}], "+", 
                    RowBox[{"Log", "[", 
                    RowBox[{
                    RowBox[{"-", "1"}], "+", "x"}], "]"}]}], ",", 
                    RowBox[{"-", 
                    FractionBox["7", "24"]}], ",", 
                    FractionBox["1", "12"], ",", 
                    RowBox[{"-", 
                    FractionBox["109", "2880"]}], ",", 
                    FractionBox["61", "2880"]}], "}"}], ",", "0", ",", "6", 
                    ",", "1"}], "]"}]}, "SeriesData", 
                 DisplayFunction -> (#& ), InterpretationFunction -> (#2& ), 
                 SyntaxForm -> Plus]}, {
                StyleBox[
                 
                 RowBox[{
                  "\"(\"", "\[NoBreak]", "\"generalized Puiseux series\"", 
                   "\[NoBreak]", "\")\""}], {
                 FontFamily -> "Roboto", FontSize -> 10, 
                  GrayLevel[0.5], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                   LineIndent -> 0}]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}}, 
              AllowScriptLevelChange -> False, DefaultBaseStyle -> "Column", 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
             "Column"], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["infos", {"count" -> "1"}, {
       XMLElement["info", {}, {
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/Big-ONotation.html", "text" -> 
           "Big\[Hyphen]O notation"}, {}]}]}]}], Typeset`pod7$$ = XMLElement[
   "pod", {"title" -> "Derivative", "scanner" -> "Derivative", "id" -> 
     "Derivative", "position" -> "700", "error" -> "false", "numsubpods" -> 
     "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"D[x Log[Log[x]], x]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              RowBox[{
                TagBox[
                 FractionBox["\[DifferentialD]", 
                  RowBox[{"\"\[DifferentialD]\"", "\[InvisibleSpace]", "x"}]], 
                 $CellContext`TagBoxWrapper[
                 "StringBoxes" -> RowBox[{"d/d", "\[InvisibleSpace]", "x"}]]],
                 "\[InvisibleSpace]", 
                RowBox[{"(", 
                  TagBox[
                   TagBox[
                    RowBox[{"x", " ", 
                    RowBox[{"log", "(", 
                    RowBox[{"log", "(", "x", ")"}], ")"}]}], HoldForm], 
                   PolynomialForm[#, TraditionalOrder -> False]& ], ")"}]}], 
              "\[LongEqual]", 
              TagBox[
               RowBox[{
                 RowBox[{"log", "(", 
                   RowBox[{"log", "(", "x", ")"}], ")"}], "+", 
                 FractionBox["1", 
                  RowBox[{"log", "(", "x", ")"}]]}], Identity]}], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "Step-by-step solution", "input" -> 
         "Derivative__Step-by-step solution", "stepbystep" -> 
         "true"}, {}]}]}], Typeset`pod8$$ = XMLElement[
   "pod", {"title" -> "Indefinite integral", "scanner" -> "Integral", "id" -> 
     "IndefiniteIntegral", "position" -> "800", "error" -> "false", 
     "numsubpods" -> "1", "primary" -> "true"}, {
     XMLElement["subpod", {"title" -> "", "primary" -> "true"}, {
       XMLElement["minput", {}, {"Integrate[x Log[Log[x]], x]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             TagBox[
              GridBox[{{
                 RowBox[{
                   TagBox[
                    RowBox[{"\[Integral]", 
                    RowBox[{
                    RowBox[{"x", " ", 
                    RowBox[{"log", "(", 
                    RowBox[{"log", "(", "x", ")"}], ")"}]}], 
                    RowBox[{"\[DifferentialD]", "x"}]}]}], HoldForm], 
                   "\[LongEqual]", 
                   TagBox[
                    StyleBox[
                    RowBox[{
                    StyleBox[
                    RowBox[{
                    FractionBox["1", "2"], " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    SuperscriptBox["x", "2"], " ", 
                    RowBox[{"log", "(", 
                    RowBox[{"log", "(", "x", ")"}], ")"}]}], "-", 
                    TemplateBox[{
                    RowBox[{"2", " ", 
                    RowBox[{"log", "(", "x", ")"}]}]}, "ExpIntegralEi"]}], 
                    ")"}]}], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], "+", 
                    StyleBox[
                    "\"constant\"", {
                    Magnification -> 0.9 Inherited, FontFamily -> "Roboto", 
                    FontSize -> Inherited, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}], {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], Identity]}]}, {
                 PaneBox[
                  TagBox[
                   PaneBox[
                    TagBox[
                    Cell[
                    TextData[{
                    StyleBox[
                    Cell[
                    BoxData[
                    FormBox[
                    
                    RowBox[{"\"(\"", "\[NoBreak]", 
                    "\"assuming a complex\[Hyphen]valued logarithm\"", 
                    "\[NoBreak]", "\")\""}], TraditionalForm]]], {
                    FontFamily -> "Roboto", FontSize -> 10, 
                    GrayLevel[0.5], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}]], 
                    $CellContext`TagBoxWrapper["Label"]], 
                    BaseStyle -> {LineIndent -> 0}], 
                   $CellContext`TagBoxWrapper["Label"]], 
                  BaseStyle -> {LineIndent -> 0}]}}, 
               GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
               "Column", 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
              "Column"], ImageSizeMultipliers -> {1, 1}, StripOnInput -> 
             False], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["infos", {"count" -> "1"}, {
       XMLElement["info", {"text" -> "Ei(x) is the exponential integral Ei"}, {
         XMLElement[
         "link", {
          "url" -> 
           "http://reference.wolfram.com/language/ref/ExpIntegralEi.html", 
           "text" -> "Documentation", "title" -> "Mathematica"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://functions.wolfram.com/GammaBetaErf/ExpIntegralEi", 
           "text" -> "Properties", "title" -> "Wolfram Functions Site"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/ExponentialIntegral.html", 
           "text" -> "Definition", "title" -> "MathWorld"}, {}]}]}]}], 
   Typeset`pod9$$ = XMLElement[
   "pod", {"title" -> "Definite integrals", "scanner" -> 
     "InterestingDefiniteIntegrals", "id" -> "DefiniteIntegral", "position" -> 
     "820", "error" -> "false", "numsubpods" -> "2"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"NIntegrate[x Log[Log[x]], {x, 0, 1}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TemplateBox[{
              RowBox[{
                TagBox[
                 RowBox[{
                   SubsuperscriptBox["\[Integral]", "0", "1"], 
                   RowBox[{
                    RowBox[{"x", " ", 
                    RowBox[{"log", "(", 
                    RowBox[{"log", "(", "x", ")"}], ")"}]}], 
                    RowBox[{"\[DifferentialD]", "x"}]}]}], HoldForm], 
                "\[TildeTilde]", 
                
                RowBox[{
                 "-", "2.2059777495256382984223364474019035697`11."}]}], 
              "\"\[Ellipsis]\""}, "RowDefault"], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata"}]}], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"NIntegrate[x Log[Log[x]], {x, 1, E}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TemplateBox[{
              RowBox[{
                TagBox[
                 RowBox[{
                   SubsuperscriptBox["\[Integral]", "1", "\[ExponentialE]"], 
                   RowBox[{
                    RowBox[{"x", " ", 
                    RowBox[{"log", "(", 
                    RowBox[{"log", "(", "x", ")"}], ")"}]}], 
                    RowBox[{"\[DifferentialD]", "x"}]}]}], HoldForm], 
                "\[TildeTilde]", 
                
                RowBox[{
                 "-", "1.84193575527020891868801300006452947855`11."}]}], 
              "\"\[Ellipsis]\""}, "RowDefault"], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "2"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "More digits", "input" -> 
         "DefiniteIntegral__More digits"}, {}]}]}], Typeset`pod10$$ = 
   XMLElement[
   "pod", {"title" -> "Alternative representations", "scanner" -> 
     "MathematicalFunctionData", "id" -> 
     "AlternativeRepresentations:MathematicalFunctionIdentityData", 
     "position" -> "840", "error" -> "false", "numsubpods" -> "3"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"x Log[Log[x]] == x Log[E, Log[x]]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            FrameBox[
             TagBox[
              RowBox[{
                RowBox[{"x", " ", 
                  RowBox[{"log", "(", 
                    RowBox[{"log", "(", "x", ")"}], ")"}]}], "\[LongEqual]", 
                RowBox[{"x", " ", 
                  TemplateBox[{"\[ExponentialE]", 
                    RowBox[{"log", "(", "x", ")"}]}, "Log", 
                   DisplayFunction -> (RowBox[{
                    SubscriptBox["log", #], "(", #2, ")"}]& )]}]}], HoldForm],
              FrameStyle -> None, FrameMargins -> {{-1, -1}, {3, 3}}], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"x Log[Log[x]] == x Log[a] Log[a, Log[x]]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            FrameBox[
             TagBox[
              RowBox[{
                RowBox[{"x", " ", 
                  RowBox[{"log", "(", 
                    RowBox[{"log", "(", "x", ")"}], ")"}]}], "\[LongEqual]", 
                RowBox[{"x", " ", 
                  RowBox[{"log", "(", "a", ")"}], " ", 
                  TemplateBox[{"a", 
                    RowBox[{"log", "(", "x", ")"}]}, "Log", 
                   DisplayFunction -> (RowBox[{
                    SubscriptBox["log", #], "(", #2, ")"}]& )]}]}], HoldForm],
              FrameStyle -> None, FrameMargins -> {{-1, -1}, {3, 3}}], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {"x Log[Log[x]] == -(x PolyLog[1, 1 - Log[x]])"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            FrameBox[
             TagBox[
              RowBox[{
                RowBox[{"x", " ", 
                  RowBox[{"log", "(", 
                    RowBox[{"log", "(", "x", ")"}], ")"}]}], "\[LongEqual]", 
                RowBox[{
                  RowBox[{"-", "x"}], " ", 
                  TemplateBox[{"1", 
                    RowBox[{"1", "-", 
                    RowBox[{"log", "(", "x", ")"}]}]}, "PolyLog"]}]}], 
              HoldForm], FrameStyle -> None, 
             FrameMargins -> {{-1, -1}, {3, 3}}], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["expressiontypes", {"count" -> "3"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "More", "input" -> 
         "AlternativeRepresentations:MathematicalFunctionIdentityData__More"},\
 {}]}], 
     XMLElement["infos", {"count" -> "3"}, {
       XMLElement["info", {"text" -> "log_b(x) is the base- b logarithm"}, {
         XMLElement[
         "link", {
          "url" -> "http://reference.wolfram.com/language/ref/Log.html", 
           "text" -> "Documentation", "title" -> "Mathematica"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://functions.wolfram.com/ElementaryFunctions/Log", 
           "text" -> "Properties", "title" -> "Wolfram Functions Site"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/NaturalLogarithm.html", 
           "text" -> "Definition", "title" -> "MathWorld"}, {}]}], 
       XMLElement[
       "info", {"text" -> "Li_n(x) is the polylogarithm function"}, {
         XMLElement[
         "link", {
          "url" -> "http://reference.wolfram.com/language/ref/PolyLog.html", 
           "text" -> "Documentation", "title" -> "Mathematica"}, {}], 
         XMLElement[
         "link", {
          "url" -> 
           "http://functions.wolfram.com/ZetaFunctionsandPolylogarithms/\
PolyLog", "text" -> "Properties", "title" -> "Wolfram Functions Site"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/Polylogarithm.html", "text" -> 
           "Definition", "title" -> "MathWorld"}, {}]}], 
       XMLElement["info", {}, {
         XMLElement[
         "link", {
          "url" -> 
           "http://functions.wolfram.com/ElementaryFunctions/Log/27/ShowAll.\
html", "text" -> "More information"}, {}]}]}]}], Typeset`pod11$$ = XMLElement[
   "pod", {"title" -> "Series representations", "scanner" -> 
     "MathematicalFunctionData", "id" -> 
     "SeriesRepresentations:MathematicalFunctionIdentityData", "position" -> 
     "860", "error" -> "false", "numsubpods" -> "3"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "x Log[Log[x]] == -(x Sum[((-1)^k (-1 + Log[x])^k)/k, {k, 1, \
Infinity}]) /; Abs[-1 + Log[x]] < 1"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            FrameBox[
             TemplateBox[{
               TagBox[
                RowBox[{
                  RowBox[{"x", " ", 
                    RowBox[{"log", "(", 
                    RowBox[{"log", "(", "x", ")"}], ")"}]}], "\[LongEqual]", 
                  RowBox[{
                    RowBox[{"-", "x"}], " ", 
                    RowBox[{
                    UnderoverscriptBox["\[Sum]", 
                    RowBox[{"k", "=", "1"}], "\[Infinity]"], 
                    FractionBox[
                    RowBox[{
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"-", "1"}], ")"}], "k"], " ", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"-", "1"}], "+", 
                    RowBox[{"log", "(", "x", ")"}]}], ")"}], "k"]}], 
                    "k"]}]}]}], HoldForm], 
               StyleBox[
                TemplateBox[{"\"  for \"", 
                  TagBox[
                   TemplateBox[{
                    RowBox[{
                    TemplateBox[{
                    RowBox[{
                    RowBox[{"-", "1"}], "+", 
                    RowBox[{"log", "(", "x", ")"}]}]}, "Abs"], "<", "1"}]}, 
                    "RowDefault"], HoldForm]}, "RowDefault"], 
                GrayLevel[0.6], StripOnInput -> False]}, "RowDefault"], 
             FrameStyle -> None, FrameMargins -> {{-1, -1}, {3, 3}}], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "x Log[Log[x]] == x Log[-1 + Log[x]] - x Sum[(-1)^k/(k (-1 + \
Log[x])^k), {k, 1, Infinity}] /; Abs[-1 + Log[x]] > 1"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            FrameBox[
             TemplateBox[{
               TagBox[
                RowBox[{
                  RowBox[{"x", " ", 
                    RowBox[{"log", "(", 
                    RowBox[{"log", "(", "x", ")"}], ")"}]}], "\[LongEqual]", 
                  RowBox[{
                    RowBox[{"x", " ", 
                    RowBox[{"log", "(", 
                    RowBox[{
                    RowBox[{"-", "1"}], "+", 
                    RowBox[{"log", "(", "x", ")"}]}], ")"}]}], "-", 
                    RowBox[{"x", " ", 
                    RowBox[{
                    UnderoverscriptBox["\[Sum]", 
                    RowBox[{"k", "=", "1"}], "\[Infinity]"], 
                    FractionBox[
                    RowBox[{
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"-", "1"}], ")"}], "k"], " ", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"-", "1"}], "+", 
                    RowBox[{"log", "(", "x", ")"}]}], ")"}], 
                    RowBox[{"-", "k"}]]}], "k"]}]}]}]}], HoldForm], 
               StyleBox[
                TemplateBox[{"\"  for \"", 
                  TagBox[
                   TemplateBox[{
                    RowBox[{
                    TemplateBox[{
                    RowBox[{
                    RowBox[{"-", "1"}], "+", 
                    RowBox[{"log", "(", "x", ")"}]}]}, "Abs"], ">", "1"}]}, 
                    "RowDefault"], HoldForm]}, "RowDefault"], 
                GrayLevel[0.6], StripOnInput -> False]}, "RowDefault"], 
             FrameStyle -> None, FrameMargins -> {{-1, -1}, {3, 3}}], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "x Log[Log[x]] == (2 I) Pi x Floor[Arg[-\[Xi] + Log[x]]/(2 Pi)] + x \
Log[\[Xi]] - x Sum[((-1)^k (-\[Xi] + Log[x])^k)/(k \[Xi]^k), {k, 1, \
Infinity}] /; \[Xi] < 0"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            FrameBox[
             TemplateBox[{
               TagBox[
                RowBox[{
                  RowBox[{"x", " ", 
                    RowBox[{"log", "(", 
                    RowBox[{"log", "(", "x", ")"}], ")"}]}], "\[LongEqual]", 
                  RowBox[{
                    
                    RowBox[{
                    "2", " ", "\[ImaginaryI]", " ", "\[Pi]", " ", "x", " ", 
                    TemplateBox[{
                    FractionBox[
                    RowBox[{"arg", "(", 
                    RowBox[{
                    RowBox[{"-", "\[Xi]"}], "+", 
                    RowBox[{"log", "(", "x", ")"}]}], ")"}], 
                    RowBox[{"2", " ", "\[Pi]"}]]}, "Floor"]}], "+", 
                    RowBox[{"x", " ", 
                    RowBox[{"log", "(", "\[Xi]", ")"}]}], "-", 
                    RowBox[{"x", " ", 
                    RowBox[{
                    UnderoverscriptBox["\[Sum]", 
                    RowBox[{"k", "=", "1"}], "\[Infinity]"], 
                    FractionBox[
                    RowBox[{
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"-", "1"}], ")"}], "k"], " ", 
                    SuperscriptBox["\[Xi]", 
                    RowBox[{"-", "k"}]], " ", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"-", "\[Xi]"}], "+", 
                    RowBox[{"log", "(", "x", ")"}]}], ")"}], "k"]}], 
                    "k"]}]}]}]}], HoldForm], 
               StyleBox[
                TemplateBox[{"\"  for \"", 
                  TagBox[
                   TemplateBox[{
                    RowBox[{"\[Xi]", "<", "0"}]}, "RowDefault"], HoldForm]}, 
                 "RowDefault"], 
                GrayLevel[0.6], StripOnInput -> False]}, "RowDefault"], 
             FrameStyle -> None, FrameMargins -> {{-1, -1}, {3, 3}}], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["expressiontypes", {"count" -> "3"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "More", "input" -> 
         "SeriesRepresentations:MathematicalFunctionIdentityData__More"}, \
{}]}], 
     XMLElement["infos", {"count" -> "4"}, {
       XMLElement["info", {"text" -> "abs(z) is the absolute value of z"}, {
         XMLElement[
         "link", {
          "url" -> "http://reference.wolfram.com/language/ref/Abs.html", 
           "text" -> "Documentation", "title" -> "Mathematica"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://functions.wolfram.com/ComplexComponents/Abs", 
           "text" -> "Properties", "title" -> "Wolfram Functions Site"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/AbsoluteValue.html", "text" -> 
           "Definition", "title" -> "MathWorld"}, {}]}], 
       XMLElement["info", {"text" -> "arg(z) is the complex argument"}, {
         XMLElement[
         "link", {
          "url" -> "http://reference.wolfram.com/language/ref/Arg.html", 
           "text" -> "Documentation", "title" -> "Mathematica"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://functions.wolfram.com/ComplexComponents/Arg", 
           "text" -> "Properties", "title" -> "Wolfram Functions Site"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/ComplexArgument.html", 
           "text" -> "Definition", "title" -> "MathWorld"}, {}]}], 
       XMLElement["info", {"text" -> "floor(x) is the floor function"}, {
         XMLElement[
         "link", {
          "url" -> "http://reference.wolfram.com/language/ref/Floor.html", 
           "text" -> "Documentation", "title" -> "Mathematica"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://functions.wolfram.com/IntegerFunctions/Floor", 
           "text" -> "Properties", "title" -> "Wolfram Functions Site"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/FloorFunction.html", "text" -> 
           "Definition", "title" -> "MathWorld"}, {}]}], 
       XMLElement["info", {}, {
         XMLElement[
         "link", {
          "url" -> 
           "http://functions.wolfram.com/ElementaryFunctions/Log/06/ShowAll.\
html", "text" -> "More information"}, {}]}]}]}], Typeset`pod12$$ = XMLElement[
   "pod", {"title" -> "Integral representations", "scanner" -> 
     "MathematicalFunctionData", "id" -> 
     "IntegralRepresentations:MathematicalFunctionIdentityData", "position" -> 
     "880", "error" -> "false", "numsubpods" -> "2"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "x Log[Log[x]] == x Integrate[t^(-1), {t, 1, Log[x]}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            FrameBox[
             TagBox[
              RowBox[{
                RowBox[{"x", " ", 
                  RowBox[{"log", "(", 
                    RowBox[{"log", "(", "x", ")"}], ")"}]}], "\[LongEqual]", 
                RowBox[{"x", 
                  RowBox[{
                    SubsuperscriptBox["\[Integral]", "1", 
                    RowBox[{"log", "(", "x", ")"}]], 
                    RowBox[{
                    FractionBox["1", "t"], 
                    RowBox[{"\[DifferentialD]", "t"}]}]}]}]}], HoldForm], 
             FrameStyle -> None, FrameMargins -> {{-1, -1}, {3, 3}}], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "x Log[Log[x]] == (-I/2 x Integrate[(Gamma[-s]^2 Gamma[1 + \
s])/(Gamma[1 - s] (-1 + Log[x])^s), {s, -I Infinity + \[Gamma], I Infinity + \
\[Gamma]}])/Pi /; -1 < \[Gamma] < 0 && Abs[Arg[-1 + Log[x]]] < Pi"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            FrameBox[
             TemplateBox[{
               TagBox[
                RowBox[{
                  RowBox[{"x", " ", 
                    RowBox[{"log", "(", 
                    RowBox[{"log", "(", "x", ")"}], ")"}]}], "\[LongEqual]", 
                  RowBox[{
                    RowBox[{"-", 
                    FractionBox[
                    RowBox[{"\[ImaginaryI]", " ", "x"}], 
                    RowBox[{"2", " ", "\[Pi]"}]]}], 
                    RowBox[{
                    SubsuperscriptBox["\[Integral]", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"-", "\[ImaginaryI]"}], " ", "\[Infinity]"}], "+",
                     "\[Gamma]"}], 
                    RowBox[{
                    RowBox[{"\[ImaginaryI]", " ", "\[Infinity]"}], "+", 
                    "\[Gamma]"}]], 
                    RowBox[{
                    FractionBox[
                    RowBox[{
                    SuperscriptBox[
                    TemplateBox[{
                    RowBox[{"-", "s"}]}, "Gamma"], "2"], " ", 
                    TemplateBox[{
                    RowBox[{"1", "+", "s"}]}, "Gamma"], " ", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"-", "1"}], "+", 
                    RowBox[{"log", "(", "x", ")"}]}], ")"}], 
                    RowBox[{"-", "s"}]]}], 
                    TemplateBox[{
                    RowBox[{"1", "-", "s"}]}, "Gamma"]], 
                    RowBox[{"\[DifferentialD]", "s"}]}]}]}]}], HoldForm], 
               StyleBox[
                TemplateBox[{"\"  for \"", 
                  TagBox[
                   TemplateBox[{
                    RowBox[{"(", "\[NoBreak]", 
                    TemplateBox[{
                    RowBox[{
                    RowBox[{"-", "1"}], "<", "\[Gamma]", "<", "0"}], 
                    StyleBox[
                    "\" and \"", {FontFamily -> "Roboto", FontSize -> Smaller, 
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], 
                    RowBox[{
                    TemplateBox[{
                    RowBox[{"arg", "(", 
                    RowBox[{
                    RowBox[{"-", "1"}], "+", 
                    RowBox[{"log", "(", "x", ")"}]}], ")"}]}, "Abs"], "<", 
                    "\[Pi]"}]}, "RowDefault"], "\[NoBreak]", ")"}]}, 
                    "RowDefault"], HoldForm]}, "RowDefault"], 
                GrayLevel[0.6], StripOnInput -> False]}, "RowDefault"], 
             FrameStyle -> None, FrameMargins -> {{-1, -1}, {3, 3}}], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["expressiontypes", {"count" -> "2"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["infos", {"count" -> "2"}, {
       XMLElement[
       "info", {"text" -> "\[CapitalGamma](x) is the gamma function"}, {
         XMLElement[
         "link", {
          "url" -> "http://reference.wolfram.com/language/ref/Gamma.html", 
           "text" -> "Documentation", "title" -> "Mathematica"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://functions.wolfram.com/GammaBetaErf/Gamma", "text" -> 
           "Properties", "title" -> "Wolfram Functions Site"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/GammaFunction.html", "text" -> 
           "Definition", "title" -> "MathWorld"}, {}]}], 
       XMLElement["info", {}, {
         XMLElement[
         "link", {
          "url" -> 
           "http://functions.wolfram.com/ElementaryFunctions/Log/07/ShowAll.\
html", "text" -> "More information"}, {}]}]}]}], Typeset`pod13$$ = XMLElement[
   "pod", {"title" -> "Differential geometric curves", "scanner" -> "Plotter",
      "id" -> "DifferentialGeometricCurves", "position" -> "900", "error" -> 
     "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              StyleBox[
               
               DynamicModuleBox[{
                CalculateScan`PlotterScanner`Private`ar$$ = 1, 
                 CalculateScan`PlotterScanner`Private`contraPedalCurveColor$$ = 
                 RGBColor[0.7464574, 0.2952580000000001, 0.2454606], 
                 CalculateScan`PlotterScanner`Private`\
contraPedalCurveCountFactor$$ = 0.3, 
                 CalculateScan`PlotterScanner`Private`\
contraPedalCurveLastParamaters$$ = {}, 
                 CalculateScan`PlotterScanner`Private`contraPedalCurveOpacity$\
$ = 0.8, CalculateScan`PlotterScanner`Private`contraPedalCurvePlotCurves$$ = \
{}, CalculateScan`PlotterScanner`Private`contraPedalCurvePoints$$ = "curve", 
                 CalculateScan`PlotterScanner`Private`contraPedalCurveTF$$ = 
                 False, CalculateScan`PlotterScanner`Private`\
contraPedalCurveThickness$$ = -3., 
                 CalculateScan`PlotterScanner`Private`dualCurveColor$$ = 
                 RGBColor[0.2860602, 0.4663408, 0.29410879999999995`], 
                 CalculateScan`PlotterScanner`Private`dualCurveCountFactor$$ = 
                 0.3, CalculateScan`PlotterScanner`Private`\
dualCurveLastParamaters$$ = {}, 
                 CalculateScan`PlotterScanner`Private`dualCurveOpacity$$ = 
                 0.8, CalculateScan`PlotterScanner`Private`\
dualCurvePlotCurves$$ = {}, 
                 CalculateScan`PlotterScanner`Private`dualCurveTF$$ = False, 
                 CalculateScan`PlotterScanner`Private`dualCurveThickness$$ = \
-3., CalculateScan`PlotterScanner`Private`dualPedalCurvePoints$$ = "curve", 
                 CalculateScan`PlotterScanner`Private`evoluteColor$$ = 
                 RGBColor[0.813033, 0.766292, 0.303458], 
                 CalculateScan`PlotterScanner`Private`evoluteOpacity$$ = 0.8, 
                 CalculateScan`PlotterScanner`Private`evoluteTF$$ = False, 
                 CalculateScan`PlotterScanner`Private`evoluteThickness$$ = \
-3., CalculateScan`PlotterScanner`Private`fy1$$ = 0.982793723247329, 
                 CalculateScan`PlotterScanner`Private`fy2$$ = 
                 0.982793723247329, 
                 CalculateScan`PlotterScanner`Private`\
inverseCurveCircleRadiusFactor$$ = 0.4636476090008061, 
                 CalculateScan`PlotterScanner`Private`inverseCurveColor$$ = 
                 RGBColor[0.2860602, 0.4663408, 0.29410879999999995`], 
                 CalculateScan`PlotterScanner`Private`inverseCurveCountFactor$\
$ = 0.3, CalculateScan`PlotterScanner`Private`inverseCurveOpacity$$ = 0.8, 
                 CalculateScan`PlotterScanner`Private`inverseCurvePlotCurves$$\
 = {}, CalculateScan`PlotterScanner`Private`inverseCurvePoints$$ = "grid", 
                 CalculateScan`PlotterScanner`Private`inverseCurveTF$$ = 
                 False, CalculateScan`PlotterScanner`Private`\
inverseCurveThickness$$ = -3., 
                 CalculateScan`PlotterScanner`Private`inverseLastParamaters$$ = \
{}, CalculateScan`PlotterScanner`Private`involuteColor$$ = 
                 RGBColor[0.49978279999999997`, 0.6025278, 0.2508104], 
                 CalculateScan`PlotterScanner`Private`involuteCount$$ = 60, 
                 CalculateScan`PlotterScanner`Private`involuteOpacity$$ = 0.8,
                  CalculateScan`PlotterScanner`Private`involutesLeftTF$$ = 
                 False, CalculateScan`PlotterScanner`Private`involutesRightTF$\
$ = True, CalculateScan`PlotterScanner`Private`involuteTF$$ = False, 
                 CalculateScan`PlotterScanner`Private`involuteThickness$$ = \
-3., CalculateScan`PlotterScanner`Private`isopticCurveAngle$$ = 
                 Rational[1, 3] Pi, 
                 CalculateScan`PlotterScanner`Private`isopticCurveColor$$ = 
                 RGBColor[
                  0.8519382, 0.7451437999999999, 0.31752080000000005`], 
                 CalculateScan`PlotterScanner`Private`isopticCurveOpacity$$ = 
                 0.8, CalculateScan`PlotterScanner`Private`\
isopticCurvePlotCurves$$ = {}, 
                 CalculateScan`PlotterScanner`Private`isopticCurveTF$$ = 
                 False, CalculateScan`PlotterScanner`Private`\
isopticCurveThickness$$ = -3., 
                 CalculateScan`PlotterScanner`Private`isopticLastParamaters$$ = \
{}, CalculateUtilities`GraphicsUtilities`Private`more$$ = False, 
                 CalculateScan`PlotterScanner`Private`negativePedalCurveColor$\
$ = RGBColor[0.7464574, 0.2952580000000001, 0.2454606], 
                 CalculateScan`PlotterScanner`Private`\
negativePedalCurveCountFactor$$ = 0.3, 
                 CalculateScan`PlotterScanner`Private`\
negativePedalCurveLastParamaters$$ = {}, 
                 CalculateScan`PlotterScanner`Private`\
negativePedalCurveOpacity$$ = 0.8, 
                 CalculateScan`PlotterScanner`Private`\
negativePedalCurvePlotCurves$$ = {}, 
                 CalculateScan`PlotterScanner`Private`\
negativePedalCurvePoints$$ = "curve", 
                 CalculateScan`PlotterScanner`Private`negativePedalCurveTF$$ = 
                 False, CalculateScan`PlotterScanner`Private`\
negativePedalCurveThickness$$ = -3., 
                 CalculateScan`PlotterScanner`Private`normalColor$$ = 
                 RGBColor[0.237, 0.34, 0.575], 
                 CalculateScan`PlotterScanner`Private`normalCount$$ = 120, 
                 CalculateScan`PlotterScanner`Private`normalLength$$ = 
                 0.07249114772190139, 
                 CalculateScan`PlotterScanner`Private`normalOpacity$$ = 0.8, 
                 CalculateScan`PlotterScanner`Private`normalTF$$ = True, 
                 CalculateScan`PlotterScanner`Private`normalThickness$$ = -3.,
                  CalculateScan`PlotterScanner`Private`offsetCurveColor$$ = 
                 RGBColor[0.877875, 0.731045, 0.326896], 
                 CalculateScan`PlotterScanner`Private`offsetCurveCount$$ = 12,
                  CalculateScan`PlotterScanner`Private`offsetCurveDistance$$ = 
                 0.07249114772190139, 
                 CalculateScan`PlotterScanner`Private`\
offsetCurveLastParamaters$$ = {}, 
                 CalculateScan`PlotterScanner`Private`offsetCurveOpacity$$ = 
                 0.8, CalculateScan`PlotterScanner`Private`\
offsetCurvePlotCurves$$ = {}, 
                 CalculateScan`PlotterScanner`Private`offsetCurveTF$$ = False,
                  CalculateScan`PlotterScanner`Private`offsetCurveThickness$$ = \
-3., CalculateScan`PlotterScanner`Private`orthotomicCurveAngle$$ = 
                 Rational[1, 3] Pi, 
                 CalculateScan`PlotterScanner`Private`orthotomicCurveColor$$ = 
                 RGBColor[
                  0.8519382, 0.7451437999999999, 0.31752080000000005`], 
                 CalculateScan`PlotterScanner`Private`\
orthotomicCurveCountFactor$$ = 0.3, 
                 CalculateScan`PlotterScanner`Private`orthotomicCurveOpacity$$\
 = 0.8, CalculateScan`PlotterScanner`Private`orthotomicCurvePlotCurves$$ = {},
                  CalculateScan`PlotterScanner`Private`orthotomicCurvePoints$$\
 = "curve", CalculateScan`PlotterScanner`Private`orthotomicCurveTF$$ = False, 
                 CalculateScan`PlotterScanner`Private`\
orthotomicCurveThickness$$ = -3., 
                 CalculateScan`PlotterScanner`Private`\
orthotomicLastParamaters$$ = {}, 
                 CalculateScan`PlotterScanner`Private`osculatingCircleColor$$ = 
                 RGBColor[0.2752426, 0.4446824, 0.33950440000000004`], 
                 CalculateScan`PlotterScanner`Private`osculatingCircleCount$$ = 
                 60, CalculateScan`PlotterScanner`Private`\
osculatingCircleLastParamaters$$ = {}, 
                 CalculateScan`PlotterScanner`Private`osculatingCircleOpacity$\
$ = 0.8, CalculateScan`PlotterScanner`Private`osculatingCircleRadiiTF$$ = 
                 False, CalculateScan`PlotterScanner`Private`\
osculatingCircles$$ = {}, 
                 CalculateScan`PlotterScanner`Private`osculatingCircleTF$$ = 
                 False, CalculateScan`PlotterScanner`Private`\
osculatingCircleThickness$$ = -3., 
                 CalculateScan`PlotterScanner`Private`pedalCurveColor$$ = 
                 RGBColor[0.32894650000000003`, 0.5006225, 0.2625337], 
                 CalculateScan`PlotterScanner`Private`pedalCurveCountFactor$$ = 
                 0.3, CalculateScan`PlotterScanner`Private`\
pedalCurveLastParamaters$$ = {}, 
                 CalculateScan`PlotterScanner`Private`pedalCurveOpacity$$ = 
                 0.8, CalculateScan`PlotterScanner`Private`\
pedalCurvePlotCurves$$ = {}, 
                 CalculateScan`PlotterScanner`Private`pedalCurvePoints$$ = 
                 "curve", CalculateScan`PlotterScanner`Private`pedalCurveTF$$ = 
                 False, CalculateScan`PlotterScanner`Private`\
pedalCurveThickness$$ = -3., CalculateScan`PlotterScanner`Private`sa$$ = 
                 False, CalculateScan`PlotterScanner`Private`sqPRQ$$ = False, 
                 CalculateScan`PlotterScanner`Private`st$$ = False, 
                 CalculateScan`PlotterScanner`Private`symmxQ$$ = False, 
                 CalculateScan`PlotterScanner`Private`symmyQ$$ = True, 
                 CalculateScan`PlotterScanner`Private`tangentColor$$ = 
                 RGBColor[0.237736, 0.340215, 0.575113], 
                 CalculateScan`PlotterScanner`Private`tangentCount$$ = 60, 
                 CalculateScan`PlotterScanner`Private`tangentLength$$ = 
                 0.07249114772190139, 
                 CalculateScan`PlotterScanner`Private`tangentOpacity$$ = 0.8, 
                 CalculateScan`PlotterScanner`Private`tangentTF$$ = False, 
                 CalculateScan`PlotterScanner`Private`tangentThickness$$ = \
-3., CalculateScan`PlotterScanner`Private`taylorParabolaColor$$ = 
                 RGBColor[0.7189495000000001, 0.719797, 0.283877], 
                 CalculateScan`PlotterScanner`Private`taylorParabolaCount$$ = 
                 36, CalculateScan`PlotterScanner`Private`\
taylorParabolaLastParamaters$$ = {}, 
                 CalculateScan`PlotterScanner`Private`taylorParabolaOpacity$$ = 
                 0.8, CalculateScan`PlotterScanner`Private`taylorParabolas$$ = \
{}, CalculateScan`PlotterScanner`Private`taylorParabolaTF$$ = False, 
                 CalculateScan`PlotterScanner`Private`taylorParabolaThickness$\
$ = -3., CalculateScan`PlotterScanner`Private`tiltedOffsetCurveAngle$$ = 
                 Rational[1, 4] Pi, 
                 CalculateScan`PlotterScanner`Private`tiltedOffsetCurveColor$$\
 = RGBColor[0.49978279999999997`, 0.6025278, 0.2508104], 
                 CalculateScan`PlotterScanner`Private`tiltedOffsetCurveCount$$\
 = 12, CalculateScan`PlotterScanner`Private`tiltedOffsetCurveDistance$$ = 
                 0.07249114772190139, 
                 CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveLastParamaters$$ = {}, 
                 CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveOpacity$$ = 0.8, 
                 CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurvePlotCurves$$ = {}, 
                 CalculateScan`PlotterScanner`Private`tiltedOffsetCurveTF$$ = 
                 False, CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveThickness$$ = -3., 
                 CalculateScan`PlotterScanner`Private`tiltedTangentAngle$$ = 
                 Rational[1, 4] Pi, 
                 CalculateScan`PlotterScanner`Private`tiltedTangentColor$$ = 
                 RGBColor[
                  0.2622702, 0.40739780000000003`, 0.41955020000000004`], 
                 CalculateScan`PlotterScanner`Private`tiltedTangentCount$$ = 
                 60, CalculateScan`PlotterScanner`Private`tiltedTangentLength$\
$ = 0.07249114772190139, 
                 CalculateScan`PlotterScanner`Private`tiltedTangentOpacity$$ = 
                 0.8, CalculateScan`PlotterScanner`Private`tiltedTangentTF$$ = 
                 False, CalculateScan`PlotterScanner`Private`\
tiltedTangentThickness$$ = -3., 
                 CalculateScan`PlotterScanner`Private`x1$$ = \
-0.6364908602602672, CalculateScan`PlotterScanner`Private`x2$$ = 
                 0.9002851311895622, Typeset`show$$ = True, 
                 Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu",
                  Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
                 "\"untitled\"", Typeset`specs$$ = {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], {
                    False, True}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`x1$$], \
-0.6364908602602672, 
                    Subscript[
                    Style["x", Italic], "min"]}, -1.5393804002589986`, 
                    1.5393804002589986`}, {{
                    Hold[CalculateScan`PlotterScanner`Private`x2$$], 
                    0.9002851311895622, 
                    Subscript[
                    Style["x", Italic], "max"]}, -1.5393804002589986`, 
                    1.5393804002589986`}, {{
                    Hold[CalculateScan`PlotterScanner`Private`symmxQ$$], 
                    False, "symmetric"}, {True, False}}, {{
                    Hold[CalculateScan`PlotterScanner`Private`fy1$$], 
                    0.982793723247329, 
                    Subscript["y", "min"]}, 0, 1.5393804002589986`}, {{
                    Hold[CalculateScan`PlotterScanner`Private`fy2$$], 
                    0.982793723247329, 
                    Subscript["y", "max"]}, 0, 1.5393804002589986`}, {{
                    Hold[CalculateScan`PlotterScanner`Private`symmyQ$$], True,
                     "symmetric"}, {True, False}}, {{
                    Hold[CalculateScan`PlotterScanner`Private`sqPRQ$$], False, 
                    Dynamic[
                    Style["same as horizontal-range", 
                    If[
                    CalculateScan`PlotterScanner`Private`symmxQ$$, Black, 
                    Gray]]]}, {True, False}}, {{
                    Hold[CalculateScan`PlotterScanner`Private`sa$$], False, 
                    "show axes"}, {True, False}}, {{
                    Hold[CalculateScan`PlotterScanner`Private`st$$], False, 
                    Dynamic[
                    Style["show ticks", 
                    If[
                    CalculateScan`PlotterScanner`Private`sa$$ === True, Black,
                     Gray]]]}, {True, False}}, {{
                    Hold[CalculateScan`PlotterScanner`Private`ar$$], 1, 
                    "aspect ratio"}, 
                    Rational[1, 4], 4}, {{
                    Hold[CalculateScan`PlotterScanner`Private`tangentTF$$], 
                    False, ""}, {True, False}}, {{
                    Hold[CalculateScan`PlotterScanner`Private`tangentCount$$],
                     60, ""}, 2, 360, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`tangentLength$$], 
                    0.07249114772190139, ""}, 0, 1.5393804002589986`}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`tangentThickness$$], \
-3., ""}, -4, -0.5}, {{
                    Hold[CalculateScan`PlotterScanner`Private`tangentColor$$], 
                    RGBColor[0.237736, 0.340215, 0.575113], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`tangentOpacity$$], 
                    0.8, ""}, 0, 1}, {{
                    Hold[CalculateScan`PlotterScanner`Private`normalTF$$], 
                    True, ""}, {True, False}}, {{
                    Hold[CalculateScan`PlotterScanner`Private`normalCount$$], 
                    120, ""}, 2, 360, 1}, {{
                    Hold[CalculateScan`PlotterScanner`Private`normalLength$$],
                     0.07249114772190139, ""}, 0, 1.5393804002589986`}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`normalThickness$$], \
-3., ""}, -4, -0.5}, {{
                    Hold[CalculateScan`PlotterScanner`Private`normalColor$$], 
                    RGBColor[0.237, 0.34, 0.575], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`normalOpacity$$], 
                    0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`tiltedTangentTF$$], 
                    False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`tiltedTangentAngle$$]\
, Rational[1, 4] Pi, ""}, -Pi, Pi}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`tiltedTangentCount$$]\
, 60, ""}, 2, 360, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`tiltedTangentLength$$\
], 0.07249114772190139, ""}, 0, 1.5393804002589986`}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
tiltedTangentThickness$$], -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`tiltedTangentColor$$]\
, 
                    RGBColor[
                    0.2622702, 0.40739780000000003`, 0.41955020000000004`], 
                    ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`tiltedTangentOpacity$\
$], 0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`osculatingCircleTF$$]\
, False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleCount$$], 60, ""}, 2, 360, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleThickness$$], -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleColor$$], 
                    RGBColor[0.2752426, 0.4446824, 0.33950440000000004`], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleOpacity$$], 0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleRadiiTF$$], False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`taylorParabolaTF$$], 
                    False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`taylorParabolaCount$$\
], 36, ""}, 2, 120, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
taylorParabolaThickness$$], -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`taylorParabolaColor$$\
], 
                    RGBColor[0.7189495000000001, 0.719797, 0.283877], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
taylorParabolaOpacity$$], 0.8, ""}, 0, 1}, {{
                    Hold[CalculateScan`PlotterScanner`Private`involuteTF$$], 
                    False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`involuteCount$$], 60,
                     ""}, 1, 120, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`involuteThickness$$],\
 -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`involuteColor$$], 
                    RGBColor[0.49978279999999997`, 0.6025278, 0.2508104], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`involuteOpacity$$], 
                    0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`involutesLeftTF$$], 
                    False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`involutesRightTF$$], 
                    True, ""}, {True, False}}, {{
                    Hold[CalculateScan`PlotterScanner`Private`evoluteTF$$], 
                    False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`evoluteThickness$$], \
-3., ""}, -4, -0.5}, {{
                    Hold[CalculateScan`PlotterScanner`Private`evoluteColor$$], 
                    RGBColor[0.813033, 0.766292, 0.303458], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`evoluteOpacity$$], 
                    0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`offsetCurveTF$$], 
                    False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`offsetCurveDistance$$\
], 0.07249114772190139, ""}, 0, 1.5393804002589986`}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`offsetCurveCount$$], 
                    12, ""}, 1, 60, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`offsetCurveThickness$\
$], -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`offsetCurveColor$$], 
                    RGBColor[0.877875, 0.731045, 0.326896], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`offsetCurveOpacity$$]\
, 0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`tiltedOffsetCurveTF$$\
], False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveAngle$$], Rational[1, 4] Pi, ""}, -Pi, Pi}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveDistance$$], 0.07249114772190139, ""}, 0, 
                    1.5393804002589986`}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveCount$$], 12, ""}, 1, 60, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveThickness$$], -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveColor$$], 
                    RGBColor[0.49978279999999997`, 0.6025278, 0.2508104], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveOpacity$$], 0.8, ""}, 0, 1}, {{
                    Hold[CalculateScan`PlotterScanner`Private`pedalCurveTF$$],
                     False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
pedalCurveCountFactor$$], 0.3, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`pedalCurveThickness$$\
], -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`pedalCurveColor$$], 
                    RGBColor[0.32894650000000003`, 0.5006225, 0.2625337], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`pedalCurveOpacity$$],
                     0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`pedalCurvePoints$$], 
                    "curve", ""}, {"grid", "curve"}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`negativePedalCurveTF$\
$], False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveCountFactor$$], 0.3, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveThickness$$], -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveColor$$], 
                    RGBColor[0.7464574, 0.2952580000000001, 0.2454606], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveOpacity$$], 0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePoints$$], "curve", ""}, {"curve", "grid"}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`contraPedalCurveTF$$]\
, False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveCountFactor$$], 0.3, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveThickness$$], -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveColor$$], 
                    RGBColor[0.7464574, 0.2952580000000001, 0.2454606], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveOpacity$$], 0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurvePoints$$], "curve", ""}, {"curve", "grid"}}, {{
                    Hold[CalculateScan`PlotterScanner`Private`dualCurveTF$$], 
                    False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`dualCurveCountFactor$\
$], 0.3, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`dualCurveThickness$$]\
, -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`dualCurveColor$$], 
                    RGBColor[0.2860602, 0.4663408, 0.29410879999999995`], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`dualCurveOpacity$$], 
                    0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`dualPedalCurvePoints$\
$], "curve", ""}, {"curve", "grid"}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`inverseCurveTF$$], 
                    False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
inverseCurveCountFactor$$], 0.3, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
inverseCurveThickness$$], -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`inverseCurveColor$$], 
                    RGBColor[0.2860602, 0.4663408, 0.29410879999999995`], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`inverseCurveOpacity$$\
], 0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`inverseCurvePoints$$]\
, "grid", ""}, {"curve", "grid"}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
inverseCurveCircleRadiusFactor$$], 0.4636476090008061, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`isopticCurveTF$$], 
                    False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`isopticCurveAngle$$],
                     Rational[1, 3] Pi, ""}, 0, Pi}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
isopticCurveThickness$$], -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`isopticCurveColor$$], 
                    RGBColor[
                    0.8519382, 0.7451437999999999, 0.31752080000000005`], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`isopticCurveOpacity$$\
], 0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`orthotomicCurveTF$$],
                     False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`orthotomicCurveAngle$\
$], Rational[1, 3] Pi, ""}, 0, Pi}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurveCountFactor$$], 0.3, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurveThickness$$], -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`orthotomicCurveColor$\
$], 
                    RGBColor[
                    0.8519382, 0.7451437999999999, 0.31752080000000005`], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurveOpacity$$], 0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurvePoints$$], "curve", ""}, {"curve", "grid"}}, {
                    Hold[
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Row[{
                    Invisible[
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]]], 
                    " ", 
                    Column[{"Horizontal plot range:", 
                    Row[{
                    Manipulate`Place[1], "  ", 
                    Manipulate`Place[2], "  ", 
                    Manipulate`Place[3]}]}]}], 
                    PaneSelector[{True -> Grid[{{
                    Button[
                    Row[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]], 
                    " "}], CalculateUtilities`GraphicsUtilities`Private`more$$\
 = False, Appearance -> None, BaseStyle -> {}], 
                    Button[
                    "Fewer controls", 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    False, Appearance -> None, BaseStyle -> {}]}, {"", 
                    Item[
                    Column[{
                    Column[{"Vertical plot range:", 
                    Row[{
                    Manipulate`Place[4], "  ", 
                    Manipulate`Place[5], "  ", 
                    Manipulate`Place[6]}], 
                    Manipulate`Place[7]}], 
                    Column[{
                    Row[{
                    Manipulate`Place[8], "  ", 
                    Manipulate`Place[9]}], 
                    Row[{
                    Manipulate`Place[10], "   settings: ", 
                    Button[
                    "1", CalculateScan`PlotterScanner`Private`ar$$ = 1, 
                    ImageSize -> Small, Appearance -> "Palette", 
                    BaseStyle -> {}], "  ", 
                    Button["unscaled axes", 
                    (If[
                    1/4 <= # <= 4, 
                    CalculateScan`PlotterScanner`Private`ar$$ = #]& )[Abs[
                    Apply[
                    Subtract, CalculateScan`PlotterScanner`Private`pRY]]/Abs[
                    Apply[
                    Subtract, CalculateScan`PlotterScanner`Private`pRX]]], 
                    ImageSize -> Small, Appearance -> "Palette", 
                    BaseStyle -> {}]}]}], 
                    TabView[{Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`tangentTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`tangentColor$$, 
                    Bold], " "]], 
                    Tooltip[" tangents             ", 
                    Style[" family of tangents at points along the curve ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show tangents", 
                    Manipulate`Place[11]}, {"tangent count", 
                    Manipulate`Place[12]}, {"tangent length", 
                    Manipulate`Place[13]}, {"tangent thickness", 
                    Manipulate`Place[14]}, {"tangent color", 
                    Manipulate`Place[15]}, {"tangent opacity", 
                    Manipulate`Place[16]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`normalTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`normalColor$$, Bold],
                     " "]], 
                    Tooltip[" normals              ", 
                    Style[" family of normals at points along the curve ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show normals", 
                    Manipulate`Place[17]}, {"normal count", 
                    Manipulate`Place[18]}, {"normal length", 
                    Manipulate`Place[19]}, {"normal thickness", 
                    Manipulate`Place[20]}, {"normal color", 
                    Manipulate`Place[21]}, {"normal opacity", 
                    Manipulate`Place[22]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`tiltedTangentTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`tiltedTangentColor$$,
                     Bold], " "]], 
                    Tooltip[" tilted tangents      ", 
                    Style[
                    " family of tilted tangents at points along the curve ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show tilted tangents", 
                    Manipulate`Place[23]}, {"tilted tangent angle", 
                    Manipulate`Place[24]}, {"tilted tangent count", 
                    Manipulate`Place[25]}, {"tilted tangent length", 
                    Manipulate`Place[26]}, {"tilted tangent thickness", 
                    Manipulate`Place[27]}, {"tilted tangent color", 
                    Manipulate`Place[28]}, {"tilted tangent opacity", 
                    Manipulate`Place[29]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`osculatingCircleTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleColor$$, Bold], " "]], 
                    Tooltip[" osculating circles   ", 
                    Style[
                    " family of osculating circles (circles that are tangent \
to the curve) at points along the curve", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> Column[{
                    Grid[{{"show osculating circles", 
                    Manipulate`Place[30]}, {"osculating circle count", 
                    Manipulate`Place[31]}, {"osculating circle thickness", 
                    Manipulate`Place[32]}, {"osculating circle color", 
                    Manipulate`Place[33]}, {"osculating circle opacity", 
                    Manipulate`Place[34]}, {"show circle radii", 
                    Manipulate`Place[35]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    True}}], 
                    Dynamic[
                    Style[
                    If[
                    And[
                    CalculateScan`PlotterScanner`Private`osculatingCircleTF$$, 
                    Not[
                    0.98 < CalculateScan`PlotterScanner`Private`ar$$ < 1.02]],
                     "(note than circles appear as ellipses for unequally\n\
scaled horizontal and vertical axes)", ""]], 
                    RGBColor[
                    0.6666666666666666, 0.6666666666666666, 
                    0.6666666666666666]]}, Alignment -> Left], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`taylorParabolaTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`taylorParabolaColor$$\
, Bold], " "]], 
                    Tooltip[" Taylor parabolas     ", 
                    Style[" family of second order Taylor approximations", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> Column[{
                    Grid[{{"show Taylor parabolas", 
                    Manipulate`Place[36]}, {"Taylor parabola count", 
                    Manipulate`Place[37]}, {"Taylor parabola thickness", 
                    Manipulate`Place[38]}, {"Taylor parabola color", 
                    Manipulate`Place[39]}, {"Taylor parabola opacity", 
                    Manipulate`Place[40]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    True}}]}, Alignment -> Left], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`involuteTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`involuteColor$$, 
                    Bold], " "]], 
                    Tooltip[" involutes            ", 
                    Style[
                    " family of involutes (curves traced out by strings \
unwound from the curve) of the curve", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show involutes", 
                    Manipulate`Place[41]}, {"involute count", 
                    Manipulate`Place[42]}, {"involute thickness", 
                    Manipulate`Place[43]}, {"involute color", 
                    Manipulate`Place[44]}, {"involute opacity", 
                    Manipulate`Place[45]}, {"directions", 
                    Row[{"\[DoubleLongLeftArrow]", 
                    Manipulate`Place[46], "  \[DoubleLongRightArrow]", 
                    Manipulate`Place[47]}]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    True}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`evoluteTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`evoluteColor$$, 
                    Bold], " "]], 
                    Tooltip[" evolute              ", 
                    Style[
                    " the evolute of a given curve (curve of the centers of \
the osculating circles))", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show evolute", 
                    Manipulate`Place[48]}, {"evolute thickness", 
                    Manipulate`Place[49]}, {"evolute color", 
                    Manipulate`Place[50]}, {"evolute opacity", 
                    Manipulate`Place[51]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`offsetCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`offsetCurveColor$$, 
                    Bold], " "]], 
                    Tooltip[" offset curves        ", 
                    Style[
                    " family of offset curves (curves shifted a fixed \
distance perpendicular to each point of the original curve) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show offset curves", 
                    Manipulate`Place[52]}, {"offset curve distance", 
                    Manipulate`Place[53]}, {"offset curve count", 
                    Manipulate`Place[54]}, {"offset curve thickness", 
                    Manipulate`Place[55]}, {"offset curve color", 
                    Manipulate`Place[56]}, {"offset curve opacity", 
                    Manipulate`Place[57]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`tiltedOffsetCurveTF$$\
, 
                    Style["\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveColor$$, Bold], " "]], 
                    Tooltip[" tilted offset curves ", 
                    Style[
                    " family of tilted offset curves (curves shifted a fixed \
distance in a direction with a fixed angle                                    \
   to the local normal to each point of the original curve) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show tilted offset curves", 
                    Manipulate`Place[58]}, {"tilted offset curve angle", 
                    Manipulate`Place[59]}, {"tilted offset curve distance", 
                    Manipulate`Place[60]}, {"tilted offset curve count", 
                    Manipulate`Place[61]}, {"tilted offset curve thickness", 
                    Manipulate`Place[62]}, {"tilted offset curve color", 
                    Manipulate`Place[63]}, {"tilted offset curve opacity", 
                    Manipulate`Place[64]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`pedalCurveTF$$, 
                    Style["\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`pedalCurveColor$$, 
                    Bold], " "]], 
                    Tooltip[" pedal curves         ", 
                    Style[
                    " family of pedal curves (curves on the tangents of the \
given curve perpendicular to a given point) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show pedal curves", 
                    Manipulate`Place[65]}, {"pedal curve count", 
                    Manipulate`Place[66]}, {"pedal curve thickness", 
                    Manipulate`Place[67]}, {"pedal curve color", 
                    Manipulate`Place[68]}, {"pedal curve opacity", 
                    Manipulate`Place[69]}, {"pedal points", 
                    Manipulate`Place[70]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    True}}], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`negativePedalCurveTF$\
$, 
                    Style["\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveColor$$, Bold], " "]], 
                    Tooltip[" negative pedal curves", 
                    Style[
                    " family of negative pedal curves (envelope curves of \
lines perpendicular to the given curve and a given point) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show negative pedal curves", 
                    Manipulate`Place[71]}, {"negative pedal curve count", 
                    Manipulate`Place[72]}, {"negative pedal curve thickness", 
                    Manipulate`Place[73]}, {"negative pedal curve color", 
                    Manipulate`Place[74]}, {"negative pedal curve opacity", 
                    Manipulate`Place[75]}, {"negative pedal points", 
                    Manipulate`Place[76]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`contraPedalCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveColor$$, Bold], " "]], 
                    Tooltip[" contrapedal curves   ", 
                    Style[
                    " family of contrapedal curves (curves on the normals of \
the given curve perpendicular to a given point) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show contrapedal curves", 
                    Manipulate`Place[77]}, {"contrapedal curve count", 
                    Manipulate`Place[78]}, {"contrapedal curve thickness", 
                    Manipulate`Place[79]}, {"contrapedal curve color", 
                    Manipulate`Place[80]}, {"contrapedal curve opacity", 
                    Manipulate`Place[81]}, {"contrapedal pedal points", 
                    Manipulate`Place[82]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`dualCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`dualCurveColor$$, 
                    Bold], " "]], 
                    Tooltip[" dual curves          ", 
                    Style[
                    " dual curve of the given curve (the dual curbe maps \
inflection points to cusps) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show dual curves", 
                    Manipulate`Place[83]}, {"dual curve count", 
                    Manipulate`Place[84]}, {"dual curve thickness", 
                    Manipulate`Place[85]}, {"dual curve color", 
                    Manipulate`Place[86]}, {"dual curve opacity", 
                    Manipulate`Place[87]}, {"dual curve points", 
                    Manipulate`Place[88]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`inverseCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`inverseCurveColor$$, 
                    Bold], " "]], 
                    Tooltip[" inverse curves       ", 
                    Style[
                    " inverse curves (curves resulting from carrying of an \
inversion on circles) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show inverse curves", 
                    Manipulate`Place[89]}, {"inverse curve count", 
                    Manipulate`Place[90]}, {"inverse curve thickness", 
                    Manipulate`Place[91]}, {"inverse curve color", 
                    Manipulate`Place[92]}, {"inverse curve opacity", 
                    Manipulate`Place[93]}, {"inversion curve points", 
                    Manipulate`Place[94]}, {"inversion circle radius", 
                    Manipulate`Place[95]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`isopticCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`isopticCurveColor$$, 
                    Bold], " "]], 
                    Tooltip[" isoptic curves       ", 
                    Style[
                    " inverse curves (points on isoptic curves have two \
tangents with the given curve and the two tangents meet with the specified \
angle)) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> Column[{
                    Grid[{{"show isoptic curves", 
                    Manipulate`Place[96]}, {"isoptic curve angle", 
                    Manipulate`Place[97]}, {"isoptic curve thickness", 
                    Manipulate`Place[98]}, {"isoptic curve color", 
                    Manipulate`Place[99]}, {"isoptic curve opacity", 
                    Manipulate`Place[100]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], 
                    Dynamic[
                    Style[
                    If[
                    TrueQ[
                    And[
                    CalculateScan`PlotterScanner`Private`isopticCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`x1x2SCPCurves === \
{}]], "(note than the set of isoptic curves for a given angle can be empty)", 
                    ""]], 
                    RGBColor[
                    0.6666666666666666, 0.6666666666666666, 
                    0.6666666666666666]]}, Alignment -> Left], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`orthotomicCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`orthotomicCurveColor$\
$, Bold], " "]], 
                    Tooltip[" orthotomic curves    ", 
                    Style[
                    " orthotomic curves (points of reflections of a given \
point on curve tangents)) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show orthotomic curves", 
                    Manipulate`Place[101]}, {"orthotomic curve angle", 
                    Manipulate`Place[102]}, {"orthotomic curve count", 
                    Manipulate`Place[103]}, {"orthotomic curve thickness", 
                    Manipulate`Place[104]}, {"orthotomic curve color", 
                    Manipulate`Place[105]}, {"orthotomic curve opacity", 
                    Manipulate`Place[106]}, {"orthotomic curve points", 
                    Manipulate`Place[107]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}]}, 2, ImageSize -> {All, Automatic}, 
                    ControlPlacement -> Left]}, 
                    Dividers -> {None, {False, True, True, True}}, Spacings -> 
                    1], ItemSize -> Scaled[1], 
                    Frame -> {None, None, True, None}]}}, FrameStyle -> 
                    GrayLevel[0.9], Alignment -> Left, Spacings -> {0, 0.8}], 
                    False -> Button[
                    Row[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]], 
                    " ", "More controls"}], 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    True, Appearance -> None, BaseStyle -> {}]}, 
                    Dynamic[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], 
                    ImageSize -> Automatic]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]], 
                    Manipulate`Dump`ThisIsNotAControl}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleLastParamaters$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`osculatingCircles$$],\
 {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
taylorParabolaLastParamaters$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`taylorParabolas$$], \
{}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
offsetCurveLastParamaters$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
offsetCurvePlotCurves$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveLastParamaters$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurvePlotCurves$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
pedalCurveLastParamaters$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`pedalCurvePlotCurves$\
$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveLastParamaters$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePlotCurves$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveLastParamaters$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurvePlotCurves$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
dualCurveLastParamaters$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`dualCurvePlotCurves$$\
], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
inverseLastParamaters$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
inverseCurvePlotCurves$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
orthotomicLastParamaters$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurvePlotCurves$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
isopticLastParamaters$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
isopticCurvePlotCurves$$], {}}}}, Typeset`size$$ = Automatic, 
                 Typeset`update$$ = 0, Typeset`initDone$$ = False, 
                 Typeset`skipInitDone$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`more$1782875$$ = 
                 False, CalculateScan`PlotterScanner`Private`x1$1782880$$ = 0,
                  CalculateScan`PlotterScanner`Private`x2$1782881$$ = 0, 
                 CalculateScan`PlotterScanner`Private`symmxQ$1782882$$ = 
                 False, CalculateScan`PlotterScanner`Private`fy1$1782883$$ = 
                 0, CalculateScan`PlotterScanner`Private`fy2$1782884$$ = 0, 
                 CalculateScan`PlotterScanner`Private`symmyQ$1782885$$ = 
                 False, CalculateScan`PlotterScanner`Private`sqPRQ$1782886$$ = 
                 False, CalculateScan`PlotterScanner`Private`ar$1782887$$ = 0,
                  CalculateScan`PlotterScanner`Private`tangentCount$1782888$$ = 
                 0, CalculateScan`PlotterScanner`Private`tangentLength$\
1782889$$ = 0, 
                 CalculateScan`PlotterScanner`Private`tangentThickness$\
1782890$$ = 0, CalculateScan`PlotterScanner`Private`tangentOpacity$1782891$$ = 
                 0, CalculateScan`PlotterScanner`Private`normalCount$1782892$$\
 = 0}, 
                DynamicBox[
                 Manipulate`ManipulateBoxes[
                 2, TraditionalForm, 
                  "Variables" :> {
                   CalculateScan`PlotterScanner`Private`ar$$ = 1, 
                    
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveColor$$ = RGBColor[0.7464574, 0.2952580000000001, 0.2454606], 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveCountFactor$$ = 0.3, 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveLastParamaters$$ = {}, 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveOpacity$$ = 0.8, 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurvePlotCurves$$ = {}, 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurvePoints$$ = "curve", 
                    CalculateScan`PlotterScanner`Private`contraPedalCurveTF$$ = 
                    False, CalculateScan`PlotterScanner`Private`\
contraPedalCurveThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`dualCurveColor$$ = 
                    RGBColor[0.2860602, 0.4663408, 0.29410879999999995`], 
                    CalculateScan`PlotterScanner`Private`dualCurveCountFactor$\
$ = 0.3, CalculateScan`PlotterScanner`Private`dualCurveLastParamaters$$ = {}, 
                    CalculateScan`PlotterScanner`Private`dualCurveOpacity$$ = 
                    0.8, CalculateScan`PlotterScanner`Private`\
dualCurvePlotCurves$$ = {}, 
                    CalculateScan`PlotterScanner`Private`dualCurveTF$$ = 
                    False, CalculateScan`PlotterScanner`Private`\
dualCurveThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`dualPedalCurvePoints$\
$ = "curve", CalculateScan`PlotterScanner`Private`evoluteColor$$ = 
                    RGBColor[0.813033, 0.766292, 0.303458], 
                    CalculateScan`PlotterScanner`Private`evoluteOpacity$$ = 
                    0.8, CalculateScan`PlotterScanner`Private`evoluteTF$$ = 
                    False, CalculateScan`PlotterScanner`Private`\
evoluteThickness$$ = -3., CalculateScan`PlotterScanner`Private`fy1$$ = 
                    0.982793723247329, 
                    CalculateScan`PlotterScanner`Private`fy2$$ = 
                    0.982793723247329, 
                    CalculateScan`PlotterScanner`Private`\
inverseCurveCircleRadiusFactor$$ = 0.4636476090008061, 
                    CalculateScan`PlotterScanner`Private`inverseCurveColor$$ = 
                    RGBColor[0.2860602, 0.4663408, 0.29410879999999995`], 
                    CalculateScan`PlotterScanner`Private`\
inverseCurveCountFactor$$ = 0.3, 
                    CalculateScan`PlotterScanner`Private`inverseCurveOpacity$$\
 = 0.8, CalculateScan`PlotterScanner`Private`inverseCurvePlotCurves$$ = {}, 
                    CalculateScan`PlotterScanner`Private`inverseCurvePoints$$ = 
                    "grid", 
                    CalculateScan`PlotterScanner`Private`inverseCurveTF$$ = 
                    False, CalculateScan`PlotterScanner`Private`\
inverseCurveThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`\
inverseLastParamaters$$ = {}, 
                    CalculateScan`PlotterScanner`Private`involuteColor$$ = 
                    RGBColor[0.49978279999999997`, 0.6025278, 0.2508104], 
                    CalculateScan`PlotterScanner`Private`involuteCount$$ = 60,
                     CalculateScan`PlotterScanner`Private`involuteOpacity$$ = 
                    0.8, CalculateScan`PlotterScanner`Private`involutesLeftTF$\
$ = False, CalculateScan`PlotterScanner`Private`involutesRightTF$$ = True, 
                    CalculateScan`PlotterScanner`Private`involuteTF$$ = False,
                     CalculateScan`PlotterScanner`Private`involuteThickness$$ = \
-3., CalculateScan`PlotterScanner`Private`isopticCurveAngle$$ = 
                    Rational[1, 3] Pi, 
                    CalculateScan`PlotterScanner`Private`isopticCurveColor$$ = 
                    RGBColor[
                    0.8519382, 0.7451437999999999, 0.31752080000000005`], 
                    CalculateScan`PlotterScanner`Private`isopticCurveOpacity$$\
 = 0.8, CalculateScan`PlotterScanner`Private`isopticCurvePlotCurves$$ = {}, 
                    CalculateScan`PlotterScanner`Private`isopticCurveTF$$ = 
                    False, CalculateScan`PlotterScanner`Private`\
isopticCurveThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`\
isopticLastParamaters$$ = {}, 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    False, CalculateScan`PlotterScanner`Private`\
negativePedalCurveColor$$ = 
                    RGBColor[0.7464574, 0.2952580000000001, 0.2454606], 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveCountFactor$$ = 0.3, 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveLastParamaters$$ = {}, 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveOpacity$$ = 0.8, 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePlotCurves$$ = {}, 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePoints$$ = "curve", 
                    
                    CalculateScan`PlotterScanner`Private`negativePedalCurveTF$\
$ = False, 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`normalColor$$ = 
                    RGBColor[0.237, 0.34, 0.575], 
                    CalculateScan`PlotterScanner`Private`normalCount$$ = 120, 
                    CalculateScan`PlotterScanner`Private`normalLength$$ = 
                    0.07249114772190139, 
                    CalculateScan`PlotterScanner`Private`normalOpacity$$ = 
                    0.8, CalculateScan`PlotterScanner`Private`normalTF$$ = 
                    True, CalculateScan`PlotterScanner`Private`\
normalThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`offsetCurveColor$$ = 
                    RGBColor[0.877875, 0.731045, 0.326896], 
                    CalculateScan`PlotterScanner`Private`offsetCurveCount$$ = 
                    12, CalculateScan`PlotterScanner`Private`\
offsetCurveDistance$$ = 0.07249114772190139, 
                    CalculateScan`PlotterScanner`Private`\
offsetCurveLastParamaters$$ = {}, 
                    CalculateScan`PlotterScanner`Private`offsetCurveOpacity$$ = 
                    0.8, CalculateScan`PlotterScanner`Private`\
offsetCurvePlotCurves$$ = {}, 
                    CalculateScan`PlotterScanner`Private`offsetCurveTF$$ = 
                    False, CalculateScan`PlotterScanner`Private`\
offsetCurveThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`orthotomicCurveAngle$\
$ = Rational[1, 3] Pi, 
                    CalculateScan`PlotterScanner`Private`orthotomicCurveColor$\
$ = RGBColor[0.8519382, 0.7451437999999999, 0.31752080000000005`], 
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurveCountFactor$$ = 0.3, 
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurveOpacity$$ = 0.8, 
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurvePlotCurves$$ = {}, 
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurvePoints$$ = "curve", 
                    CalculateScan`PlotterScanner`Private`orthotomicCurveTF$$ = 
                    False, CalculateScan`PlotterScanner`Private`\
orthotomicCurveThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`\
orthotomicLastParamaters$$ = {}, 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleColor$$ = 
                    RGBColor[0.2752426, 0.4446824, 0.33950440000000004`], 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleCount$$ = 60, 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleLastParamaters$$ = {}, 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleOpacity$$ = 0.8, 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleRadiiTF$$ = False, 
                    CalculateScan`PlotterScanner`Private`osculatingCircles$$ = \
{}, CalculateScan`PlotterScanner`Private`osculatingCircleTF$$ = False, 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`pedalCurveColor$$ = 
                    RGBColor[0.32894650000000003`, 0.5006225, 0.2625337], 
                    CalculateScan`PlotterScanner`Private`\
pedalCurveCountFactor$$ = 0.3, 
                    CalculateScan`PlotterScanner`Private`\
pedalCurveLastParamaters$$ = {}, 
                    CalculateScan`PlotterScanner`Private`pedalCurveOpacity$$ = 
                    0.8, CalculateScan`PlotterScanner`Private`\
pedalCurvePlotCurves$$ = {}, 
                    CalculateScan`PlotterScanner`Private`pedalCurvePoints$$ = 
                    "curve", 
                    CalculateScan`PlotterScanner`Private`pedalCurveTF$$ = 
                    False, CalculateScan`PlotterScanner`Private`\
pedalCurveThickness$$ = -3., CalculateScan`PlotterScanner`Private`sa$$ = 
                    False, CalculateScan`PlotterScanner`Private`sqPRQ$$ = 
                    False, CalculateScan`PlotterScanner`Private`st$$ = False, 
                    CalculateScan`PlotterScanner`Private`symmxQ$$ = False, 
                    CalculateScan`PlotterScanner`Private`symmyQ$$ = True, 
                    CalculateScan`PlotterScanner`Private`tangentColor$$ = 
                    RGBColor[0.237736, 0.340215, 0.575113], 
                    CalculateScan`PlotterScanner`Private`tangentCount$$ = 60, 
                    CalculateScan`PlotterScanner`Private`tangentLength$$ = 
                    0.07249114772190139, 
                    CalculateScan`PlotterScanner`Private`tangentOpacity$$ = 
                    0.8, CalculateScan`PlotterScanner`Private`tangentTF$$ = 
                    False, CalculateScan`PlotterScanner`Private`\
tangentThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`taylorParabolaColor$$\
 = RGBColor[0.7189495000000001, 0.719797, 0.283877], 
                    CalculateScan`PlotterScanner`Private`taylorParabolaCount$$\
 = 36, CalculateScan`PlotterScanner`Private`taylorParabolaLastParamaters$$ = \
{}, CalculateScan`PlotterScanner`Private`taylorParabolaOpacity$$ = 0.8, 
                    CalculateScan`PlotterScanner`Private`taylorParabolas$$ = \
{}, CalculateScan`PlotterScanner`Private`taylorParabolaTF$$ = False, 
                    CalculateScan`PlotterScanner`Private`\
taylorParabolaThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveAngle$$ = Rational[1, 4] Pi, 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveColor$$ = 
                    RGBColor[0.49978279999999997`, 0.6025278, 0.2508104], 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveCount$$ = 12, 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveDistance$$ = 0.07249114772190139, 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveLastParamaters$$ = {}, 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveOpacity$$ = 0.8, 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurvePlotCurves$$ = {}, 
                    CalculateScan`PlotterScanner`Private`tiltedOffsetCurveTF$$\
 = False, 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`tiltedTangentAngle$$ = 
                    Rational[1, 4] Pi, 
                    CalculateScan`PlotterScanner`Private`tiltedTangentColor$$ = 
                    RGBColor[
                    0.2622702, 0.40739780000000003`, 0.41955020000000004`], 
                    CalculateScan`PlotterScanner`Private`tiltedTangentCount$$ = 
                    60, CalculateScan`PlotterScanner`Private`\
tiltedTangentLength$$ = 0.07249114772190139, 
                    CalculateScan`PlotterScanner`Private`tiltedTangentOpacity$\
$ = 0.8, CalculateScan`PlotterScanner`Private`tiltedTangentTF$$ = False, 
                    CalculateScan`PlotterScanner`Private`\
tiltedTangentThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`x1$$ = \
-0.6364908602602672, CalculateScan`PlotterScanner`Private`x2$$ = 
                    0.9002851311895622}, "ControllerVariables" :> {
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$, 
                    CalculateUtilities`GraphicsUtilities`Private`more$1782875$\
$, False], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`x1$$, 
                    CalculateScan`PlotterScanner`Private`x1$1782880$$, 0], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`x2$$, 
                    CalculateScan`PlotterScanner`Private`x2$1782881$$, 0], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`symmxQ$$, 
                    CalculateScan`PlotterScanner`Private`symmxQ$1782882$$, 
                    False], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`fy1$$, 
                    CalculateScan`PlotterScanner`Private`fy1$1782883$$, 0], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`fy2$$, 
                    CalculateScan`PlotterScanner`Private`fy2$1782884$$, 0], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`symmyQ$$, 
                    CalculateScan`PlotterScanner`Private`symmyQ$1782885$$, 
                    False], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`sqPRQ$$, 
                    CalculateScan`PlotterScanner`Private`sqPRQ$1782886$$, 
                    False], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`ar$$, 
                    CalculateScan`PlotterScanner`Private`ar$1782887$$, 0], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`tangentCount$$, 
                    CalculateScan`PlotterScanner`Private`tangentCount$1782888$\
$, 0], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`tangentLength$$, 
                    CalculateScan`PlotterScanner`Private`tangentLength$\
1782889$$, 0], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`tangentThickness$$, 
                    CalculateScan`PlotterScanner`Private`tangentThickness$\
1782890$$, 0], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`tangentOpacity$$, 
                    CalculateScan`PlotterScanner`Private`tangentOpacity$\
1782891$$, 0], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`normalCount$$, 
                    CalculateScan`PlotterScanner`Private`normalCount$1782892$$\
, 0]}, "OtherVariables" :> {
                   Typeset`show$$, Typeset`bookmarkList$$, 
                    Typeset`bookmarkMode$$, Typeset`animator$$, 
                    Typeset`animvar$$, Typeset`name$$, Typeset`specs$$, 
                    Typeset`size$$, Typeset`update$$, Typeset`initDone$$, 
                    Typeset`skipInitDone$$}, "Body" :> Block[{$CellContext`x}, 
                    Quiet[
                    
                    Module[{
                    CalculateScan`PlotterScanner`Private`x1Old$, 
                    CalculateScan`PlotterScanner`Private`x2Old$, 
                    CalculateScan`PlotterScanner`Private`fy1Old$, 
                    CalculateScan`PlotterScanner`Private`fy2Old$, 
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$, 
                    CalculateScan`PlotterScanner`Private`singularities$, 
                    CalculateScan`PlotterScanner`Private`ts$, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, 
                    CalculateScan`PlotterScanner`Private`yL$, 
                    CalculateScan`PlotterScanner`Private`yU$, 
                    CalculateScan`PlotterScanner`Private`pRX$, 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$, 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]y$, 
                    CalculateScan`PlotterScanner`Private`Y1$, 
                    CalculateScan`PlotterScanner`Private`Y2$, 
                    CalculateScan`PlotterScanner`Private`pRY$, 
                    CalculateScan`PlotterScanner`Private`originalCurvePlot0$, 
                    CalculateScan`PlotterScanner`Private`originalCurvePlot$, 
                    CalculateScan`PlotterScanner`Private`tangentsLines$, 
                    CalculateScan`PlotterScanner`Private`tangentLinePlot$, 
                    CalculateScan`PlotterScanner`Private`normalLines$, 
                    CalculateScan`PlotterScanner`Private`normalLinePlot$, 
                    CalculateScan`PlotterScanner`Private`tiltedTangentLines$, 
                    CalculateScan`PlotterScanner`Private`\
tiltedTangentLinePlot$, 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleRadii$, 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleLastParamaters$, 
                    CalculateScan`PlotterScanner`Private`osculatingCirclePlot$\
, CalculateScan`PlotterScanner`Private`taylorParabolaPlot$, 
                    CalculateScan`PlotterScanner`Private`evolutePlot$, 
                    CalculateScan`PlotterScanner`Private`involutePlotCurves$, 
                    CalculateScan`PlotterScanner`Private`\
involutePlotCurveLastParamaters$, 
                    CalculateScan`PlotterScanner`Private`involutePlot$, 
                    CalculateScan`PlotterScanner`Private`iTab$, 
                    CalculateScan`PlotterScanner`Private`xLi$, 
                    CalculateScan`PlotterScanner`Private`xUi$, 
                    CalculateScan`PlotterScanner`Private`arcLength$, 
                    CalculateScan`PlotterScanner`Private`arcL$, 
                    CalculateScan`PlotterScanner`Private`xi1$, 
                    CalculateScan`PlotterScanner`Private`xi2$, 
                    CalculateScan`PlotterScanner`Private`lineSegments$, 
                    CalculateScan`PlotterScanner`Private`baseSegments$, 
                    CalculateScan`PlotterScanner`Private`oSegments$, 
                    CalculateScan`PlotterScanner`Private`arcFactors$, 
                    CalculateScan`PlotterScanner`Private`iTabRight$, 
                    CalculateScan`PlotterScanner`Private`iTabLeft$, 
                    CalculateScan`PlotterScanner`Private`signedArcFactors$, 
                    CalculateScan`PlotterScanner`Private`curvePoints$}, If[
                    And[
                    CalculateScan`PlotterScanner`Private`sa$$ === False, 
                    CalculateScan`PlotterScanner`Private`st$$ == True], 
                    CalculateScan`PlotterScanner`Private`st$$ = False]; 
                    If[CalculateScan`PlotterScanner`Private`symmxQ$$, 
                    If[
                    And[
                    CalculateScan`PlotterScanner`Private`x1$$ == 
                    CalculateScan`PlotterScanner`Private`x1Old$, 
                    CalculateScan`PlotterScanner`Private`x2$$ != 
                    CalculateScan`PlotterScanner`Private`x2Old$], 
                    CalculateScan`PlotterScanner`Private`x1$$ = -
                    CalculateScan`PlotterScanner`Private`x2$$, 
                    CalculateScan`PlotterScanner`Private`x2$$ = -
                    CalculateScan`PlotterScanner`Private`x1$$]]; 
                    CalculateScan`PlotterScanner`Private`x1Old$ = 
                    CalculateScan`PlotterScanner`Private`x1$$; 
                    CalculateScan`PlotterScanner`Private`x2Old$ = 
                    CalculateScan`PlotterScanner`Private`x2$$; 
                    If[CalculateScan`PlotterScanner`Private`symmyQ$$, 
                    If[
                    And[
                    CalculateScan`PlotterScanner`Private`fy1$$ == 
                    CalculateScan`PlotterScanner`Private`fy1Old$, 
                    CalculateScan`PlotterScanner`Private`fy2$$ != 
                    CalculateScan`PlotterScanner`Private`fy2Old$], 
                    CalculateScan`PlotterScanner`Private`fy1$$ = 
                    CalculateScan`PlotterScanner`Private`fy2$$, 
                    CalculateScan`PlotterScanner`Private`fy2$$ = 
                    CalculateScan`PlotterScanner`Private`fy1$$]]; 
                    CalculateScan`PlotterScanner`Private`fy1Old$ = 
                    CalculateScan`PlotterScanner`Private`fy1$$; 
                    CalculateScan`PlotterScanner`Private`fy2Old$ = 
                    CalculateScan`PlotterScanner`Private`fy2$$; 
                    If[CalculateScan`PlotterScanner`Private`x1$$ == 
                    CalculateScan`PlotterScanner`Private`x2$$, 
                    CalculateScan`PlotterScanner`Private`x2$$ = 
                    CalculateScan`PlotterScanner`Private`x1$$ + 
                    27.541231223529905`/100]; {
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$} = Sort[
                    N[{
                    
                    Function[{
                    CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, 
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`x1$$, 
                    13.770615611764953`], 
                    
                    Function[{
                    CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, 
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`x2$$, 
                    13.770615611764953`]}]]; 
                    CalculateScan`PlotterScanner`Private`singularities$ = (
                    CalculateScan`PlotterScanner`Private`ts$ = 
                    TimeConstrained[
                    CalculateScan`PlotterScanner`Private`red = Reduce[
                    And[1/($CellContext`x Log[
                    Log[$CellContext`x]]) == 0, 
                    CalculateScan`PlotterScanner`Private`X1$ < $CellContext`x < 
                    CalculateScan`PlotterScanner`Private`X2$], $CellContext`x,
                     Reals], 0.2, False]; 
                    If[CalculateScan`PlotterScanner`Private`ts$ === False, {}, 
                    Cases[
                    ReplaceAll[$CellContext`x, {
                    ToRules[CalculateScan`PlotterScanner`Private`ts$]}], 
                    Blank[Real]]]); 
                    CalculateScan`PlotterScanner`Private`originalCurvePlot0$ = 
                    Plot[
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {}, {0, 0, 3, 0, 
                    0}, {{40, 34, 3, 0, 0, 3, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 
                    2}, {16, 0, 2, 1}, {1}}, 
                    Function[{$CellContext`x}, $CellContext`x Log[
                    Log[$CellContext`x]]], 
                    Evaluate][$CellContext`x], {$CellContext`x, 
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, PlotStyle -> 
                    Directive[Black, Thick], Evaluated -> False, Exclusions -> 
                    CalculateScan`PlotterScanner`Private`singularities$]; {{
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$}, {
                    CalculateScan`PlotterScanner`Private`yL$, 
                    CalculateScan`PlotterScanner`Private`yU$}} = Lookup[
                    AbsoluteOptions[
                    CalculateScan`PlotterScanner`Private`originalCurvePlot0$, 
                    PlotRange], PlotRange]; 
                    CalculateScan`PlotterScanner`Private`pRX$ = {
                    Min[
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$], 
                    Max[
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$]}; 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$ = 
                    Abs[CalculateScan`PlotterScanner`Private`X2$ - 
                    CalculateScan`PlotterScanner`Private`X1$]; 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]y$ = 
                    CalculateScan`PlotterScanner`Private`yU$ - 
                    CalculateScan`PlotterScanner`Private`yL$; If[
                    And[
                    CalculateScan`PlotterScanner`Private`sqPRQ$$, 
                    CalculateScan`PlotterScanner`Private`symmyQ$$, 
                    Sign[CalculateScan`PlotterScanner`Private`X1$] === -
                    Sign[CalculateScan`PlotterScanner`Private`X2$], 
                    Abs[1 - CalculateScan`PlotterScanner`Private`fy1$$/
                    CalculateScan`PlotterScanner`Private`fy2$$] < 10^(-3)], 
                    CalculateScan`PlotterScanner`Private`fy1$$ = 
                    ArcTan[((-100) CalculateScan`PlotterScanner`Private`xL$ - 
                    100 CalculateScan`PlotterScanner`Private`yL$ + 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]y$)/(
                    100 CalculateScan`PlotterScanner`Private`\[CapitalDelta]y$\
)]; CalculateScan`PlotterScanner`Private`fy2$$ = 
                    CalculateScan`PlotterScanner`Private`fy1$$; Null]; {
                    CalculateScan`PlotterScanner`Private`Y1$, 
                    CalculateScan`PlotterScanner`Private`Y2$} = {
                    CalculateScan`PlotterScanner`Private`yL$ - 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]y$/
                    100 - Function[{
                    CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, 
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`fy1$$, 1] 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]y$, 
                    CalculateScan`PlotterScanner`Private`yU$ + 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]y$/
                    100 + Function[{
                    CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, 
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`fy2$$, 1] 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]y$}; 
                    CalculateScan`PlotterScanner`Private`pRY$ = {
                    CalculateScan`PlotterScanner`Private`Y1$, 
                    CalculateScan`PlotterScanner`Private`Y2$}; 
                    CalculateScan`PlotterScanner`Private`originalCurvePlot$ = 
                    Plot[
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {}, {0, 0, 3, 0, 
                    0}, {{40, 34, 3, 0, 0, 3, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 
                    2}, {16, 0, 2, 1}, {1}}, 
                    Function[{$CellContext`x}, $CellContext`x Log[
                    Log[$CellContext`x]]], 
                    Evaluate][$CellContext`x], {$CellContext`x, 
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, PlotStyle -> 
                    Directive[Black, Thick], PlotRange -> 
                    CalculateScan`PlotterScanner`Private`pRY$, Evaluated -> 
                    False, Exclusions -> 
                    CalculateScan`PlotterScanner`Private`singularities$]; 
                    CalculateScan`PlotterScanner`Private`tangentsLines$ = 
                    If[CalculateScan`PlotterScanner`Private`tangentTF$$, 
                    CalculateScan`PlotterScanner`Private`addTangents[{
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {}, {0, 0, 3, 0, 
                    0}, {{40, 34, 3, 0, 0, 3, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 
                    2}, {16, 0, 2, 1}, {1}}, 
                    Function[{$CellContext`x}, $CellContext`x Log[
                    Log[$CellContext`x]]], Evaluate], 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 2}}, {}, {0, 0, 4, 0, 
                    0}, {{40, 34, 3, 0, 0, 3, 0, 1}, {40, 60, 3, 0, 1, 3, 0, 
                    2}, {40, 34, 3, 0, 1, 3, 0, 3}, {13, 2, 3, 2}, {1}}, 
                    Function[{$CellContext`x}, 
                    
                    Block[{Compile`$4925}, 
                    Compile`$4925 = Log[$CellContext`x]; 
                    Compile`$4925^(-1) + Log[Compile`$4925]]], 
                    Evaluate]}, {$CellContext`x, 
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`tangentCount$$, 
                    "LengthFactor" -> 
                    Function[{
                    CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, 
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`tangentLength$$, 
                    13.770615611764953`]], {}]; 
                    CalculateScan`PlotterScanner`Private`tangentLinePlot$ = 
                    Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`tangentColor$$, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`tangentOpacity$$], 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`tangentThickness$$\
]], CalculateScan`PlotterScanner`Private`tangentsLines$}]; 
                    CalculateScan`PlotterScanner`Private`normalLines$ = 
                    If[CalculateScan`PlotterScanner`Private`normalTF$$, 
                    CalculateScan`PlotterScanner`Private`addTangents[{
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {}, {0, 0, 3, 0, 
                    0}, {{40, 34, 3, 0, 0, 3, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 
                    2}, {16, 0, 2, 1}, {1}}, 
                    Function[{$CellContext`x}, $CellContext`x Log[
                    Log[$CellContext`x]]], Evaluate], 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 2}}, {}, {0, 0, 4, 0, 
                    0}, {{40, 34, 3, 0, 0, 3, 0, 1}, {40, 60, 3, 0, 1, 3, 0, 
                    2}, {40, 34, 3, 0, 1, 3, 0, 3}, {13, 2, 3, 2}, {1}}, 
                    Function[{$CellContext`x}, 
                    
                    Block[{Compile`$4925}, 
                    Compile`$4925 = Log[$CellContext`x]; 
                    Compile`$4925^(-1) + Log[Compile`$4925]]], 
                    Evaluate]}, {$CellContext`x, 
                    Min[
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$], 
                    Max[
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$]}, 
                    CalculateScan`PlotterScanner`Private`normalCount$$, 
                    "LengthFactor" -> 
                    Function[{
                    CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, 
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`normalLength$$, 
                    13.770615611764953`], "TiltAngle" -> Pi/2], {}]; 
                    CalculateScan`PlotterScanner`Private`normalLinePlot$ = 
                    Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`normalColor$$, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`normalOpacity$$], 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`normalThickness$$]\
], CalculateScan`PlotterScanner`Private`normalLines$}]; 
                    CalculateScan`PlotterScanner`Private`tiltedTangentLines$ = 
                    If[CalculateScan`PlotterScanner`Private`tiltedTangentTF$$, 
                    CalculateScan`PlotterScanner`Private`addTangents[{
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {}, {0, 0, 3, 0, 
                    0}, {{40, 34, 3, 0, 0, 3, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 
                    2}, {16, 0, 2, 1}, {1}}, 
                    Function[{$CellContext`x}, $CellContext`x Log[
                    Log[$CellContext`x]]], Evaluate], 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 2}}, {}, {0, 0, 4, 0, 
                    0}, {{40, 34, 3, 0, 0, 3, 0, 1}, {40, 60, 3, 0, 1, 3, 0, 
                    2}, {40, 34, 3, 0, 1, 3, 0, 3}, {13, 2, 3, 2}, {1}}, 
                    Function[{$CellContext`x}, 
                    
                    Block[{Compile`$4925}, 
                    Compile`$4925 = Log[$CellContext`x]; 
                    Compile`$4925^(-1) + Log[Compile`$4925]]], 
                    Evaluate]}, {$CellContext`x, 
                    Min[
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$], 
                    Max[
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$]}, 
                    CalculateScan`PlotterScanner`Private`tiltedTangentCount$$,
                     "LengthFactor" -> 
                    Function[{
                    CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, 
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`tiltedTangentLength$$\
, 13.770615611764953`], "TiltAngle" -> 
                    CalculateScan`PlotterScanner`Private`tiltedTangentAngle$$]\
, {}]; CalculateScan`PlotterScanner`Private`tiltedTangentLinePlot$ = Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`tiltedTangentColor$$, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`tiltedTangentOpacity$\
$], 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
tiltedTangentThickness$$]], 
                    CalculateScan`PlotterScanner`Private`tiltedTangentLines$}]\
; If[
                    And[
                    CalculateScan`PlotterScanner`Private`osculatingCircleTF$$,
                     CalculateScan`PlotterScanner`Private`\
osculatingCircleLastParamaters$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleCount$$}], 
                    CalculateScan`PlotterScanner`Private`osculatingCircles$$ = 
                    If[CalculateScan`PlotterScanner`Private`\
osculatingCircleTF$$, 
                    CalculateScan`PlotterScanner`Private`addOsculatingCircles[{
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {}, {0, 0, 3, 0, 
                    0}, {{40, 34, 3, 0, 0, 3, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 
                    2}, {16, 0, 2, 1}, {1}}, 
                    Function[{$CellContext`x}, $CellContext`x Log[
                    Log[$CellContext`x]]], Evaluate], 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 2}}, {}, {0, 0, 4, 0, 
                    0}, {{40, 34, 3, 0, 0, 3, 0, 1}, {40, 60, 3, 0, 1, 3, 0, 
                    2}, {40, 34, 3, 0, 1, 3, 0, 3}, {13, 2, 3, 2}, {1}}, 
                    Function[{$CellContext`x}, 
                    
                    Block[{Compile`$4925}, 
                    Compile`$4925 = Log[$CellContext`x]; 
                    Compile`$4925^(-1) + Log[Compile`$4925]]], Evaluate], 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 4}}, {}, {0, 0, 6, 0, 
                    0}, {{40, 60, 3, 0, 0, 3, 0, 1}, {40, 34, 3, 0, 0, 3, 0, 
                    2}, {40, 56, 3, 0, 2, 3, 0, 3}, {40, 60, 3, 0, 3, 3, 0, 
                    4}, {16, 1, 4, 3}, {19, 3, 4}, {40, 60, 3, 0, 2, 3, 0, 
                    3}, {16, 1, 3, 5}, {13, 4, 5, 4}, {1}}, 
                    Function[{$CellContext`x}, 
                    
                    Block[{Compile`$4929, Compile`$4969}, 
                    Compile`$4929 = $CellContext`x^(-1); 
                    Compile`$4969 = 
                    Log[$CellContext`x]; -Compile`$4929 Compile`$4969^(-2) + 
                    Compile`$4929/Compile`$4969]], 
                    Evaluate]}, {$CellContext`x, 
                    Min[
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$], 
                    Max[
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$]}, 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleCount$$], {}]; 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleRadii$ = If[
                    And[
                    CalculateScan`PlotterScanner`Private`osculatingCircleTF$$,
                     CalculateScan`PlotterScanner`Private`\
osculatingCircleRadiiTF$$], 
                    
                    CalculateScan`PlotterScanner`Private`\
addOsculatingCircleRadii[{
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {}, {0, 0, 3, 0, 
                    0}, {{40, 34, 3, 0, 0, 3, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 
                    2}, {16, 0, 2, 1}, {1}}, 
                    Function[{$CellContext`x}, $CellContext`x Log[
                    Log[$CellContext`x]]], Evaluate], 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 2}}, {}, {0, 0, 4, 0, 
                    0}, {{40, 34, 3, 0, 0, 3, 0, 1}, {40, 60, 3, 0, 1, 3, 0, 
                    2}, {40, 34, 3, 0, 1, 3, 0, 3}, {13, 2, 3, 2}, {1}}, 
                    Function[{$CellContext`x}, 
                    
                    Block[{Compile`$4925}, 
                    Compile`$4925 = Log[$CellContext`x]; 
                    Compile`$4925^(-1) + Log[Compile`$4925]]], Evaluate], 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 4}}, {}, {0, 0, 6, 0, 
                    0}, {{40, 60, 3, 0, 0, 3, 0, 1}, {40, 34, 3, 0, 0, 3, 0, 
                    2}, {40, 56, 3, 0, 2, 3, 0, 3}, {40, 60, 3, 0, 3, 3, 0, 
                    4}, {16, 1, 4, 3}, {19, 3, 4}, {40, 60, 3, 0, 2, 3, 0, 
                    3}, {16, 1, 3, 5}, {13, 4, 5, 4}, {1}}, 
                    Function[{$CellContext`x}, 
                    
                    Block[{Compile`$4929, Compile`$4969}, 
                    Compile`$4929 = $CellContext`x^(-1); 
                    Compile`$4969 = 
                    Log[$CellContext`x]; -Compile`$4929 Compile`$4969^(-2) + 
                    Compile`$4929/Compile`$4969]], 
                    Evaluate]}, {$CellContext`x, 
                    Min[
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$], 
                    Max[
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$]}, 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleCount$$], {}]; 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleLastParamaters$ = {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleCount$$}]; 
                    CalculateScan`PlotterScanner`Private`osculatingCirclePlot$\
 = Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleColor$$, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleOpacity$$], 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
osculatingCircleThickness$$]], 
                    If[
                    CalculateScan`PlotterScanner`Private`osculatingCircleTF$$,
                     CalculateScan`PlotterScanner`Private`osculatingCircles$$,\
 {}], 
                    If[
                    And[
                    CalculateScan`PlotterScanner`Private`osculatingCircleTF$$,
                     CalculateScan`PlotterScanner`Private`\
osculatingCircleRadiiTF$$], 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleRadii$, {}]}]; If[
                    And[
                    CalculateScan`PlotterScanner`Private`taylorParabolaTF$$, 
                    CalculateScan`PlotterScanner`Private`\
taylorParabolaLastParamaters$$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`taylorParabolaCount$$\
}], CalculateScan`PlotterScanner`Private`taylorParabolas$$ = 
                    If[CalculateScan`PlotterScanner`Private`taylorParabolaTF$$\
, 
                    CalculateScan`PlotterScanner`Private`addTaylorParabolas[{
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {}, {0, 0, 3, 0, 
                    0}, {{40, 34, 3, 0, 0, 3, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 
                    2}, {16, 0, 2, 1}, {1}}, 
                    Function[{$CellContext`x}, $CellContext`x Log[
                    Log[$CellContext`x]]], Evaluate], 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 2}}, {}, {0, 0, 4, 0, 
                    0}, {{40, 34, 3, 0, 0, 3, 0, 1}, {40, 60, 3, 0, 1, 3, 0, 
                    2}, {40, 34, 3, 0, 1, 3, 0, 3}, {13, 2, 3, 2}, {1}}, 
                    Function[{$CellContext`x}, 
                    
                    Block[{Compile`$4925}, 
                    Compile`$4925 = Log[$CellContext`x]; 
                    Compile`$4925^(-1) + Log[Compile`$4925]]], Evaluate], 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 4}}, {}, {0, 0, 6, 0, 
                    0}, {{40, 60, 3, 0, 0, 3, 0, 1}, {40, 34, 3, 0, 0, 3, 0, 
                    2}, {40, 56, 3, 0, 2, 3, 0, 3}, {40, 60, 3, 0, 3, 3, 0, 
                    4}, {16, 1, 4, 3}, {19, 3, 4}, {40, 60, 3, 0, 2, 3, 0, 
                    3}, {16, 1, 3, 5}, {13, 4, 5, 4}, {1}}, 
                    Function[{$CellContext`x}, 
                    
                    Block[{Compile`$4929, Compile`$4969}, 
                    Compile`$4929 = $CellContext`x^(-1); 
                    Compile`$4969 = 
                    Log[$CellContext`x]; -Compile`$4929 Compile`$4969^(-2) + 
                    Compile`$4929/Compile`$4969]], 
                    Evaluate]}, {$CellContext`x, 
                    Min[
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$], 
                    Max[
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$]}, 
                    CalculateScan`PlotterScanner`Private`taylorParabolaCount$$\
], {}]; CalculateScan`PlotterScanner`Private`taylorParabolaLastParamaters$$ = \
{{CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    
                    CalculateScan`PlotterScanner`Private`taylorParabolaCount$$\
}]; CalculateScan`PlotterScanner`Private`taylorParabolaPlot$ = Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`taylorParabolaColor$$\
, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`\
taylorParabolaOpacity$$], 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
taylorParabolaThickness$$]], 
                    If[
                    CalculateScan`PlotterScanner`Private`taylorParabolaTF$$, 
                    CalculateScan`PlotterScanner`Private`taylorParabolas$$, \
{}]}]; CalculateScan`PlotterScanner`Private`evolutePlot$ = 
                    If[CalculateScan`PlotterScanner`Private`evoluteTF$$, 
                    ParametricPlot[{$CellContext`x, 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {}, {0, 0, 3, 0, 
                    0}, {{40, 34, 3, 0, 0, 3, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 
                    2}, {16, 0, 2, 1}, {1}}, 
                    Function[{$CellContext`x}, $CellContext`x Log[
                    Log[$CellContext`x]]], Evaluate][$CellContext`x]} + {-
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 2}}, {}, {0, 0, 4, 0, 
                    0}, {{40, 34, 3, 0, 0, 3, 0, 1}, {40, 60, 3, 0, 1, 3, 0, 
                    2}, {40, 34, 3, 0, 1, 3, 0, 3}, {13, 2, 3, 2}, {1}}, 
                    Function[{$CellContext`x}, 
                    
                    Block[{Compile`$4925}, 
                    Compile`$4925 = Log[$CellContext`x]; 
                    Compile`$4925^(-1) + Log[Compile`$4925]]], 
                    Evaluate][$CellContext`x], 1} (1 + 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 2}}, {}, {0, 0, 4, 0, 
                    0}, {{40, 34, 3, 0, 0, 3, 0, 1}, {40, 60, 3, 0, 1, 3, 0, 
                    2}, {40, 34, 3, 0, 1, 3, 0, 3}, {13, 2, 3, 2}, {1}}, 
                    Function[{$CellContext`x}, 
                    
                    Block[{Compile`$4925}, 
                    Compile`$4925 = Log[$CellContext`x]; 
                    Compile`$4925^(-1) + Log[Compile`$4925]]], 
                    Evaluate][$CellContext`x]^2)/
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 4}}, {}, {0, 0, 6, 0, 
                    0}, {{40, 60, 3, 0, 0, 3, 0, 1}, {40, 34, 3, 0, 0, 3, 0, 
                    2}, {40, 56, 3, 0, 2, 3, 0, 3}, {40, 60, 3, 0, 3, 3, 0, 
                    4}, {16, 1, 4, 3}, {19, 3, 4}, {40, 60, 3, 0, 2, 3, 0, 
                    3}, {16, 1, 3, 5}, {13, 4, 5, 4}, {1}}, 
                    Function[{$CellContext`x}, 
                    
                    Block[{Compile`$4929, Compile`$4969}, 
                    Compile`$4929 = $CellContext`x^(-1); 
                    Compile`$4969 = 
                    Log[$CellContext`x]; -Compile`$4929 Compile`$4969^(-2) + 
                    Compile`$4929/Compile`$4969]], 
                    Evaluate][$CellContext`x], {$CellContext`x, 
                    Min[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] - 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2, 
                    Max[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] + 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2},
                     PlotStyle -> Directive[
                    Opacity[
                    CalculateScan`PlotterScanner`Private`evoluteOpacity$$], 
                    CalculateScan`PlotterScanner`Private`evoluteColor$$, 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`evoluteThickness$$\
]], PlotRange -> CalculateScan`PlotterScanner`Private`pRY$, Evaluated -> 
                    False, Exclusions -> {
                    CalculateScan`PlotterScanner`Private`functionD[$\
CellContext`x] == 0}], {}]; If[
                    And[
                    CalculateScan`PlotterScanner`Private`involuteTF$$, 
                    CalculateScan`PlotterScanner`Private`\
involutePlotCurveLastParamaters$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`involuteCount$$}], 
                    CalculateScan`PlotterScanner`Private`involutePlotCurves$ = 
                    If[CalculateScan`PlotterScanner`Private`involuteTF$$, 
                    CalculateScan`PlotterScanner`Private`singularities$ = 
                    TimeConstrained[
                    Reduce[1/($CellContext`x Log[
                    Log[$CellContext`x]]) == 0, $CellContext`x, Reals], 1, 
                    False]; 
                    CalculateScan`PlotterScanner`Private`domainsAndCounts = If[
                    Or[
                    CalculateScan`PlotterScanner`Private`singularities$ === 
                    False, Head[
                    CalculateScan`PlotterScanner`Private`singularities$] === 
                    Reduce], {{{
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$}, 
                    CalculateScan`PlotterScanner`Private`involuteCount$$}}, 
                    CalculateScan`PlotterScanner`Private`singularityPoints = 
                    Cases[
                    Chop[
                    N[
                    ReplaceAll[$CellContext`x, {
                    ToRules[
                    CalculateScan`PlotterScanner`Private`singularities$]}]]], 
                    Blank[Real]]; 
                    CalculateScan`PlotterScanner`Private`\
singularityPointsRelevant = Sort[
                    Select[
                    CalculateScan`PlotterScanner`Private`singularityPoints, 
                    CalculateScan`PlotterScanner`Private`xL$ < # < 
                    CalculateScan`PlotterScanner`Private`xU$& ], Less]; 
                    CalculateScan`PlotterScanner`Private`pureDomains = 
                    Partition[{CalculateScan`PlotterScanner`Private`xL$, 
                    Apply[
                    Sequence, 
                    CalculateScan`PlotterScanner`Private`\
singularityPointsRelevant], CalculateScan`PlotterScanner`Private`xU$}, 2, 1]; 
                    Table[CalculateScan`PlotterScanner`Private`iLength = Abs[
                    Apply[Subtract, 
                    Part[
                    CalculateScan`PlotterScanner`Private`pureDomains, 
                    CalculateScan`PlotterScanner`Private`i]]]; 
                    CalculateScan`PlotterScanner`Private`involuteCounti = 
                    Ceiling[CalculateScan`PlotterScanner`Private`iLength (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)^(-1) 
                    CalculateScan`PlotterScanner`Private`involuteCount$$]; 
                    CalculateScan`PlotterScanner`Private`iScale = 
                    CalculateScan`PlotterScanner`Private`iLength/
                    CalculateScan`PlotterScanner`Private`involuteCounti; {{
                    Part[CalculateScan`PlotterScanner`Private`pureDomains, 
                    CalculateScan`PlotterScanner`Private`i, 1] + 
                    CalculateScan`PlotterScanner`Private`iScale/4, 
                    Part[CalculateScan`PlotterScanner`Private`pureDomains, 
                    CalculateScan`PlotterScanner`Private`i, 2] - 
                    CalculateScan`PlotterScanner`Private`iScale/4}, 
                    CalculateScan`PlotterScanner`Private`involuteCounti}, {
                    CalculateScan`PlotterScanner`Private`i, 
                    Length[
                    CalculateScan`PlotterScanner`Private`pureDomains]}]]; 
                    CalculateScan`PlotterScanner`Private`iTab$ = Transpose[
                    
                    Table[{{CalculateScan`PlotterScanner`Private`xLi$, 
                    CalculateScan`PlotterScanner`Private`xUi$}, 
                    CalculateScan`PlotterScanner`Private`involuteCounti} = 
                    Part[CalculateScan`PlotterScanner`Private`\
domainsAndCounts, CalculateScan`PlotterScanner`Private`i]; 
                    CalculateScan`PlotterScanner`Private`arcLength$ = Part[
                    
                    NDSolve[{Derivative[1][
                    CalculateScan`PlotterScanner`Private`arcL$][$CellContext`\
x] == Sqrt[1 + D[$CellContext`x Log[
                    Log[$CellContext`x]], $CellContext`x]^2], 
                    CalculateScan`PlotterScanner`Private`arcL$[
                    CalculateScan`PlotterScanner`Private`xLi$] == 0}, 
                    CalculateScan`PlotterScanner`Private`arcL$, \
{$CellContext`x, CalculateScan`PlotterScanner`Private`xLi$, 
                    CalculateScan`PlotterScanner`Private`xUi$}], 1, 1, 2]; {
                    CalculateScan`PlotterScanner`Private`xi1$, 
                    CalculateScan`PlotterScanner`Private`xi2$} = 
                    Part[CalculateScan`PlotterScanner`Private`arcLength$, 1, 
                    1]; CalculateScan`PlotterScanner`Private`oCurve = 
                    ParametricPlot3D[
                    Prepend[
                    Normalize[{1, 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 2}}, {}, {0, 0, 4, 0, 
                    0}, {{40, 34, 3, 0, 0, 3, 0, 1}, {40, 60, 3, 0, 1, 3, 0, 
                    2}, {40, 34, 3, 0, 1, 3, 0, 3}, {13, 2, 3, 2}, {1}}, 
                    Function[{$CellContext`x}, 
                    
                    Block[{Compile`$4925}, 
                    Compile`$4925 = Log[$CellContext`x]; 
                    Compile`$4925^(-1) + Log[Compile`$4925]]], 
                    Evaluate][$CellContext`x]}], $CellContext`x], \
{$CellContext`x, CalculateScan`PlotterScanner`Private`xLi$, 
                    CalculateScan`PlotterScanner`Private`xUi$}, PlotRange -> 
                    All, Evaluated -> False, MaxRecursion -> 4]; 
                    CalculateScan`PlotterScanner`Private`lineSegments$ = 
                    Select[
                    Map[First, 
                    Cases[
                    Normal[CalculateScan`PlotterScanner`Private`oCurve], 
                    Blank[Line], Infinity]], Length[#] > 3& ]; 
                    CalculateScan`PlotterScanner`Private`baseSegments$ = Map[{
                    Part[#, 1], 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {}, {0, 0, 3, 0, 
                    0}, {{40, 34, 3, 0, 0, 3, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 
                    2}, {16, 0, 2, 1}, {1}}, 
                    Function[{$CellContext`x}, $CellContext`x Log[
                    Log[$CellContext`x]]], Evaluate][
                    Part[#, 1]]}& , 
                    CalculateScan`PlotterScanner`Private`lineSegments$, {-2}]; 
                    CalculateScan`PlotterScanner`Private`oSegments$ = 
                    Map[Rest, 
                    CalculateScan`PlotterScanner`Private`lineSegments$, {-2}]; 
                    CalculateScan`PlotterScanner`Private`arcFactors$ = 
                    Map[CalculateScan`PlotterScanner`Private`arcLength$[
                    Part[#, 1]]& , 
                    CalculateScan`PlotterScanner`Private`lineSegments$, {-2}]; 
                    CalculateScan`PlotterScanner`Private`iTabRight$ = If[True, 
                    Table[
                    CalculateScan`PlotterScanner`Private`x0 = 
                    CalculateScan`PlotterScanner`Private`xi1$ + 
                    CalculateScan`PlotterScanner`Private`jk (
                    CalculateScan`PlotterScanner`Private`involuteCounti + 
                    1)^(-1) (CalculateScan`PlotterScanner`Private`xi2$ - 
                    CalculateScan`PlotterScanner`Private`xi1$); 
                    CalculateScan`PlotterScanner`Private`signedArcFactors$ = 
                    Map[Map[Max[#, 0]& , #]& , 
                    CalculateScan`PlotterScanner`Private`arcFactors$ - 
                    CalculateScan`PlotterScanner`Private`arcLength$[
                    CalculateScan`PlotterScanner`Private`x0]]; 
                    CalculateScan`PlotterScanner`Private`curvePoints$ = 
                    CalculateScan`PlotterScanner`Private`baseSegments$ + 
                    CalculateScan`PlotterScanner`Private`signedArcFactors$ 
                    CalculateScan`PlotterScanner`Private`oSegments$; If[
                    MemberQ[CalculateScan`PlotterScanner`Private`curvePoints$, 
                    Blank[Complex], {0, Infinity}], {}, 
                    Map[
                    BSplineCurve, 
                    CalculateScan`PlotterScanner`Private`curvePoints$]], {
                    CalculateScan`PlotterScanner`Private`jk, 1, 
                    CalculateScan`PlotterScanner`Private`involuteCounti}], \
{}]; CalculateScan`PlotterScanner`Private`iTabLeft$ = If[True, 
                    Table[
                    CalculateScan`PlotterScanner`Private`x0 = 
                    CalculateScan`PlotterScanner`Private`xi2$ + 
                    CalculateScan`PlotterScanner`Private`jk (
                    CalculateScan`PlotterScanner`Private`involuteCounti + 
                    1)^(-1) (CalculateScan`PlotterScanner`Private`xi1$ - 
                    CalculateScan`PlotterScanner`Private`xi2$); 
                    CalculateScan`PlotterScanner`Private`signedArcFactors$ = 
                    Map[Map[Min[#, 0]& , #]& , 
                    CalculateScan`PlotterScanner`Private`arcFactors$ - (
                    CalculateScan`PlotterScanner`Private`arcLength$[
                    CalculateScan`PlotterScanner`Private`xi2$] - 
                    CalculateScan`PlotterScanner`Private`arcLength$[
                    CalculateScan`PlotterScanner`Private`x0])]; 
                    CalculateScan`PlotterScanner`Private`curvePoints$ = 
                    CalculateScan`PlotterScanner`Private`baseSegments$ + 
                    CalculateScan`PlotterScanner`Private`signedArcFactors$ 
                    CalculateScan`PlotterScanner`Private`oSegments$; If[
                    MemberQ[CalculateScan`PlotterScanner`Private`curvePoints$, 
                    Blank[Complex], {0, Infinity}], {}, 
                    Map[
                    BSplineCurve, 
                    CalculateScan`PlotterScanner`Private`curvePoints$]], {
                    CalculateScan`PlotterScanner`Private`jk, 1, 
                    CalculateScan`PlotterScanner`Private`involuteCounti}], \
{}]; {CalculateScan`PlotterScanner`Private`iTabRight$, 
                    CalculateScan`PlotterScanner`Private`iTabLeft$}, {
                    CalculateScan`PlotterScanner`Private`i, 
                    Length[
                    CalculateScan`PlotterScanner`Private`domainsAndCounts]}]]; 
                    CalculateScan`PlotterScanner`Private`iTab$, {}]; 
                    CalculateScan`PlotterScanner`Private`\
involutePlotCurveLastParamaters$ = {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`involuteCount$$}; 
                    Null]; CalculateScan`PlotterScanner`Private`involutePlot$ = 
                    Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`involuteColor$$, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`involuteOpacity$$], 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`involuteThickness$\
$]], 
                    If[
                    And[
                    CalculateScan`PlotterScanner`Private`involuteTF$$, 
                    CalculateScan`PlotterScanner`Private`involutesRightTF$$], 
                    Part[
                    CalculateScan`PlotterScanner`Private`involutePlotCurves$, 
                    1], {}], 
                    If[
                    And[
                    CalculateScan`PlotterScanner`Private`involuteTF$$, 
                    CalculateScan`PlotterScanner`Private`involutesLeftTF$$], 
                    Part[
                    CalculateScan`PlotterScanner`Private`involutePlotCurves$, 
                    2], {}]}]; If[
                    And[
                    CalculateScan`PlotterScanner`Private`offsetCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
offsetCurveLastParamaters$$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`offsetCurveCount$$}],
                     CalculateScan`PlotterScanner`Private`\
offsetCurvePlotCurves$$ = 
                    If[CalculateScan`PlotterScanner`Private`offsetCurveTF$$, 
                    
                    With[{CalculateScan`PlotterScanner`Private`maxDist$ = 
                    Function[{CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, 
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`offsetCurveDistance$$\
, 13.770615611764953`]}, CalculateScan`PlotterScanner`Private`oCurve = 
                    ParametricPlot3D[
                    Prepend[
                    Normalize[{-CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 2}}, {}, {0, 0, 4, 0, 
                    0}, {{40, 34, 3, 0, 0, 3, 0, 1}, {40, 60, 3, 0, 1, 3, 0, 
                    2}, {40, 34, 3, 0, 1, 3, 0, 3}, {13, 2, 3, 2}, {1}}, 
                    Function[{$CellContext`x}, 
                    
                    Block[{Compile`$4925}, 
                    Compile`$4925 = Log[$CellContext`x]; 
                    Compile`$4925^(-1) + Log[Compile`$4925]]], 
                    Evaluate][$CellContext`x], 
                    1}], $CellContext`x], {$CellContext`x, 
                    Min[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] - 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2, 
                    Max[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] + 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2},
                     PlotRange -> All, Evaluated -> False, MaxRecursion -> 5]; 
                    CalculateScan`PlotterScanner`Private`lineSegments$ = 
                    Select[
                    Map[First, 
                    Cases[
                    Normal[CalculateScan`PlotterScanner`Private`oCurve], 
                    Blank[Line], Infinity]], Length[#] > 3& ]; 
                    CalculateScan`PlotterScanner`Private`baseSegments$ = Map[{
                    Part[#, 1], 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {}, {0, 0, 3, 0, 
                    0}, {{40, 34, 3, 0, 0, 3, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 
                    2}, {16, 0, 2, 1}, {1}}, 
                    Function[{$CellContext`x}, $CellContext`x Log[
                    Log[$CellContext`x]]], Evaluate][
                    Part[#, 1]]}& , 
                    CalculateScan`PlotterScanner`Private`lineSegments$, {-2}]; 
                    CalculateScan`PlotterScanner`Private`oSegments$ = 
                    Map[Rest, 
                    CalculateScan`PlotterScanner`Private`lineSegments$, {-2}]; 
                    Table[{
                    Map[
                    BSplineCurve, 
                    CalculateScan`PlotterScanner`Private`baseSegments$ + 
                    CalculateScan`PlotterScanner`Private`j 
                    CalculateScan`PlotterScanner`Private`maxDist$ 
                    CalculateScan`PlotterScanner`Private`offsetCurveCount$$^(-\
1) CalculateScan`PlotterScanner`Private`oSegments$], 
                    Map[
                    BSplineCurve, 
                    CalculateScan`PlotterScanner`Private`baseSegments$ - 
                    CalculateScan`PlotterScanner`Private`j 
                    CalculateScan`PlotterScanner`Private`maxDist$ 
                    CalculateScan`PlotterScanner`Private`offsetCurveCount$$^(-\
1) CalculateScan`PlotterScanner`Private`oSegments$]}, {
                    CalculateScan`PlotterScanner`Private`j, 
                    CalculateScan`PlotterScanner`Private`offsetCurveCount$$}]]\
, {}]; CalculateScan`PlotterScanner`Private`offsetCurveLastParamaters$$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`offsetCurveCount$$}]; 
                    CalculateScan`PlotterScanner`Private`offsetCurvePlot = 
                    Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`offsetCurveColor$$, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`offsetCurveOpacity$$]\
, 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
offsetCurveThickness$$]], 
                    If[
                    CalculateScan`PlotterScanner`Private`offsetCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
offsetCurvePlotCurves$$, {}]}]; If[
                    And[
                    CalculateScan`PlotterScanner`Private`tiltedOffsetCurveTF$$\
, CalculateScan`PlotterScanner`Private`tiltedOffsetCurveLastParamaters$$ =!= \
{{CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveCount$$, 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveAngle$$}], 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurvePlotCurves$$ = 
                    If[CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveTF$$, 
                    
                    With[{CalculateScan`PlotterScanner`Private`maxDist$ = 
                    Function[{CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, 
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveDistance$$, 13.770615611764953`], 
                    CalculateScan`PlotterScanner`Private`M$ = {{
                    Cos[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveAngle$$], 
                    Sin[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveAngle$$]}, {-Sin[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveAngle$$], 
                    Cos[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveAngle$$]}}}, 
                    CalculateScan`PlotterScanner`Private`oCurve = 
                    ParametricPlot3D[
                    Prepend[
                    Dot[CalculateScan`PlotterScanner`Private`M$, 
                    Normalize[{-CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 2}}, {}, {0, 0, 4, 0, 
                    0}, {{40, 34, 3, 0, 0, 3, 0, 1}, {40, 60, 3, 0, 1, 3, 0, 
                    2}, {40, 34, 3, 0, 1, 3, 0, 3}, {13, 2, 3, 2}, {1}}, 
                    Function[{$CellContext`x}, 
                    
                    Block[{Compile`$4925}, 
                    Compile`$4925 = Log[$CellContext`x]; 
                    Compile`$4925^(-1) + Log[Compile`$4925]]], 
                    Evaluate][$CellContext`x], 
                    1}]], $CellContext`x], {$CellContext`x, 
                    Min[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] - 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2, 
                    Max[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] + 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2},
                     PlotRange -> All, Evaluated -> False, MaxRecursion -> 5]; 
                    CalculateScan`PlotterScanner`Private`lineSegments$ = 
                    Select[
                    Map[First, 
                    Cases[
                    Normal[CalculateScan`PlotterScanner`Private`oCurve], 
                    Blank[Line], Infinity]], Length[#] > 3& ]; 
                    CalculateScan`PlotterScanner`Private`baseSegments$ = Map[{
                    Part[#, 1], 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {}, {0, 0, 3, 0, 
                    0}, {{40, 34, 3, 0, 0, 3, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 
                    2}, {16, 0, 2, 1}, {1}}, 
                    Function[{$CellContext`x}, $CellContext`x Log[
                    Log[$CellContext`x]]], Evaluate][
                    Part[#, 1]]}& , 
                    CalculateScan`PlotterScanner`Private`lineSegments$, {-2}]; 
                    CalculateScan`PlotterScanner`Private`oSegments$ = 
                    Map[Rest, 
                    CalculateScan`PlotterScanner`Private`lineSegments$, {-2}]; 
                    Table[{
                    Map[
                    BSplineCurve, 
                    CalculateScan`PlotterScanner`Private`baseSegments$ + 
                    CalculateScan`PlotterScanner`Private`j 
                    CalculateScan`PlotterScanner`Private`maxDist$ 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveCount$$^(-1) 
                    CalculateScan`PlotterScanner`Private`oSegments$], 
                    Map[
                    BSplineCurve, 
                    CalculateScan`PlotterScanner`Private`baseSegments$ - 
                    CalculateScan`PlotterScanner`Private`j 
                    CalculateScan`PlotterScanner`Private`maxDist$ 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveCount$$^(-1) 
                    CalculateScan`PlotterScanner`Private`oSegments$]}, {
                    CalculateScan`PlotterScanner`Private`j, 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveCount$$}]], {}]; 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveLastParamaters$$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveCount$$, 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveAngle$$}]; 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurvePlot = Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveColor$$, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveOpacity$$], 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveThickness$$]], 
                    If[
                    CalculateScan`PlotterScanner`Private`tiltedOffsetCurveTF$$\
, CalculateScan`PlotterScanner`Private`tiltedOffsetCurvePlotCurves$$, {}]}]; 
                    If[
                    And[
                    CalculateScan`PlotterScanner`Private`pedalCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
pedalCurveLastParamaters$$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
pedalCurveCountFactor$$, 
                    CalculateScan`PlotterScanner`Private`\
pedalCurveCountFactor$$}], 
                    CalculateScan`PlotterScanner`Private`pedalCurvePlotCurves$\
$ = If[CalculateScan`PlotterScanner`Private`pedalCurveTF$$, 
                    
                    With[{CalculateScan`PlotterScanner`Private`\
pedalCurveCount$ = If[CalculateScan`PlotterScanner`Private`pedalCurvePoints$$ === 
                    "grid", 
                    Max[1, 
                    Round[
                    16 CalculateScan`PlotterScanner`Private`\
pedalCurveCountFactor$$]], 
                    Max[1, 
                    Round[
                    120 CalculateScan`PlotterScanner`Private`\
pedalCurveCountFactor$$]]]}, 
                    (Cases[
                    Normal[#], 
                    Blank[Line], {0, Infinity}]& )[
                    If[
                    CalculateScan`PlotterScanner`Private`pedalCurvePoints$$ === 
                    "grid", 
                    Table[
                    
                    With[{CalculateScan`PlotterScanner`Private`px$ = 
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`py$ = 
                    CalculateScan`PlotterScanner`Private`py}, 
                    ParametricPlot[{$CellContext`x, 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {}, {0, 0, 3, 0, 
                    0}, {{40, 34, 3, 0, 0, 3, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 
                    2}, {16, 0, 2, 1}, {1}}, 
                    Function[{$CellContext`x}, $CellContext`x Log[
                    Log[$CellContext`x]]], Evaluate][$CellContext`x]} + (
                    1 (CalculateScan`PlotterScanner`Private`px$ - \
$CellContext`x) + CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 2}}, {}, {0, 0, 4, 0, 
                    0}, {{40, 34, 3, 0, 0, 3, 0, 1}, {40, 60, 3, 0, 1, 3, 0, 
                    2}, {40, 34, 3, 0, 1, 3, 0, 3}, {13, 2, 3, 2}, {1}}, 
                    Function[{$CellContext`x}, 
                    
                    Block[{Compile`$4925}, 
                    Compile`$4925 = Log[$CellContext`x]; 
                    Compile`$4925^(-1) + Log[Compile`$4925]]], 
                    Evaluate][$CellContext`x] (
                    CalculateScan`PlotterScanner`Private`py$ - 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {}, {0, 0, 3, 0, 
                    0}, {{40, 34, 3, 0, 0, 3, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 
                    2}, {16, 0, 2, 1}, {1}}, 
                    Function[{$CellContext`x}, $CellContext`x Log[
                    Log[$CellContext`x]]], Evaluate][$CellContext`x])) (1 + 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 2}}, {}, {0, 0, 4, 0, 
                    0}, {{40, 34, 3, 0, 0, 3, 0, 1}, {40, 60, 3, 0, 1, 3, 0, 
                    2}, {40, 34, 3, 0, 1, 3, 0, 3}, {13, 2, 3, 2}, {1}}, 
                    Function[{$CellContext`x}, 
                    
                    Block[{Compile`$4925}, 
                    Compile`$4925 = Log[$CellContext`x]; 
                    Compile`$4925^(-1) + Log[Compile`$4925]]], 
                    Evaluate][$CellContext`x]^2)^(-1) {1, 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {}, {0, 0, 3, 0, 
                    0}, {{40, 34, 3, 0, 0, 3, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 
                    2}, {16, 0, 2, 1}, {1}}, 
                    Function[{$CellContext`x}, $CellContext`x Log[
                    Log[$CellContext`x]]], 
                    Evaluate][$CellContext`x]}, {$CellContext`x, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$}, 
                    PlotRange -> {
                    CalculateScan`PlotterScanner`Private`pRX$, 
                    CalculateScan`PlotterScanner`Private`pRY$}, Evaluated -> 
                    False]], {CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)/
                    CalculateScan`PlotterScanner`Private`pedalCurveCount$}, {
                    CalculateScan`PlotterScanner`Private`py, 
                    CalculateScan`PlotterScanner`Private`yL$, 
                    CalculateScan`PlotterScanner`Private`yU$, (
                    CalculateScan`PlotterScanner`Private`yU$ - 
                    CalculateScan`PlotterScanner`Private`yL$)/
                    CalculateScan`PlotterScanner`Private`pedalCurveCount$}], 
                    Table[
                    
                    With[{CalculateScan`PlotterScanner`Private`px$ = 
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`py$ = 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {}, {0, 0, 3, 0, 
                    0}, {{40, 34, 3, 0, 0, 3, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 
                    2}, {16, 0, 2, 1}, {1}}, 
                    Function[{$CellContext`x}, $CellContext`x Log[
                    Log[$CellContext`x]]], Evaluate][
                    CalculateScan`PlotterScanner`Private`px]}, 
                    ParametricPlot[{$CellContext`x, 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {}, {0, 0, 3, 0, 
                    0}, {{40, 34, 3, 0, 0, 3, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 
                    2}, {16, 0, 2, 1}, {1}}, 
                    Function[{$CellContext`x}, $CellContext`x Log[
                    Log[$CellContext`x]]], Evaluate][$CellContext`x]} + (
                    1 (CalculateScan`PlotterScanner`Private`px$ - \
$CellContext`x) + CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 2}}, {}, {0, 0, 4, 0, 
                    0}, {{40, 34, 3, 0, 0, 3, 0, 1}, {40, 60, 3, 0, 1, 3, 0, 
                    2}, {40, 34, 3, 0, 1, 3, 0, 3}, {13, 2, 3, 2}, {1}}, 
                    Function[{$CellContext`x}, 
                    
                    Block[{Compile`$4925}, 
                    Compile`$4925 = Log[$CellContext`x]; 
                    Compile`$4925^(-1) + Log[Compile`$4925]]], 
                    Evaluate][$CellContext`x] (
                    CalculateScan`PlotterScanner`Private`py$ - 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {}, {0, 0, 3, 0, 
                    0}, {{40, 34, 3, 0, 0, 3, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 
                    2}, {16, 0, 2, 1}, {1}}, 
                    Function[{$CellContext`x}, $CellContext`x Log[
                    Log[$CellContext`x]]], Evaluate][$CellContext`x])) (1 + 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 2}}, {}, {0, 0, 4, 0, 
                    0}, {{40, 34, 3, 0, 0, 3, 0, 1}, {40, 60, 3, 0, 1, 3, 0, 
                    2}, {40, 34, 3, 0, 1, 3, 0, 3}, {13, 2, 3, 2}, {1}}, 
                    Function[{$CellContext`x}, 
                    
                    Block[{Compile`$4925}, 
                    Compile`$4925 = Log[$CellContext`x]; 
                    Compile`$4925^(-1) + Log[Compile`$4925]]], 
                    Evaluate][$CellContext`x]^2)^(-1) {1, 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {}, {0, 0, 3, 0, 
                    0}, {{40, 34, 3, 0, 0, 3, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 
                    2}, {16, 0, 2, 1}, {1}}, 
                    Function[{$CellContext`x}, $CellContext`x Log[
                    Log[$CellContext`x]]], 
                    Evaluate][$CellContext`x]}, {$CellContext`x, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$}, 
                    PlotRange -> {
                    CalculateScan`PlotterScanner`Private`pRX$, 
                    CalculateScan`PlotterScanner`Private`pRY$}, Evaluated -> 
                    False]], {CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)/
                    CalculateScan`PlotterScanner`Private`pedalCurveCount$}]]]]\
, {}]; CalculateScan`PlotterScanner`Private`pedalCurveLastParamaters$$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
pedalCurveCountFactor$$, 
                    CalculateScan`PlotterScanner`Private`pedalCurvePoints$$}]; 
                    CalculateScan`PlotterScanner`Private`pedalCurvePlot = 
                    Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`pedalCurveColor$$, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`pedalCurveOpacity$$], 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
pedalCurveThickness$$]], 
                    If[
                    CalculateScan`PlotterScanner`Private`pedalCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`pedalCurvePlotCurves$\
$, {}]}]; If[
                    And[
                    CalculateScan`PlotterScanner`Private`negativePedalCurveTF$\
$, CalculateScan`PlotterScanner`Private`negativePedalCurveLastParamaters$$ =!= \
{{CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveCountFactor$$, 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePoints$$}], 
                    If[CalculateScan`PlotterScanner`Private`\
negativePedalCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePlotCurves$$ = 
                    With[{CalculateScan`PlotterScanner`Private`\
negativePedalCurveCount$ = If[
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePoints$$ === "grid", 
                    Max[1, 
                    Round[
                    16 CalculateScan`PlotterScanner`Private`\
negativePedalCurveCountFactor$$]], 
                    Max[1, 
                    Round[
                    120 CalculateScan`PlotterScanner`Private`\
negativePedalCurveCountFactor$$]]]}, 
                    (Cases[
                    Normal[#], 
                    Blank[Line], {0, Infinity}]& )[
                    If[
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePoints$$ === "grid", 
                    Table[
                    
                    With[{CalculateScan`PlotterScanner`Private`px$ = 
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`py$ = 
                    CalculateScan`PlotterScanner`Private`py}, 
                    ParametricPlot[{-(
                    CalculateScan`PlotterScanner`Private`px$ - 
                    2 $CellContext`x) (
                    CalculateScan`PlotterScanner`Private`py$ - 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {}, {0, 0, 3, 0, 
                    0}, {{40, 34, 3, 0, 0, 3, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 
                    2}, {16, 0, 2, 1}, {1}}, 
                    Function[{$CellContext`x}, $CellContext`x Log[
                    Log[$CellContext`x]]], Evaluate][$CellContext`x]) - ((
                    CalculateScan`PlotterScanner`Private`px$ - \
$CellContext`x) $CellContext`x + (CalculateScan`PlotterScanner`Private`py$ - 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {}, {0, 0, 3, 0, 
                    0}, {{40, 34, 3, 0, 0, 3, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 
                    2}, {16, 0, 2, 1}, {1}}, 
                    Function[{$CellContext`x}, $CellContext`x Log[
                    Log[$CellContext`x]]], Evaluate][$CellContext`x])^2) 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 2}}, {}, {0, 0, 4, 0, 
                    0}, {{40, 34, 3, 0, 0, 3, 0, 1}, {40, 60, 3, 0, 1, 3, 0, 
                    2}, {40, 34, 3, 0, 1, 3, 0, 3}, {13, 2, 3, 2}, {1}}, 
                    Function[{$CellContext`x}, 
                    
                    Block[{Compile`$4925}, 
                    Compile`$4925 = Log[$CellContext`x]; 
                    Compile`$4925^(-1) + Log[Compile`$4925]]], 
                    Evaluate][$CellContext`x], (
                    CalculateScan`PlotterScanner`Private`px$ - \
$CellContext`x)^2 + CalculateScan`PlotterScanner`Private`py$ 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {}, {0, 0, 3, 0, 
                    0}, {{40, 34, 3, 0, 0, 3, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 
                    2}, {16, 0, 2, 1}, {1}}, 
                    Function[{$CellContext`x}, $CellContext`x Log[
                    Log[$CellContext`x]]], Evaluate][$CellContext`x] - 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {}, {0, 0, 3, 0, 
                    0}, {{40, 34, 3, 0, 0, 3, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 
                    2}, {16, 0, 2, 1}, {1}}, 
                    Function[{$CellContext`x}, $CellContext`x Log[
                    Log[$CellContext`x]]], Evaluate][$CellContext`x]^2 + (
                    CalculateScan`PlotterScanner`Private`px$ - \
$CellContext`x) (CalculateScan`PlotterScanner`Private`py$ - 2 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {}, {0, 0, 3, 0, 
                    0}, {{40, 34, 3, 0, 0, 3, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 
                    2}, {16, 0, 2, 1}, {1}}, 
                    Function[{$CellContext`x}, $CellContext`x Log[
                    Log[$CellContext`x]]], Evaluate][$CellContext`x]) 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 2}}, {}, {0, 0, 4, 0, 
                    0}, {{40, 34, 3, 0, 0, 3, 0, 1}, {40, 60, 3, 0, 1, 3, 0, 
                    2}, {40, 34, 3, 0, 1, 3, 0, 3}, {13, 2, 3, 2}, {1}}, 
                    Function[{$CellContext`x}, 
                    
                    Block[{Compile`$4925}, 
                    Compile`$4925 = Log[$CellContext`x]; 
                    Compile`$4925^(-1) + Log[Compile`$4925]]], 
                    Evaluate][$CellContext`x]}/(
                    CalculateScan`PlotterScanner`Private`py$ - 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {}, {0, 0, 3, 0, 
                    0}, {{40, 34, 3, 0, 0, 3, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 
                    2}, {16, 0, 2, 1}, {1}}, 
                    Function[{$CellContext`x}, $CellContext`x Log[
                    Log[$CellContext`x]]], 
                    Evaluate][$CellContext`x] + (-
                    CalculateScan`PlotterScanner`Private`px$ + $CellContext`x)
                     CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 2}}, {}, {0, 0, 4, 0, 
                    0}, {{40, 34, 3, 0, 0, 3, 0, 1}, {40, 60, 3, 0, 1, 3, 0, 
                    2}, {40, 34, 3, 0, 1, 3, 0, 3}, {13, 2, 3, 2}, {1}}, 
                    Function[{$CellContext`x}, 
                    
                    Block[{Compile`$4925}, 
                    Compile`$4925 = Log[$CellContext`x]; 
                    Compile`$4925^(-1) + Log[Compile`$4925]]], 
                    Evaluate][$CellContext`x]), {$CellContext`x, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$}, 
                    PlotRange -> {
                    CalculateScan`PlotterScanner`Private`pRX$, 
                    CalculateScan`PlotterScanner`Private`pRY$}, Evaluated -> 
                    False]], {CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)/
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveCount$}, {CalculateScan`PlotterScanner`Private`py, 
                    CalculateScan`PlotterScanner`Private`yL$, 
                    CalculateScan`PlotterScanner`Private`yU$, (
                    CalculateScan`PlotterScanner`Private`yU$ - 
                    CalculateScan`PlotterScanner`Private`yL$)/
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveCount$}], 
                    Table[
                    
                    With[{CalculateScan`PlotterScanner`Private`px$ = 
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`py$ = 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {}, {0, 0, 3, 0, 
                    0}, {{40, 34, 3, 0, 0, 3, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 
                    2}, {16, 0, 2, 1}, {1}}, 
                    Function[{$CellContext`x}, $CellContext`x Log[
                    Log[$CellContext`x]]], Evaluate][
                    CalculateScan`PlotterScanner`Private`px]}, 
                    
                    ParametricPlot[{-(
                    CalculateScan`PlotterScanner`Private`px$ - 
                    2 $CellContext`x) (
                    CalculateScan`PlotterScanner`Private`py$ - 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {}, {0, 0, 3, 0, 
                    0}, {{40, 34, 3, 0, 0, 3, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 
                    2}, {16, 0, 2, 1}, {1}}, 
                    Function[{$CellContext`x}, $CellContext`x Log[
                    Log[$CellContext`x]]], Evaluate][$CellContext`x]) - ((
                    CalculateScan`PlotterScanner`Private`px$ - \
$CellContext`x) $CellContext`x + (CalculateScan`PlotterScanner`Private`py$ - 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {}, {0, 0, 3, 0, 
                    0}, {{40, 34, 3, 0, 0, 3, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 
                    2}, {16, 0, 2, 1}, {1}}, 
                    Function[{$CellContext`x}, $CellContext`x Log[
                    Log[$CellContext`x]]], Evaluate][$CellContext`x])^2) 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 2}}, {}, {0, 0, 4, 0, 
                    0}, {{40, 34, 3, 0, 0, 3, 0, 1}, {40, 60, 3, 0, 1, 3, 0, 
                    2}, {40, 34, 3, 0, 1, 3, 0, 3}, {13, 2, 3, 2}, {1}}, 
                    Function[{$CellContext`x}, 
                    
                    Block[{Compile`$4925}, 
                    Compile`$4925 = Log[$CellContext`x]; 
                    Compile`$4925^(-1) + Log[Compile`$4925]]], 
                    Evaluate][$CellContext`x], (
                    CalculateScan`PlotterScanner`Private`px$ - \
$CellContext`x)^2 + CalculateScan`PlotterScanner`Private`py$ 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {}, {0, 0, 3, 0, 
                    0}, {{40, 34, 3, 0, 0, 3, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 
                    2}, {16, 0, 2, 1}, {1}}, 
                    Function[{$CellContext`x}, $CellContext`x Log[
                    Log[$CellContext`x]]], Evaluate][$CellContext`x] - 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {}, {0, 0, 3, 0, 
                    0}, {{40, 34, 3, 0, 0, 3, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 
                    2}, {16, 0, 2, 1}, {1}}, 
                    Function[{$CellContext`x}, $CellContext`x Log[
                    Log[$CellContext`x]]], Evaluate][$CellContext`x]^2 + (
                    CalculateScan`PlotterScanner`Private`px$ - \
$CellContext`x) (CalculateScan`PlotterScanner`Private`py$ - 2 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {}, {0, 0, 3, 0, 
                    0}, {{40, 34, 3, 0, 0, 3, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 
                    2}, {16, 0, 2, 1}, {1}}, 
                    Function[{$CellContext`x}, $CellContext`x Log[
                    Log[$CellContext`x]]], Evaluate][$CellContext`x]) 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 2}}, {}, {0, 0, 4, 0, 
                    0}, {{40, 34, 3, 0, 0, 3, 0, 1}, {40, 60, 3, 0, 1, 3, 0, 
                    2}, {40, 34, 3, 0, 1, 3, 0, 3}, {13, 2, 3, 2}, {1}}, 
                    Function[{$CellContext`x}, 
                    
                    Block[{Compile`$4925}, 
                    Compile`$4925 = Log[$CellContext`x]; 
                    Compile`$4925^(-1) + Log[Compile`$4925]]], 
                    Evaluate][$CellContext`x]}/(
                    CalculateScan`PlotterScanner`Private`py$ - 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {}, {0, 0, 3, 0, 
                    0}, {{40, 34, 3, 0, 0, 3, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 
                    2}, {16, 0, 2, 1}, {1}}, 
                    Function[{$CellContext`x}, $CellContext`x Log[
                    Log[$CellContext`x]]], 
                    Evaluate][$CellContext`x] + (-
                    CalculateScan`PlotterScanner`Private`px$ + $CellContext`x)
                     CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 2}}, {}, {0, 0, 4, 0, 
                    0}, {{40, 34, 3, 0, 0, 3, 0, 1}, {40, 60, 3, 0, 1, 3, 0, 
                    2}, {40, 34, 3, 0, 1, 3, 0, 3}, {13, 2, 3, 2}, {1}}, 
                    Function[{$CellContext`x}, 
                    
                    Block[{Compile`$4925}, 
                    Compile`$4925 = Log[$CellContext`x]; 
                    Compile`$4925^(-1) + Log[Compile`$4925]]], 
                    Evaluate][$CellContext`x]), {$CellContext`x, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$}, 
                    PlotRange -> {
                    CalculateScan`PlotterScanner`Private`pRX$, 
                    CalculateScan`PlotterScanner`Private`pRY$}, Evaluated -> 
                    False]], {CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)/
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveCount$}]]]], {}]; 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveLastParamaters$$ = {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveCountFactor$$, 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePoints$$}]; 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePlot = Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveColor$$, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveOpacity$$], 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
negativePedalCurveThickness$$]], 
                    If[
                    CalculateScan`PlotterScanner`Private`negativePedalCurveTF$\
$, CalculateScan`PlotterScanner`Private`negativePedalCurvePlotCurves$$, {}]}]; 
                    If[
                    And[
                    CalculateScan`PlotterScanner`Private`contraPedalCurveTF$$,
                     CalculateScan`PlotterScanner`Private`\
contraPedalCurveLastParamaters$$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveCountFactor$$, 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurvePoints$$}], 
                    If[CalculateScan`PlotterScanner`Private`\
contraPedalCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurvePlotCurves$$ = 
                    With[{CalculateScan`PlotterScanner`Private`\
contraPedalCurveCount$ = 
                    If[CalculateScan`PlotterScanner`Private`\
contraPedalCurvePoints$$ === "grid", 
                    Max[1, 
                    Round[
                    16 CalculateScan`PlotterScanner`Private`\
contraPedalCurveCountFactor$$]], 
                    Max[1, 
                    Round[
                    120 CalculateScan`PlotterScanner`Private`\
contraPedalCurveCountFactor$$]]]}, 
                    (Cases[
                    Normal[#], 
                    Blank[Line], {0, Infinity}]& )[
                    If[
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurvePoints$$ === "grid", 
                    Table[
                    
                    With[{CalculateScan`PlotterScanner`Private`px$ = 
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`py$ = 
                    CalculateScan`PlotterScanner`Private`py}, 
                    ParametricPlot[{$CellContext`x, 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {}, {0, 0, 3, 0, 
                    0}, {{40, 34, 3, 0, 0, 3, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 
                    2}, {16, 0, 2, 1}, {1}}, 
                    Function[{$CellContext`x}, $CellContext`x Log[
                    Log[$CellContext`x]]], Evaluate][$CellContext`x]} + (
                    1 (CalculateScan`PlotterScanner`Private`py$ - 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {}, {0, 0, 3, 0, 
                    0}, {{40, 34, 3, 0, 0, 3, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 
                    2}, {16, 0, 2, 1}, {1}}, 
                    Function[{$CellContext`x}, $CellContext`x Log[
                    Log[$CellContext`x]]], Evaluate][$CellContext`x]) + 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 2}}, {}, {0, 0, 4, 0, 
                    0}, {{40, 34, 3, 0, 0, 3, 0, 1}, {40, 60, 3, 0, 1, 3, 0, 
                    2}, {40, 34, 3, 0, 1, 3, 0, 3}, {13, 2, 3, 2}, {1}}, 
                    Function[{$CellContext`x}, 
                    
                    Block[{Compile`$4925}, 
                    Compile`$4925 = Log[$CellContext`x]; 
                    Compile`$4925^(-1) + Log[Compile`$4925]]], 
                    Evaluate][$CellContext`x] (-
                    CalculateScan`PlotterScanner`Private`px$ + \
$CellContext`x)) (1 + CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 2}}, {}, {0, 0, 4, 0, 
                    0}, {{40, 34, 3, 0, 0, 3, 0, 1}, {40, 60, 3, 0, 1, 3, 0, 
                    2}, {40, 34, 3, 0, 1, 3, 0, 3}, {13, 2, 3, 2}, {1}}, 
                    Function[{$CellContext`x}, 
                    
                    Block[{Compile`$4925}, 
                    Compile`$4925 = Log[$CellContext`x]; 
                    Compile`$4925^(-1) + Log[Compile`$4925]]], 
                    Evaluate][$CellContext`x]^2)^(-1) {-
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {}, {0, 0, 3, 0, 
                    0}, {{40, 34, 3, 0, 0, 3, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 
                    2}, {16, 0, 2, 1}, {1}}, 
                    Function[{$CellContext`x}, $CellContext`x Log[
                    Log[$CellContext`x]]], Evaluate][$CellContext`x], 
                    1}, {$CellContext`x, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$}, 
                    PlotRange -> {
                    CalculateScan`PlotterScanner`Private`pRX$, 
                    CalculateScan`PlotterScanner`Private`pRY$}, Evaluated -> 
                    False]], {CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)/
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveCount$}, {CalculateScan`PlotterScanner`Private`py, 
                    CalculateScan`PlotterScanner`Private`yL$, 
                    CalculateScan`PlotterScanner`Private`yU$, (
                    CalculateScan`PlotterScanner`Private`yU$ - 
                    CalculateScan`PlotterScanner`Private`yL$)/
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveCount$}], 
                    Table[
                    
                    With[{CalculateScan`PlotterScanner`Private`px$ = 
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`py$ = 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {}, {0, 0, 3, 0, 
                    0}, {{40, 34, 3, 0, 0, 3, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 
                    2}, {16, 0, 2, 1}, {1}}, 
                    Function[{$CellContext`x}, $CellContext`x Log[
                    Log[$CellContext`x]]], Evaluate][
                    CalculateScan`PlotterScanner`Private`px]}, 
                    ParametricPlot[{$CellContext`x, 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {}, {0, 0, 3, 0, 
                    0}, {{40, 34, 3, 0, 0, 3, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 
                    2}, {16, 0, 2, 1}, {1}}, 
                    Function[{$CellContext`x}, $CellContext`x Log[
                    Log[$CellContext`x]]], Evaluate][$CellContext`x]} + (
                    1 (CalculateScan`PlotterScanner`Private`py$ - 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {}, {0, 0, 3, 0, 
                    0}, {{40, 34, 3, 0, 0, 3, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 
                    2}, {16, 0, 2, 1}, {1}}, 
                    Function[{$CellContext`x}, $CellContext`x Log[
                    Log[$CellContext`x]]], Evaluate][$CellContext`x]) + 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 2}}, {}, {0, 0, 4, 0, 
                    0}, {{40, 34, 3, 0, 0, 3, 0, 1}, {40, 60, 3, 0, 1, 3, 0, 
                    2}, {40, 34, 3, 0, 1, 3, 0, 3}, {13, 2, 3, 2}, {1}}, 
                    Function[{$CellContext`x}, 
                    
                    Block[{Compile`$4925}, 
                    Compile`$4925 = Log[$CellContext`x]; 
                    Compile`$4925^(-1) + Log[Compile`$4925]]], 
                    Evaluate][$CellContext`x] (-
                    CalculateScan`PlotterScanner`Private`px$ + \
$CellContext`x)) (1 + CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 2}}, {}, {0, 0, 4, 0, 
                    0}, {{40, 34, 3, 0, 0, 3, 0, 1}, {40, 60, 3, 0, 1, 3, 0, 
                    2}, {40, 34, 3, 0, 1, 3, 0, 3}, {13, 2, 3, 2}, {1}}, 
                    Function[{$CellContext`x}, 
                    
                    Block[{Compile`$4925}, 
                    Compile`$4925 = Log[$CellContext`x]; 
                    Compile`$4925^(-1) + Log[Compile`$4925]]], 
                    Evaluate][$CellContext`x]^2)^(-1) {-
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {}, {0, 0, 3, 0, 
                    0}, {{40, 34, 3, 0, 0, 3, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 
                    2}, {16, 0, 2, 1}, {1}}, 
                    Function[{$CellContext`x}, $CellContext`x Log[
                    Log[$CellContext`x]]], Evaluate][$CellContext`x], 
                    1}, {$CellContext`x, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$}, 
                    PlotRange -> {
                    CalculateScan`PlotterScanner`Private`pRX$, 
                    CalculateScan`PlotterScanner`Private`pRY$}, Evaluated -> 
                    False]], {CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)/
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveCount$}]]]], {}]; 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveLastParamaters$$ = {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveCountFactor$$, 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurvePoints$$}]; 
                    CalculateScan`PlotterScanner`Private`contraPedalCurvePlot = 
                    Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveColor$$, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveOpacity$$], 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
contraPedalCurveThickness$$]], 
                    If[
                    CalculateScan`PlotterScanner`Private`contraPedalCurveTF$$,
                     CalculateScan`PlotterScanner`Private`\
contraPedalCurvePlotCurves$$, {}]}]; If[
                    And[
                    CalculateScan`PlotterScanner`Private`dualCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
dualCurveLastParamaters$$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`dualCurveCountFactor$\
$, CalculateScan`PlotterScanner`Private`dualCurvePoints}], 
                    If[CalculateScan`PlotterScanner`Private`dualCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`dualCurvePlotCurves$$\
 = With[{CalculateScan`PlotterScanner`Private`dualCurveCount$ = 
                    If[CalculateScan`PlotterScanner`Private`dualCurvePoints === 
                    "grid", 
                    Max[1, 
                    Round[
                    16 CalculateScan`PlotterScanner`Private`\
dualCurveCountFactor$$]], 
                    Max[1, 
                    Round[120 
                    CalculateScan`PlotterScanner`Private`dualCurveCountFactor$\
$]]]}, 
                    (Cases[
                    Normal[#], 
                    Blank[Line], {0, Infinity}]& )[
                    If[
                    CalculateScan`PlotterScanner`Private`dualCurvePoints === 
                    "grid", 
                    Table[
                    
                    With[{CalculateScan`PlotterScanner`Private`px$ = 
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`py$ = 
                    CalculateScan`PlotterScanner`Private`py}, 
                    ParametricPlot[{-CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 2}}, {}, {0, 0, 4, 0, 
                    0}, {{40, 34, 3, 0, 0, 3, 0, 1}, {40, 60, 3, 0, 1, 3, 0, 
                    2}, {40, 34, 3, 0, 1, 3, 0, 3}, {13, 2, 3, 2}, {1}}, 
                    Function[{$CellContext`x}, 
                    
                    Block[{Compile`$4925}, 
                    Compile`$4925 = Log[$CellContext`x]; 
                    Compile`$4925^(-1) + Log[Compile`$4925]]], 
                    Evaluate][$CellContext`x], 1}/(($CellContext`x + 
                    CalculateScan`PlotterScanner`Private`px$) 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 2}}, {}, {0, 0, 4, 0, 
                    0}, {{40, 34, 3, 0, 0, 3, 0, 1}, {40, 60, 3, 0, 1, 3, 0, 
                    2}, {40, 34, 3, 0, 1, 3, 0, 3}, {13, 2, 3, 2}, {1}}, 
                    Function[{$CellContext`x}, 
                    
                    Block[{Compile`$4925}, 
                    Compile`$4925 = Log[$CellContext`x]; 
                    Compile`$4925^(-1) + Log[Compile`$4925]]], 
                    Evaluate][$CellContext`x] - 
                    1 (CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {}, {0, 0, 3, 0, 
                    0}, {{40, 34, 3, 0, 0, 3, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 
                    2}, {16, 0, 2, 1}, {1}}, 
                    Function[{$CellContext`x}, $CellContext`x Log[
                    Log[$CellContext`x]]], Evaluate][$CellContext`x] + 
                    CalculateScan`PlotterScanner`Private`py$)), \
{$CellContext`x, Min[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] - 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2, 
                    Max[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] + 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2},
                     PlotStyle -> Directive[
                    Opacity[
                    CalculateScan`PlotterScanner`Private`dualCurveOpacity$$], 
                    CalculateScan`PlotterScanner`Private`dualCurveColor$$, 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
dualCurveThickness$$]], PlotRange -> 
                    CalculateScan`PlotterScanner`Private`pRY$, Evaluated -> 
                    False, Exclusions -> {($CellContext`x + 
                    CalculateScan`PlotterScanner`Private`px$) 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 2}}, {}, {0, 0, 4, 0, 
                    0}, {{40, 34, 3, 0, 0, 3, 0, 1}, {40, 60, 3, 0, 1, 3, 0, 
                    2}, {40, 34, 3, 0, 1, 3, 0, 3}, {13, 2, 3, 2}, {1}}, 
                    Function[{$CellContext`x}, 
                    
                    Block[{Compile`$4925}, 
                    Compile`$4925 = Log[$CellContext`x]; 
                    Compile`$4925^(-1) + Log[Compile`$4925]]], 
                    Evaluate][$CellContext`x] - 
                    1 (CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {}, {0, 0, 3, 0, 
                    0}, {{40, 34, 3, 0, 0, 3, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 
                    2}, {16, 0, 2, 1}, {1}}, 
                    Function[{$CellContext`x}, $CellContext`x Log[
                    Log[$CellContext`x]]], Evaluate][$CellContext`x] + 
                    CalculateScan`PlotterScanner`Private`py$) == 0}]], {
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)/
                    CalculateScan`PlotterScanner`Private`dualCurveCount$}, {
                    CalculateScan`PlotterScanner`Private`py, 
                    CalculateScan`PlotterScanner`Private`yL$, 
                    CalculateScan`PlotterScanner`Private`yU$, (
                    CalculateScan`PlotterScanner`Private`yU$ - 
                    CalculateScan`PlotterScanner`Private`yL$)/
                    CalculateScan`PlotterScanner`Private`dualCurveCount$}], 
                    Table[
                    
                    With[{CalculateScan`PlotterScanner`Private`px$ = 
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`py$ = 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {}, {0, 0, 3, 0, 
                    0}, {{40, 34, 3, 0, 0, 3, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 
                    2}, {16, 0, 2, 1}, {1}}, 
                    Function[{$CellContext`x}, $CellContext`x Log[
                    Log[$CellContext`x]]], Evaluate][
                    CalculateScan`PlotterScanner`Private`px]}, 
                    ParametricPlot[{-CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 2}}, {}, {0, 0, 4, 0, 
                    0}, {{40, 34, 3, 0, 0, 3, 0, 1}, {40, 60, 3, 0, 1, 3, 0, 
                    2}, {40, 34, 3, 0, 1, 3, 0, 3}, {13, 2, 3, 2}, {1}}, 
                    Function[{$CellContext`x}, 
                    
                    Block[{Compile`$4925}, 
                    Compile`$4925 = Log[$CellContext`x]; 
                    Compile`$4925^(-1) + Log[Compile`$4925]]], 
                    Evaluate][$CellContext`x], 1}/(($CellContext`x + 
                    CalculateScan`PlotterScanner`Private`px$) 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 2}}, {}, {0, 0, 4, 0, 
                    0}, {{40, 34, 3, 0, 0, 3, 0, 1}, {40, 60, 3, 0, 1, 3, 0, 
                    2}, {40, 34, 3, 0, 1, 3, 0, 3}, {13, 2, 3, 2}, {1}}, 
                    Function[{$CellContext`x}, 
                    
                    Block[{Compile`$4925}, 
                    Compile`$4925 = Log[$CellContext`x]; 
                    Compile`$4925^(-1) + Log[Compile`$4925]]], 
                    Evaluate][$CellContext`x] - 
                    1 (CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {}, {0, 0, 3, 0, 
                    0}, {{40, 34, 3, 0, 0, 3, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 
                    2}, {16, 0, 2, 1}, {1}}, 
                    Function[{$CellContext`x}, $CellContext`x Log[
                    Log[$CellContext`x]]], Evaluate][$CellContext`x] + 
                    CalculateScan`PlotterScanner`Private`py$)), \
{$CellContext`x, Min[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] - 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2, 
                    Max[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] + 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2},
                     PlotStyle -> Directive[
                    Opacity[
                    CalculateScan`PlotterScanner`Private`dualCurveOpacity$$], 
                    CalculateScan`PlotterScanner`Private`dualCurveColor$$, 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
dualCurveThickness$$]], PlotRange -> 
                    CalculateScan`PlotterScanner`Private`pRY$, Evaluated -> 
                    False, Exclusions -> {($CellContext`x + 
                    CalculateScan`PlotterScanner`Private`px$) 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 2}}, {}, {0, 0, 4, 0, 
                    0}, {{40, 34, 3, 0, 0, 3, 0, 1}, {40, 60, 3, 0, 1, 3, 0, 
                    2}, {40, 34, 3, 0, 1, 3, 0, 3}, {13, 2, 3, 2}, {1}}, 
                    Function[{$CellContext`x}, 
                    
                    Block[{Compile`$4925}, 
                    Compile`$4925 = Log[$CellContext`x]; 
                    Compile`$4925^(-1) + Log[Compile`$4925]]], 
                    Evaluate][$CellContext`x] - 
                    1 (CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {}, {0, 0, 3, 0, 
                    0}, {{40, 34, 3, 0, 0, 3, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 
                    2}, {16, 0, 2, 1}, {1}}, 
                    Function[{$CellContext`x}, $CellContext`x Log[
                    Log[$CellContext`x]]], Evaluate][$CellContext`x] + 
                    CalculateScan`PlotterScanner`Private`py$) == 0}]], {
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)/
                    CalculateScan`PlotterScanner`Private`dualCurveCount$}]]]],\
 {}]; CalculateScan`PlotterScanner`Private`dualCurveLastParamaters$$ = {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`dualCurveCountFactor$\
$, CalculateScan`PlotterScanner`Private`dualCurvePoints}]; 
                    CalculateScan`PlotterScanner`Private`dualCurvePlot = 
                    Graphics[{
                    Directive[
                    Opacity[
                    CalculateScan`PlotterScanner`Private`dualCurveOpacity$$], 
                    CalculateScan`PlotterScanner`Private`dualCurveColor$$, 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
dualCurveThickness$$]], 
                    If[
                    CalculateScan`PlotterScanner`Private`dualCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`dualCurvePlotCurves$$\
, {}]}]; If[
                    And[
                    CalculateScan`PlotterScanner`Private`inverseCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
inverseLastParamaters$$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
inverseCurveCountFactor$$, 
                    CalculateScan`PlotterScanner`Private`inverseCurvePoints$$,
                     CalculateScan`PlotterScanner`Private`\
inverseCurveCountFactor$$, 
                    CalculateScan`PlotterScanner`Private`\
inverseCurveCircleRadiusFactor$$}], 
                    If[CalculateScan`PlotterScanner`Private`inverseCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
inverseCurvePlotCurves$$ = (Cases[
                    Normal[#], 
                    Blank[Line], {0, Infinity}]& )[
                    
                    With[{CalculateScan`PlotterScanner`Private`\
inverseCurveCount$ = 
                    If[CalculateScan`PlotterScanner`Private`\
inverseCurvePoints$$ === "grid", 
                    Max[1, 
                    Round[
                    16 CalculateScan`PlotterScanner`Private`\
inverseCurveCountFactor$$]], 
                    Max[1, 
                    Round[
                    120 CalculateScan`PlotterScanner`Private`\
inverseCurveCountFactor$$]]], CalculateScan`PlotterScanner`Private`R$ = 
                    Function[{CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, 
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`\
inverseCurveCircleRadiusFactor$$, 1] 
                    Abs[CalculateScan`PlotterScanner`Private`X2$ - 
                    CalculateScan`PlotterScanner`Private`X1$]}, 
                    If[
                    CalculateScan`PlotterScanner`Private`inverseCurvePoints$$ === 
                    "grid", 
                    Table[
                    
                    With[{CalculateScan`PlotterScanner`Private`px$ = 
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`py$ = 
                    CalculateScan`PlotterScanner`Private`py}, 
                    
                    ParametricPlot[{
                    CalculateScan`PlotterScanner`Private`px$, 
                    CalculateScan`PlotterScanner`Private`py$} + 
                    CalculateScan`PlotterScanner`Private`R$^2 {$CellContext`x - 
                    CalculateScan`PlotterScanner`Private`px$, 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {}, {0, 0, 3, 0, 
                    0}, {{40, 34, 3, 0, 0, 3, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 
                    2}, {16, 0, 2, 1}, {1}}, 
                    Function[{$CellContext`x}, $CellContext`x Log[
                    Log[$CellContext`x]]], Evaluate][$CellContext`x] - 
                    CalculateScan`PlotterScanner`Private`py$}/(($CellContext`\
x - CalculateScan`PlotterScanner`Private`px$)^2 + (
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {}, {0, 0, 3, 0, 
                    0}, {{40, 34, 3, 0, 0, 3, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 
                    2}, {16, 0, 2, 1}, {1}}, 
                    Function[{$CellContext`x}, $CellContext`x Log[
                    Log[$CellContext`x]]], Evaluate][$CellContext`x] - 
                    CalculateScan`PlotterScanner`Private`py$)^2), \
{$CellContext`x, Min[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] - 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2, 
                    Max[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] + 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2},
                     PlotRange -> CalculateScan`PlotterScanner`Private`pRY$, 
                    Evaluated -> False]], {
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)/
                    CalculateScan`PlotterScanner`Private`inverseCurveCount$}, \
{CalculateScan`PlotterScanner`Private`py, 
                    CalculateScan`PlotterScanner`Private`yL$, 
                    CalculateScan`PlotterScanner`Private`yU$, (
                    CalculateScan`PlotterScanner`Private`yU$ - 
                    CalculateScan`PlotterScanner`Private`yL$)/
                    CalculateScan`PlotterScanner`Private`inverseCurveCount$}], 
                    Table[
                    
                    With[{CalculateScan`PlotterScanner`Private`px$ = 
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`py$ = 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {}, {0, 0, 3, 0, 
                    0}, {{40, 34, 3, 0, 0, 3, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 
                    2}, {16, 0, 2, 1}, {1}}, 
                    Function[{$CellContext`x}, $CellContext`x Log[
                    Log[$CellContext`x]]], Evaluate][
                    CalculateScan`PlotterScanner`Private`px]}, 
                    
                    ParametricPlot[{
                    CalculateScan`PlotterScanner`Private`px$, 
                    CalculateScan`PlotterScanner`Private`py$} + 
                    CalculateScan`PlotterScanner`Private`R$^2 {$CellContext`x - 
                    CalculateScan`PlotterScanner`Private`px$, 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {}, {0, 0, 3, 0, 
                    0}, {{40, 34, 3, 0, 0, 3, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 
                    2}, {16, 0, 2, 1}, {1}}, 
                    Function[{$CellContext`x}, $CellContext`x Log[
                    Log[$CellContext`x]]], Evaluate][$CellContext`x] - 
                    CalculateScan`PlotterScanner`Private`py$}/(($CellContext`\
x - CalculateScan`PlotterScanner`Private`px$)^2 + (
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {}, {0, 0, 3, 0, 
                    0}, {{40, 34, 3, 0, 0, 3, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 
                    2}, {16, 0, 2, 1}, {1}}, 
                    Function[{$CellContext`x}, $CellContext`x Log[
                    Log[$CellContext`x]]], Evaluate][$CellContext`x] - 
                    CalculateScan`PlotterScanner`Private`py$)^2), \
{$CellContext`x, Min[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] - 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2, 
                    Max[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] + 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2},
                     PlotRange -> CalculateScan`PlotterScanner`Private`pRY$, 
                    Evaluated -> False]], {
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)/
                    CalculateScan`PlotterScanner`Private`inverseCurveCount$}]]\
]], {}]; CalculateScan`PlotterScanner`Private`inverseLastParamaters$$ = {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
inverseCurveCountFactor$$, 
                    CalculateScan`PlotterScanner`Private`inverseCurvePoints$$,
                     CalculateScan`PlotterScanner`Private`\
inverseCurveCountFactor$$, 
                    CalculateScan`PlotterScanner`Private`\
inverseCurveCircleRadiusFactor$$}]; 
                    CalculateScan`PlotterScanner`Private`inverseCurvePlot = 
                    Graphics[{
                    Directive[
                    Opacity[
                    CalculateScan`PlotterScanner`Private`inverseCurveOpacity$$\
], CalculateScan`PlotterScanner`Private`inverseCurveColor$$, 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
inverseCurveThickness$$]], 
                    If[
                    CalculateScan`PlotterScanner`Private`inverseCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
inverseCurvePlotCurves$$, {}]}]; If[
                    And[
                    CalculateScan`PlotterScanner`Private`orthotomicCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
orthotomicLastParamaters$$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurveCountFactor$$, 
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurvePoints$$}], 
                    If[CalculateScan`PlotterScanner`Private`orthotomicCurveTF$\
$, CalculateScan`PlotterScanner`Private`orthotomicCurvePlotCurves$$ = (Cases[
                    Normal[#], 
                    Blank[Line], {0, Infinity}]& )[
                    
                    With[{CalculateScan`PlotterScanner`Private`\
orthotomicCurveCount$ = 
                    If[CalculateScan`PlotterScanner`Private`\
orthotomicCurvePoints$$ === "grid", 
                    Max[1, 
                    Round[
                    16 CalculateScan`PlotterScanner`Private`\
orthotomicCurveCountFactor$$]], 
                    Max[1, 
                    Round[
                    120 CalculateScan`PlotterScanner`Private`\
orthotomicCurveCountFactor$$]]]}, 
                    If[
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurvePoints$$ === "grid", 
                    Table[
                    
                    With[{CalculateScan`PlotterScanner`Private`px$ = 
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`py$ = 
                    CalculateScan`PlotterScanner`Private`py}, 
                    ParametricPlot[{$CellContext`x, 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {}, {0, 0, 3, 0, 
                    0}, {{40, 34, 3, 0, 0, 3, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 
                    2}, {16, 0, 2, 1}, {1}}, 
                    Function[{$CellContext`x}, $CellContext`x Log[
                    Log[$CellContext`x]]], Evaluate][$CellContext`x]} + {(-2) 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 2}}, {}, {0, 0, 4, 0, 
                    0}, {{40, 34, 3, 0, 0, 3, 0, 1}, {40, 60, 3, 0, 1, 3, 0, 
                    2}, {40, 34, 3, 0, 1, 3, 0, 3}, {13, 2, 3, 2}, {1}}, 
                    Function[{$CellContext`x}, 
                    
                    Block[{Compile`$4925}, 
                    Compile`$4925 = Log[$CellContext`x]; 
                    Compile`$4925^(-1) + Log[Compile`$4925]]], 
                    Evaluate][$CellContext`x] (
                    1 (CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {}, {0, 0, 3, 0, 
                    0}, {{40, 34, 3, 0, 0, 3, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 
                    2}, {16, 0, 2, 1}, {1}}, 
                    Function[{$CellContext`x}, $CellContext`x Log[
                    Log[$CellContext`x]]], Evaluate][$CellContext`x] - 
                    CalculateScan`PlotterScanner`Private`py$) - 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 2}}, {}, {0, 0, 4, 0, 
                    0}, {{40, 34, 3, 0, 0, 3, 0, 1}, {40, 60, 3, 0, 1, 3, 0, 
                    2}, {40, 34, 3, 0, 1, 3, 0, 3}, {13, 2, 3, 2}, {1}}, 
                    Function[{$CellContext`x}, 
                    
                    Block[{Compile`$4925}, 
                    Compile`$4925 = Log[$CellContext`x]; 
                    Compile`$4925^(-1) + Log[Compile`$4925]]], 
                    Evaluate][$CellContext`x] ($CellContext`x - 
                    CalculateScan`PlotterScanner`Private`px$)), 2 
                    1 (1 (CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {}, {0, 0, 3, 0, 
                    0}, {{40, 34, 3, 0, 0, 3, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 
                    2}, {16, 0, 2, 1}, {1}}, 
                    Function[{$CellContext`x}, $CellContext`x Log[
                    Log[$CellContext`x]]], Evaluate][$CellContext`x] - 
                    CalculateScan`PlotterScanner`Private`py$) - 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 2}}, {}, {0, 0, 4, 0, 
                    0}, {{40, 34, 3, 0, 0, 3, 0, 1}, {40, 60, 3, 0, 1, 3, 0, 
                    2}, {40, 34, 3, 0, 1, 3, 0, 3}, {13, 2, 3, 2}, {1}}, 
                    Function[{$CellContext`x}, 
                    
                    Block[{Compile`$4925}, 
                    Compile`$4925 = Log[$CellContext`x]; 
                    Compile`$4925^(-1) + Log[Compile`$4925]]], 
                    Evaluate][$CellContext`x] ($CellContext`x - 
                    CalculateScan`PlotterScanner`Private`px$))}/(1 + 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 2}}, {}, {0, 0, 4, 0, 
                    0}, {{40, 34, 3, 0, 0, 3, 0, 1}, {40, 60, 3, 0, 1, 3, 0, 
                    2}, {40, 34, 3, 0, 1, 3, 0, 3}, {13, 2, 3, 2}, {1}}, 
                    Function[{$CellContext`x}, 
                    
                    Block[{Compile`$4925}, 
                    Compile`$4925 = Log[$CellContext`x]; 
                    Compile`$4925^(-1) + Log[Compile`$4925]]], 
                    Evaluate][$CellContext`x]^2), {$CellContext`x, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$}, 
                    PlotRange -> {
                    CalculateScan`PlotterScanner`Private`pRX$, 
                    CalculateScan`PlotterScanner`Private`pRY$}, Evaluated -> 
                    False]], {CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)/
                    CalculateScan`PlotterScanner`Private`orthotomicCurveCount$\
}, {CalculateScan`PlotterScanner`Private`py, 
                    CalculateScan`PlotterScanner`Private`yL$, 
                    CalculateScan`PlotterScanner`Private`yU$, (
                    CalculateScan`PlotterScanner`Private`yU$ - 
                    CalculateScan`PlotterScanner`Private`yL$)/
                    CalculateScan`PlotterScanner`Private`orthotomicCurveCount$\
}], 
                    Table[
                    
                    With[{CalculateScan`PlotterScanner`Private`px$ = 
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`py$ = 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {}, {0, 0, 3, 0, 
                    0}, {{40, 34, 3, 0, 0, 3, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 
                    2}, {16, 0, 2, 1}, {1}}, 
                    Function[{$CellContext`x}, $CellContext`x Log[
                    Log[$CellContext`x]]], Evaluate][$CellContext`x]}, 
                    ParametricPlot[{$CellContext`x, 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {}, {0, 0, 3, 0, 
                    0}, {{40, 34, 3, 0, 0, 3, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 
                    2}, {16, 0, 2, 1}, {1}}, 
                    Function[{$CellContext`x}, $CellContext`x Log[
                    Log[$CellContext`x]]], Evaluate][$CellContext`x]} + {(-2) 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 2}}, {}, {0, 0, 4, 0, 
                    0}, {{40, 34, 3, 0, 0, 3, 0, 1}, {40, 60, 3, 0, 1, 3, 0, 
                    2}, {40, 34, 3, 0, 1, 3, 0, 3}, {13, 2, 3, 2}, {1}}, 
                    Function[{$CellContext`x}, 
                    
                    Block[{Compile`$4925}, 
                    Compile`$4925 = Log[$CellContext`x]; 
                    Compile`$4925^(-1) + Log[Compile`$4925]]], 
                    Evaluate][$CellContext`x] (
                    1 (CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {}, {0, 0, 3, 0, 
                    0}, {{40, 34, 3, 0, 0, 3, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 
                    2}, {16, 0, 2, 1}, {1}}, 
                    Function[{$CellContext`x}, $CellContext`x Log[
                    Log[$CellContext`x]]], Evaluate][$CellContext`x] - 
                    CalculateScan`PlotterScanner`Private`py$) - 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 2}}, {}, {0, 0, 4, 0, 
                    0}, {{40, 34, 3, 0, 0, 3, 0, 1}, {40, 60, 3, 0, 1, 3, 0, 
                    2}, {40, 34, 3, 0, 1, 3, 0, 3}, {13, 2, 3, 2}, {1}}, 
                    Function[{$CellContext`x}, 
                    
                    Block[{Compile`$4925}, 
                    Compile`$4925 = Log[$CellContext`x]; 
                    Compile`$4925^(-1) + Log[Compile`$4925]]], 
                    Evaluate][$CellContext`x] ($CellContext`x - 
                    CalculateScan`PlotterScanner`Private`px$)), 2 
                    1 (1 (CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {}, {0, 0, 3, 0, 
                    0}, {{40, 34, 3, 0, 0, 3, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 
                    2}, {16, 0, 2, 1}, {1}}, 
                    Function[{$CellContext`x}, $CellContext`x Log[
                    Log[$CellContext`x]]], Evaluate][$CellContext`x] - 
                    CalculateScan`PlotterScanner`Private`py$) - 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 2}}, {}, {0, 0, 4, 0, 
                    0}, {{40, 34, 3, 0, 0, 3, 0, 1}, {40, 60, 3, 0, 1, 3, 0, 
                    2}, {40, 34, 3, 0, 1, 3, 0, 3}, {13, 2, 3, 2}, {1}}, 
                    Function[{$CellContext`x}, 
                    
                    Block[{Compile`$4925}, 
                    Compile`$4925 = Log[$CellContext`x]; 
                    Compile`$4925^(-1) + Log[Compile`$4925]]], 
                    Evaluate][$CellContext`x] ($CellContext`x - 
                    CalculateScan`PlotterScanner`Private`px$))}/(1 + 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 2}}, {}, {0, 0, 4, 0, 
                    0}, {{40, 34, 3, 0, 0, 3, 0, 1}, {40, 60, 3, 0, 1, 3, 0, 
                    2}, {40, 34, 3, 0, 1, 3, 0, 3}, {13, 2, 3, 2}, {1}}, 
                    Function[{$CellContext`x}, 
                    
                    Block[{Compile`$4925}, 
                    Compile`$4925 = Log[$CellContext`x]; 
                    Compile`$4925^(-1) + Log[Compile`$4925]]], 
                    Evaluate][$CellContext`x]^2), {$CellContext`x, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$}, 
                    PlotRange -> {
                    CalculateScan`PlotterScanner`Private`pRX$, 
                    CalculateScan`PlotterScanner`Private`pRY$}, Evaluated -> 
                    False]], {CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)/
                    CalculateScan`PlotterScanner`Private`orthotomicCurveCount$\
}]]]], {}]; 
                    CalculateScan`PlotterScanner`Private`\
orthotomicLastParamaters$$ = {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurveCountFactor$$, 
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurvePoints$$}]; 
                    CalculateScan`PlotterScanner`Private`orthotomicCurvePlot = 
                    Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`orthotomicCurveColor$\
$, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurveOpacity$$], 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
orthotomicCurveThickness$$]], 
                    If[
                    CalculateScan`PlotterScanner`Private`orthotomicCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurvePlotCurves$$, {}]}]; If[
                    And[
                    CalculateScan`PlotterScanner`Private`isopticCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
isopticLastParamaters$$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`isopticCurveAngle$$}]\
, CalculateScan`PlotterScanner`Private`isopticCurvePlotCurves$$ = Quiet[
                    If[CalculateScan`PlotterScanner`Private`isopticCurveTF$$, 
                    
                    With[{CalculateScan`PlotterScanner`Private`\[Alpha]$ = 
                    CalculateScan`PlotterScanner`Private`isopticCurveAngle$$},
                     CalculateScan`PlotterScanner`Private`cpIsoptic = 
                    ContourPlot[(1 + CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 2}}, {}, {0, 0, 4, 0, 
                    0}, {{40, 34, 3, 0, 0, 3, 0, 1}, {40, 60, 3, 0, 1, 3, 0, 
                    2}, {40, 34, 3, 0, 1, 3, 0, 3}, {13, 2, 3, 2}, {1}}, 
                    Function[{$CellContext`x}, 
                    
                    Block[{Compile`$4925}, 
                    Compile`$4925 = Log[$CellContext`x]; 
                    Compile`$4925^(-1) + Log[Compile`$4925]]], Evaluate][
                    CalculateScan`PlotterScanner`Private`x1$$] 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 2}}, {}, {0, 0, 4, 0, 
                    0}, {{40, 34, 3, 0, 0, 3, 0, 1}, {40, 60, 3, 0, 1, 3, 0, 
                    2}, {40, 34, 3, 0, 1, 3, 0, 3}, {13, 2, 3, 2}, {1}}, 
                    Function[{$CellContext`x}, 
                    
                    Block[{Compile`$4925}, 
                    Compile`$4925 = Log[$CellContext`x]; 
                    Compile`$4925^(-1) + Log[Compile`$4925]]], Evaluate][
                    CalculateScan`PlotterScanner`Private`x2$$])/
                    Sqrt[(1 + CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 2}}, {}, {0, 0, 4, 0, 
                    0}, {{40, 34, 3, 0, 0, 3, 0, 1}, {40, 60, 3, 0, 1, 3, 0, 
                    2}, {40, 34, 3, 0, 1, 3, 0, 3}, {13, 2, 3, 2}, {1}}, 
                    Function[{$CellContext`x}, 
                    
                    Block[{Compile`$4925}, 
                    Compile`$4925 = Log[$CellContext`x]; 
                    Compile`$4925^(-1) + Log[Compile`$4925]]], Evaluate][
                    CalculateScan`PlotterScanner`Private`x1$$]^2) (1 + 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 2}}, {}, {0, 0, 4, 0, 
                    0}, {{40, 34, 3, 0, 0, 3, 0, 1}, {40, 60, 3, 0, 1, 3, 0, 
                    2}, {40, 34, 3, 0, 1, 3, 0, 3}, {13, 2, 3, 2}, {1}}, 
                    Function[{$CellContext`x}, 
                    
                    Block[{Compile`$4925}, 
                    Compile`$4925 = Log[$CellContext`x]; 
                    Compile`$4925^(-1) + Log[Compile`$4925]]], Evaluate][
                    CalculateScan`PlotterScanner`Private`x2$$]^2)] == 
                    Cos[CalculateScan`PlotterScanner`Private`\[Alpha]$], {
                    CalculateScan`PlotterScanner`Private`x1$$, (-2) Pi, 2 
                    Pi}, {CalculateScan`PlotterScanner`Private`x2$$, (-2) Pi, 
                    2 Pi}, Exclusions -> {
                    Function[{$CellContext`x}, Log[$CellContext`x]^(-1) + Log[
                    Log[$CellContext`x]]][
                    CalculateScan`PlotterScanner`Private`x1$$] - 
                    Function[{$CellContext`x}, Log[$CellContext`x]^(-1) + Log[
                    Log[$CellContext`x]]][
                    CalculateScan`PlotterScanner`Private`x2$$] == 0}, 
                    Evaluated -> False]; 
                    CalculateScan`PlotterScanner`Private`x1x2SCPCurves = Cases[
                    Normal[CalculateScan`PlotterScanner`Private`cpIsoptic], 
                    Blank[Line], Infinity]; 
                    If[CalculateScan`PlotterScanner`Private`x1x2SCPCurves === \
{}, {}, 
                    Map[
                    CalculateScan`PlotterScanner`Private`getSplineSegments, 
                    Map[
                    CalculateScan`PlotterScanner`Private`\
tangentIntersectionPoint[#, {
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {}, {0, 0, 3, 0, 
                    0}, {{40, 34, 3, 0, 0, 3, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 
                    2}, {16, 0, 2, 1}, {1}}, 
                    Function[{$CellContext`x}, $CellContext`x Log[
                    Log[$CellContext`x]]], Evaluate], 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 2}}, {}, {0, 0, 4, 0, 
                    0}, {{40, 34, 3, 0, 0, 3, 0, 1}, {40, 60, 3, 0, 1, 3, 0, 
                    2}, {40, 34, 3, 0, 1, 3, 0, 3}, {13, 2, 3, 2}, {1}}, 
                    Function[{$CellContext`x}, 
                    
                    Block[{Compile`$4925}, 
                    Compile`$4925 = Log[$CellContext`x]; 
                    Compile`$4925^(-1) + Log[Compile`$4925]]], Evaluate]}]& , 
                    CalculateScan`PlotterScanner`Private`x1x2SCPCurves, \
{-2}]]]], {}]]; 
                    CalculateScan`PlotterScanner`Private`\
isopticLastParamaters$$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`isopticCurveAngle$$}]\
; CalculateScan`PlotterScanner`Private`isopticCurvePlot = Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`isopticCurveColor$$, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`isopticCurveOpacity$$\
], 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
isopticCurveThickness$$]], 
                    If[
                    CalculateScan`PlotterScanner`Private`isopticCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
isopticCurvePlotCurves$$, {}]}]; 
                    CalculateScan`PlotterScanner`Private`annotatedPlotList = {
                    "tangentLinePlot" -> 
                    CalculateScan`PlotterScanner`Private`tangentLinePlot$, 
                    "normalLinePlot" -> 
                    CalculateScan`PlotterScanner`Private`normalLinePlot$, 
                    "tiltedTangentLinePlot" -> 
                    CalculateScan`PlotterScanner`Private`\
tiltedTangentLinePlot$, "osculatingCirclePlot" -> 
                    CalculateScan`PlotterScanner`Private`osculatingCirclePlot$\
, "taylorParabolaPlot" -> 
                    CalculateScan`PlotterScanner`Private`taylorParabolaPlot$, 
                    "involutePlot" -> 
                    CalculateScan`PlotterScanner`Private`involutePlot$, 
                    "evolutePlot" -> 
                    CalculateScan`PlotterScanner`Private`evolutePlot$, 
                    "dualCurvePlot" -> 
                    CalculateScan`PlotterScanner`Private`dualCurvePlot, 
                    "offsetCurvePlot" -> 
                    CalculateScan`PlotterScanner`Private`offsetCurvePlot, 
                    "tiltedOffsetCurvePlot" -> 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurvePlot, "pedalCurvePlot" -> 
                    CalculateScan`PlotterScanner`Private`pedalCurvePlot, 
                    "negativePedalCurvePlot" -> 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePlot, "contraPedalCurvePlot" -> 
                    CalculateScan`PlotterScanner`Private`contraPedalCurvePlot,
                     "inverseCurvePlot" -> 
                    CalculateScan`PlotterScanner`Private`inverseCurvePlot, 
                    "isopticCurvePlot" -> 
                    CalculateScan`PlotterScanner`Private`isopticCurvePlot, 
                    "orthotomicCurvePlot" -> 
                    CalculateScan`PlotterScanner`Private`orthotomicCurvePlot, 
                    "originalCurvePlot" -> 
                    CalculateScan`PlotterScanner`Private`originalCurvePlot$}; 
                    CalculateScan`PlotterScanner`Private`labelGrid = (
                    DeleteCases[#, {}]& )[{
                    If[
                    TrueQ[True], {
                    RawBoxes[
                    FormBox[
                    RowBox[{"x", " ", 
                    RowBox[{"log", "(", 
                    RowBox[{"log", "(", "x", ")"}], ")"}]}], 
                    TraditionalForm]], 
                    Style["\[LongDash]", Bold, Black]}, {}], 
                    If[
                    TrueQ[CalculateScan`PlotterScanner`Private`tangentTF$$], {
                    "tangents", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`tangentColor$$]}, \
{}], 
                    If[
                    TrueQ[CalculateScan`PlotterScanner`Private`normalTF$$], {
                    "normals", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`normalColor$$]}, {}], 
                    If[
                    TrueQ[
                    CalculateScan`PlotterScanner`Private`tiltedTangentTF$$], {
                    "tilted tangents", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`tiltedTangentColor$$]\
}, {}], 
                    If[
                    TrueQ[
                    CalculateScan`PlotterScanner`Private`osculatingCircleTF$$]\
, {"osculating circles", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleColor$$]}, {}], 
                    If[
                    TrueQ[
                    CalculateScan`PlotterScanner`Private`taylorParabolaTF$$], \
{"Taylor parabolas", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`taylorParabolaColor$$\
]}, {}], 
                    If[
                    TrueQ[
                    CalculateScan`PlotterScanner`Private`involuteTF$$], {
                    "involutes", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`involuteColor$$]}, \
{}], 
                    If[
                    TrueQ[CalculateScan`PlotterScanner`Private`evoluteTF$$], {
                    "evolute", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`evoluteColor$$]}, \
{}], 
                    If[
                    TrueQ[
                    CalculateScan`PlotterScanner`Private`offsetCurveTF$$], {
                    "offset curves", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`offsetCurveColor$$]},\
 {}], 
                    If[
                    TrueQ[
                    CalculateScan`PlotterScanner`Private`tiltedOffsetCurveTF$$\
], {"tilted offset curves", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveColor$$]}, {}], 
                    If[
                    TrueQ[
                    CalculateScan`PlotterScanner`Private`negativePedalCurveTF$\
$], {"contrapedal curves", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveColor$$]}, {}], 
                    If[
                    TrueQ[
                    CalculateScan`PlotterScanner`Private`contraPedalCurveTF$$]\
, {"normals", 
                    Style["\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`tiltedTangentColor$$]\
}, {}], 
                    If[
                    TrueQ[
                    CalculateScan`PlotterScanner`Private`dualCurveTF$$], {
                    "dual curves", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`dualCurveColor$$]}, \
{}], 
                    If[
                    TrueQ[
                    CalculateScan`PlotterScanner`Private`inverseCurveTF$$], {
                    "inverse curves", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`inverseCurveColor$$]}\
, {}], 
                    If[
                    TrueQ[
                    CalculateScan`PlotterScanner`Private`isopticCurveTF$$], {
                    "isoptic curves", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`isopticCurveColor$$]}\
, {}], 
                    If[
                    TrueQ[
                    CalculateScan`PlotterScanner`Private`orthotomicCurveTF$$],\
 {"orthotomic curves", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`orthotomicCurveColor$\
$]}, {}]}]; Column[{
                    If[
                    MatchQ[
                    CalculateScan`PlotterScanner`Private`originalCurvePlot$, 
                    Graphics[
                    GraphicsComplex[
                    Blank[], {}], 
                    BlankSequence[]]], 
                    Text[
                    Style[
                    "(original curve is not real\[Hyphen]valued\n over the \
specified range\n of the independent variable)", Gray]], 
                    Show[
                    Map[
                    Last, CalculateScan`PlotterScanner`Private`\
annotatedPlotList], PlotRange -> {
                    CalculateScan`PlotterScanner`Private`pRX$, 
                    CalculateScan`PlotterScanner`Private`pRY$}, ImageSize -> 
                    300, ImagePadding -> 5, AspectRatio -> 
                    CalculateScan`PlotterScanner`Private`ar$$, 
                    If[CalculateScan`PlotterScanner`Private`sa$$, 
                    Apply[
                    Sequence, {
                    Axes -> True, AxesOrigin -> {0, 0}, AxesStyle -> 
                    Lighter[Gray]}], 
                    Apply[Sequence, {}]], 
                    If[CalculateScan`PlotterScanner`Private`st$$, 
                    Apply[Sequence, {Ticks -> Automatic}], 
                    Apply[Sequence, {Ticks -> None}]]]], 
                    Grid[{
                    Map[Grid[
                    Map[Reverse, #], Alignment -> Left]& , 
                    
                    With[{CalculateScan`PlotterScanner`Private`\[Lambda]T = 
                    Max[
                    Floor[
                    Length[CalculateScan`PlotterScanner`Private`labelGrid]/2],
                     1]}, 
                    Partition[
                    CalculateScan`PlotterScanner`Private`labelGrid, 
                    CalculateScan`PlotterScanner`Private`\[Lambda]T, 
                    CalculateScan`PlotterScanner`Private`\[Lambda]T, 
                    1, {}]]]}, Dividers -> {False, False}, 
                    Spacings -> {4, Automatic}]}]]]], 
                  "Specifications" :> {{
                    CalculateUtilities`GraphicsUtilities`Private`more$$, {
                    False, True}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`x1$$, \
-0.6364908602602672, 
                    Subscript[
                    Style["x", Italic], "min"]}, -1.5393804002589986`, 
                    1.5393804002589986`, ImageSize -> Small, ControlPlacement -> 
                    1}, {{CalculateScan`PlotterScanner`Private`x2$$, 
                    0.9002851311895622, 
                    Subscript[
                    Style["x", Italic], "max"]}, -1.5393804002589986`, 
                    1.5393804002589986`, ImageSize -> Small, ControlPlacement -> 
                    2}, {{CalculateScan`PlotterScanner`Private`symmxQ$$, 
                    False, "symmetric"}, {True, False}, ControlPlacement -> 
                    3}, {{CalculateScan`PlotterScanner`Private`fy1$$, 
                    0.982793723247329, 
                    Subscript["y", "min"]}, 0, 1.5393804002589986`, ImageSize -> 
                    Small, ControlPlacement -> 4}, {{
                    CalculateScan`PlotterScanner`Private`fy2$$, 
                    0.982793723247329, 
                    Subscript["y", "max"]}, 0, 1.5393804002589986`, ImageSize -> 
                    Small, ControlPlacement -> 5}, {{
                    CalculateScan`PlotterScanner`Private`symmyQ$$, True, 
                    "symmetric"}, {True, False}, ControlPlacement -> 6}, {{
                    CalculateScan`PlotterScanner`Private`sqPRQ$$, False, 
                    Dynamic[
                    Style["same as horizontal-range", 
                    If[
                    CalculateScan`PlotterScanner`Private`symmxQ$$, Black, 
                    Gray]]]}, {True, False}, ImageSize -> Small, 
                    ControlPlacement -> 7}, {{
                    CalculateScan`PlotterScanner`Private`sa$$, False, 
                    "show axes"}, {True, False}, ImageSize -> Small, 
                    ControlPlacement -> 8}, {{
                    CalculateScan`PlotterScanner`Private`st$$, False, 
                    Dynamic[
                    Style["show ticks", 
                    If[
                    CalculateScan`PlotterScanner`Private`sa$$ === True, Black,
                     Gray]]]}, {True, False}, ImageSize -> Small, 
                    ControlPlacement -> 9}, {{
                    CalculateScan`PlotterScanner`Private`ar$$, 1, 
                    "aspect ratio"}, 
                    Rational[1, 4], 4, ImageSize -> Small, ControlPlacement -> 
                    10}, {{CalculateScan`PlotterScanner`Private`tangentTF$$, 
                    False, ""}, {True, False}, ControlPlacement -> 11}, {{
                    CalculateScan`PlotterScanner`Private`tangentCount$$, 60, 
                    ""}, 2, 360, 1, ImageSize -> Small, ControlPlacement -> 
                    12}, {{CalculateScan`PlotterScanner`Private`tangentLength$\
$, 0.07249114772190139, ""}, 0, 1.5393804002589986`, ImageSize -> Small, 
                    ControlPlacement -> 13}, {{
                    CalculateScan`PlotterScanner`Private`tangentThickness$$, \
-3., ""}, -4, -0.5, ImageSize -> Small, ControlPlacement -> 14}, {{
                    CalculateScan`PlotterScanner`Private`tangentColor$$, 
                    RGBColor[0.237736, 0.340215, 0.575113], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 15}, {{
                    CalculateScan`PlotterScanner`Private`tangentOpacity$$, 
                    0.8, ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 
                    16}, {{CalculateScan`PlotterScanner`Private`normalTF$$, 
                    True, ""}, {True, False}, ControlPlacement -> 17}, {{
                    CalculateScan`PlotterScanner`Private`normalCount$$, 120, 
                    ""}, 2, 360, 1, ImageSize -> Small, ControlPlacement -> 
                    18}, {{CalculateScan`PlotterScanner`Private`normalLength$$\
, 0.07249114772190139, ""}, 0, 1.5393804002589986`, ImageSize -> Small, 
                    ControlPlacement -> 19}, {{
                    CalculateScan`PlotterScanner`Private`normalThickness$$, \
-3., ""}, -4, -0.5, ImageSize -> Small, ControlPlacement -> 20}, {{
                    CalculateScan`PlotterScanner`Private`normalColor$$, 
                    RGBColor[0.237, 0.34, 0.575], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 21}, {{
                    CalculateScan`PlotterScanner`Private`normalOpacity$$, 0.8,
                     ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 
                    22}, {{CalculateScan`PlotterScanner`Private`\
tiltedTangentTF$$, False, ""}, {True, False}, ControlPlacement -> 23}, {{
                    CalculateScan`PlotterScanner`Private`tiltedTangentAngle$$,
                     Rational[1, 4] Pi, ""}, -Pi, Pi, ImageSize -> Small, 
                    ControlPlacement -> 24}, {{
                    CalculateScan`PlotterScanner`Private`tiltedTangentCount$$,
                     60, ""}, 2, 360, 1, ImageSize -> Small, ControlPlacement -> 
                    25}, {{CalculateScan`PlotterScanner`Private`\
tiltedTangentLength$$, 0.07249114772190139, ""}, 0, 1.5393804002589986`, 
                    ImageSize -> Small, ControlPlacement -> 26}, {{
                    CalculateScan`PlotterScanner`Private`\
tiltedTangentThickness$$, -3., ""}, -4, -0.5, ImageSize -> Small, 
                    ControlPlacement -> 27}, {{
                    CalculateScan`PlotterScanner`Private`tiltedTangentColor$$, 
                    RGBColor[
                    0.2622702, 0.40739780000000003`, 0.41955020000000004`], 
                    ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 28}, {{
                    CalculateScan`PlotterScanner`Private`tiltedTangentOpacity$\
$, 0.8, ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 29}, {{
                    CalculateScan`PlotterScanner`Private`osculatingCircleTF$$,
                     False, ""}, {True, False}, ControlPlacement -> 30}, {{
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleCount$$, 60, ""}, 2, 360, 1, ImageSize -> Small, 
                    ControlPlacement -> 31}, {{
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleThickness$$, -3., ""}, -4, -0.5, ImageSize -> Small, 
                    ControlPlacement -> 32}, {{
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleColor$$, 
                    RGBColor[0.2752426, 0.4446824, 0.33950440000000004`], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 33}, {{
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleOpacity$$, 0.8, ""}, 0, 1, ImageSize -> Small, 
                    ControlPlacement -> 34}, {{
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleRadiiTF$$, False, ""}, {True, False}, ImageSize -> Small, 
                    ControlPlacement -> 35}, {{
                    CalculateScan`PlotterScanner`Private`taylorParabolaTF$$, 
                    False, ""}, {True, False}, ControlPlacement -> 36}, {{
                    CalculateScan`PlotterScanner`Private`taylorParabolaCount$$\
, 36, ""}, 2, 120, 1, ImageSize -> Small, ControlPlacement -> 37}, {{
                    CalculateScan`PlotterScanner`Private`\
taylorParabolaThickness$$, -3., ""}, -4, -0.5, ImageSize -> Small, 
                    ControlPlacement -> 38}, {{
                    CalculateScan`PlotterScanner`Private`taylorParabolaColor$$\
, 
                    RGBColor[0.7189495000000001, 0.719797, 0.283877], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 39}, {{
                    CalculateScan`PlotterScanner`Private`\
taylorParabolaOpacity$$, 0.8, ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 
                    40}, {{CalculateScan`PlotterScanner`Private`involuteTF$$, 
                    False, ""}, {True, False}, ControlPlacement -> 41}, {{
                    CalculateScan`PlotterScanner`Private`involuteCount$$, 60, 
                    ""}, 1, 120, 1, ImageSize -> Small, ControlPlacement -> 
                    42}, {{CalculateScan`PlotterScanner`Private`\
involuteThickness$$, -3., ""}, -4, -0.5, ImageSize -> Small, ControlPlacement -> 
                    43}, {{CalculateScan`PlotterScanner`Private`involuteColor$\
$, 
                    RGBColor[0.49978279999999997`, 0.6025278, 0.2508104], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 44}, {{
                    CalculateScan`PlotterScanner`Private`involuteOpacity$$, 
                    0.8, ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 
                    45}, {{CalculateScan`PlotterScanner`Private`\
involutesLeftTF$$, False, ""}, {True, False}, ControlPlacement -> 46}, {{
                    CalculateScan`PlotterScanner`Private`involutesRightTF$$, 
                    True, ""}, {True, False}, ControlPlacement -> 47}, {{
                    CalculateScan`PlotterScanner`Private`evoluteTF$$, False, 
                    ""}, {True, False}, ControlPlacement -> 48}, {{
                    CalculateScan`PlotterScanner`Private`evoluteThickness$$, \
-3., ""}, -4, -0.5, ImageSize -> Small, ControlPlacement -> 49}, {{
                    CalculateScan`PlotterScanner`Private`evoluteColor$$, 
                    RGBColor[0.813033, 0.766292, 0.303458], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 50}, {{
                    CalculateScan`PlotterScanner`Private`evoluteOpacity$$, 
                    0.8, ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 
                    51}, {{CalculateScan`PlotterScanner`Private`offsetCurveTF$\
$, False, ""}, {True, False}, ControlPlacement -> 52}, {{
                    CalculateScan`PlotterScanner`Private`offsetCurveDistance$$\
, 0.07249114772190139, ""}, 0, 1.5393804002589986`, ImageSize -> Small, 
                    ControlPlacement -> 53}, {{
                    CalculateScan`PlotterScanner`Private`offsetCurveCount$$, 
                    12, ""}, 1, 60, 1, ImageSize -> Small, ControlPlacement -> 
                    54}, {{CalculateScan`PlotterScanner`Private`\
offsetCurveThickness$$, -3., ""}, -4, -0.5, ImageSize -> Small, 
                    ControlPlacement -> 55}, {{
                    CalculateScan`PlotterScanner`Private`offsetCurveColor$$, 
                    RGBColor[0.877875, 0.731045, 0.326896], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 56}, {{
                    CalculateScan`PlotterScanner`Private`offsetCurveOpacity$$,
                     0.8, ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 
                    57}, {{
                    CalculateScan`PlotterScanner`Private`tiltedOffsetCurveTF$$\
, False, ""}, {True, False}, ControlPlacement -> 58}, {{
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveAngle$$, Rational[1, 4] Pi, ""}, -Pi, Pi, ImageSize -> Small,
                     ControlPlacement -> 59}, {{
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveDistance$$, 0.07249114772190139, ""}, 0, 1.5393804002589986`,
                     ImageSize -> Small, ControlPlacement -> 60}, {{
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveCount$$, 12, ""}, 1, 60, 1, ImageSize -> Small, 
                    ControlPlacement -> 61}, {{
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveThickness$$, -3., ""}, -4, -0.5, ImageSize -> Small, 
                    ControlPlacement -> 62}, {{
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveColor$$, 
                    RGBColor[0.49978279999999997`, 0.6025278, 0.2508104], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 63}, {{
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveOpacity$$, 0.8, ""}, 0, 1, ImageSize -> Small, 
                    ControlPlacement -> 64}, {{
                    CalculateScan`PlotterScanner`Private`pedalCurveTF$$, 
                    False, ""}, {True, False}, ControlPlacement -> 65}, {{
                    CalculateScan`PlotterScanner`Private`\
pedalCurveCountFactor$$, 0.3, ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 
                    66}, {{CalculateScan`PlotterScanner`Private`\
pedalCurveThickness$$, -3., ""}, -4, -0.5, ImageSize -> Small, 
                    ControlPlacement -> 67}, {{
                    CalculateScan`PlotterScanner`Private`pedalCurveColor$$, 
                    RGBColor[0.32894650000000003`, 0.5006225, 0.2625337], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 68}, {{
                    CalculateScan`PlotterScanner`Private`pedalCurveOpacity$$, 
                    0.8, ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 
                    69}, {{CalculateScan`PlotterScanner`Private`\
pedalCurvePoints$$, "curve", ""}, {"grid", "curve"}, ImageSize -> Small, 
                    ControlPlacement -> 70}, {{
                    CalculateScan`PlotterScanner`Private`negativePedalCurveTF$\
$, False, ""}, {True, False}, ControlPlacement -> 71}, {{
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveCountFactor$$, 0.3, ""}, 0, 1, ImageSize -> Small, 
                    ControlPlacement -> 72}, {{
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveThickness$$, -3., ""}, -4, -0.5, ImageSize -> Small, 
                    ControlPlacement -> 73}, {{
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveColor$$, 
                    RGBColor[0.7464574, 0.2952580000000001, 0.2454606], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 74}, {{
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveOpacity$$, 0.8, ""}, 0, 1, ImageSize -> Small, 
                    ControlPlacement -> 75}, {{
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePoints$$, "curve", ""}, {"curve", "grid"}, ImageSize -> 
                    Small, ControlPlacement -> 76}, {{
                    CalculateScan`PlotterScanner`Private`contraPedalCurveTF$$,
                     False, ""}, {True, False}, ControlPlacement -> 77}, {{
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveCountFactor$$, 0.3, ""}, 0, 1, ImageSize -> Small, 
                    ControlPlacement -> 78}, {{
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveThickness$$, -3., ""}, -4, -0.5, ImageSize -> Small, 
                    ControlPlacement -> 79}, {{
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveColor$$, 
                    RGBColor[0.7464574, 0.2952580000000001, 0.2454606], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 80}, {{
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveOpacity$$, 0.8, ""}, 0, 1, ImageSize -> Small, 
                    ControlPlacement -> 81}, {{
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurvePoints$$, "curve", ""}, {"curve", "grid"}, ImageSize -> Small,
                     ControlPlacement -> 82}, {{
                    CalculateScan`PlotterScanner`Private`dualCurveTF$$, False,
                     ""}, {True, False}, ControlPlacement -> 83}, {{
                    CalculateScan`PlotterScanner`Private`dualCurveCountFactor$\
$, 0.3, ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 84}, {{
                    CalculateScan`PlotterScanner`Private`dualCurveThickness$$,\
 -3., ""}, -4, -0.5, ImageSize -> Small, ControlPlacement -> 85}, {{
                    CalculateScan`PlotterScanner`Private`dualCurveColor$$, 
                    RGBColor[0.2860602, 0.4663408, 0.29410879999999995`], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 86}, {{
                    CalculateScan`PlotterScanner`Private`dualCurveOpacity$$, 
                    0.8, ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 
                    87}, {{CalculateScan`PlotterScanner`Private`\
dualPedalCurvePoints$$, "curve", ""}, {"curve", "grid"}, ImageSize -> Small, 
                    ControlPlacement -> 88}, {{
                    CalculateScan`PlotterScanner`Private`inverseCurveTF$$, 
                    False, ""}, {True, False}, ControlPlacement -> 89}, {{
                    CalculateScan`PlotterScanner`Private`\
inverseCurveCountFactor$$, 0.3, ""}, 0, 1, ImageSize -> Small, 
                    ControlPlacement -> 90}, {{
                    CalculateScan`PlotterScanner`Private`\
inverseCurveThickness$$, -3., ""}, -4, -0.5, ImageSize -> Small, 
                    ControlPlacement -> 91}, {{
                    CalculateScan`PlotterScanner`Private`inverseCurveColor$$, 
                    RGBColor[0.2860602, 0.4663408, 0.29410879999999995`], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 92}, {{
                    CalculateScan`PlotterScanner`Private`inverseCurveOpacity$$\
, 0.8, ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 93}, {{
                    CalculateScan`PlotterScanner`Private`inverseCurvePoints$$,
                     "grid", ""}, {"curve", "grid"}, ImageSize -> Small, 
                    ControlPlacement -> 94}, {{
                    CalculateScan`PlotterScanner`Private`\
inverseCurveCircleRadiusFactor$$, 0.4636476090008061, ""}, 0, 1, ImageSize -> 
                    Small, ControlPlacement -> 95}, {{
                    CalculateScan`PlotterScanner`Private`isopticCurveTF$$, 
                    False, ""}, {True, False}, ControlPlacement -> 96}, {{
                    CalculateScan`PlotterScanner`Private`isopticCurveAngle$$, 
                    Rational[1, 3] Pi, ""}, 0, Pi, ImageSize -> Small, 
                    ControlPlacement -> 97}, {{
                    CalculateScan`PlotterScanner`Private`\
isopticCurveThickness$$, -3., ""}, -4, -0.5, ImageSize -> Small, 
                    ControlPlacement -> 98}, {{
                    CalculateScan`PlotterScanner`Private`isopticCurveColor$$, 
                    RGBColor[
                    0.8519382, 0.7451437999999999, 0.31752080000000005`], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 99}, {{
                    CalculateScan`PlotterScanner`Private`isopticCurveOpacity$$\
, 0.8, ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 100}, {{
                    CalculateScan`PlotterScanner`Private`orthotomicCurveTF$$, 
                    False, ""}, {True, False}, ControlPlacement -> 101}, {{
                    CalculateScan`PlotterScanner`Private`orthotomicCurveAngle$\
$, Rational[1, 3] Pi, ""}, 0, Pi, ImageSize -> Small, ControlPlacement -> 
                    102}, {{
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurveCountFactor$$, 0.3, ""}, 0, 1, ImageSize -> Small, 
                    ControlPlacement -> 103}, {{
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurveThickness$$, -3., ""}, -4, -0.5, ImageSize -> Small, 
                    ControlPlacement -> 104}, {{
                    CalculateScan`PlotterScanner`Private`orthotomicCurveColor$\
$, 
                    RGBColor[
                    0.8519382, 0.7451437999999999, 0.31752080000000005`], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 105}, {{
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurveOpacity$$, 0.8, ""}, 0, 1, ImageSize -> Small, 
                    ControlPlacement -> 106}, {{
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurvePoints$$, "curve", ""}, {"curve", "grid"}, ImageSize -> Small, 
                    ControlPlacement -> 107}, 
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Row[{
                    Invisible[
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]]], 
                    " ", 
                    Column[{"Horizontal plot range:", 
                    Row[{
                    Manipulate`Place[1], "  ", 
                    Manipulate`Place[2], "  ", 
                    Manipulate`Place[3]}]}]}], 
                    PaneSelector[{True -> Grid[{{
                    Button[
                    Row[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]], 
                    " "}], CalculateUtilities`GraphicsUtilities`Private`more$$\
 = False, Appearance -> None, BaseStyle -> {}], 
                    Button[
                    "Fewer controls", 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    False, Appearance -> None, BaseStyle -> {}]}, {"", 
                    Item[
                    Column[{
                    Column[{"Vertical plot range:", 
                    Row[{
                    Manipulate`Place[4], "  ", 
                    Manipulate`Place[5], "  ", 
                    Manipulate`Place[6]}], 
                    Manipulate`Place[7]}], 
                    Column[{
                    Row[{
                    Manipulate`Place[8], "  ", 
                    Manipulate`Place[9]}], 
                    Row[{
                    Manipulate`Place[10], "   settings: ", 
                    Button[
                    "1", CalculateScan`PlotterScanner`Private`ar$$ = 1, 
                    ImageSize -> Small, Appearance -> "Palette", 
                    BaseStyle -> {}], "  ", 
                    Button["unscaled axes", 
                    (If[
                    1/4 <= # <= 4, 
                    CalculateScan`PlotterScanner`Private`ar$$ = #]& )[Abs[
                    Apply[
                    Subtract, CalculateScan`PlotterScanner`Private`pRY]]/Abs[
                    Apply[
                    Subtract, CalculateScan`PlotterScanner`Private`pRX]]], 
                    ImageSize -> Small, Appearance -> "Palette", 
                    BaseStyle -> {}]}]}], 
                    TabView[{Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`tangentTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`tangentColor$$, 
                    Bold], " "]], 
                    Tooltip[" tangents             ", 
                    Style[" family of tangents at points along the curve ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show tangents", 
                    Manipulate`Place[11]}, {"tangent count", 
                    Manipulate`Place[12]}, {"tangent length", 
                    Manipulate`Place[13]}, {"tangent thickness", 
                    Manipulate`Place[14]}, {"tangent color", 
                    Manipulate`Place[15]}, {"tangent opacity", 
                    Manipulate`Place[16]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`normalTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`normalColor$$, Bold],
                     " "]], 
                    Tooltip[" normals              ", 
                    Style[" family of normals at points along the curve ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show normals", 
                    Manipulate`Place[17]}, {"normal count", 
                    Manipulate`Place[18]}, {"normal length", 
                    Manipulate`Place[19]}, {"normal thickness", 
                    Manipulate`Place[20]}, {"normal color", 
                    Manipulate`Place[21]}, {"normal opacity", 
                    Manipulate`Place[22]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`tiltedTangentTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`tiltedTangentColor$$,
                     Bold], " "]], 
                    Tooltip[" tilted tangents      ", 
                    Style[
                    " family of tilted tangents at points along the curve ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show tilted tangents", 
                    Manipulate`Place[23]}, {"tilted tangent angle", 
                    Manipulate`Place[24]}, {"tilted tangent count", 
                    Manipulate`Place[25]}, {"tilted tangent length", 
                    Manipulate`Place[26]}, {"tilted tangent thickness", 
                    Manipulate`Place[27]}, {"tilted tangent color", 
                    Manipulate`Place[28]}, {"tilted tangent opacity", 
                    Manipulate`Place[29]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`osculatingCircleTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleColor$$, Bold], " "]], 
                    Tooltip[" osculating circles   ", 
                    Style[
                    " family of osculating circles (circles that are tangent \
to the curve) at points along the curve", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> Column[{
                    Grid[{{"show osculating circles", 
                    Manipulate`Place[30]}, {"osculating circle count", 
                    Manipulate`Place[31]}, {"osculating circle thickness", 
                    Manipulate`Place[32]}, {"osculating circle color", 
                    Manipulate`Place[33]}, {"osculating circle opacity", 
                    Manipulate`Place[34]}, {"show circle radii", 
                    Manipulate`Place[35]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    True}}], 
                    Dynamic[
                    Style[
                    If[
                    And[
                    CalculateScan`PlotterScanner`Private`osculatingCircleTF$$, 
                    Not[
                    0.98 < CalculateScan`PlotterScanner`Private`ar$$ < 1.02]],
                     "(note than circles appear as ellipses for unequally\n\
scaled horizontal and vertical axes)", ""]], 
                    RGBColor[
                    0.6666666666666666, 0.6666666666666666, 
                    0.6666666666666666]]}, Alignment -> Left], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`taylorParabolaTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`taylorParabolaColor$$\
, Bold], " "]], 
                    Tooltip[" Taylor parabolas     ", 
                    Style[" family of second order Taylor approximations", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> Column[{
                    Grid[{{"show Taylor parabolas", 
                    Manipulate`Place[36]}, {"Taylor parabola count", 
                    Manipulate`Place[37]}, {"Taylor parabola thickness", 
                    Manipulate`Place[38]}, {"Taylor parabola color", 
                    Manipulate`Place[39]}, {"Taylor parabola opacity", 
                    Manipulate`Place[40]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    True}}]}, Alignment -> Left], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`involuteTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`involuteColor$$, 
                    Bold], " "]], 
                    Tooltip[" involutes            ", 
                    Style[
                    " family of involutes (curves traced out by strings \
unwound from the curve) of the curve", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show involutes", 
                    Manipulate`Place[41]}, {"involute count", 
                    Manipulate`Place[42]}, {"involute thickness", 
                    Manipulate`Place[43]}, {"involute color", 
                    Manipulate`Place[44]}, {"involute opacity", 
                    Manipulate`Place[45]}, {"directions", 
                    Row[{"\[DoubleLongLeftArrow]", 
                    Manipulate`Place[46], "  \[DoubleLongRightArrow]", 
                    Manipulate`Place[47]}]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    True}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`evoluteTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`evoluteColor$$, 
                    Bold], " "]], 
                    Tooltip[" evolute              ", 
                    Style[
                    " the evolute of a given curve (curve of the centers of \
the osculating circles))", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show evolute", 
                    Manipulate`Place[48]}, {"evolute thickness", 
                    Manipulate`Place[49]}, {"evolute color", 
                    Manipulate`Place[50]}, {"evolute opacity", 
                    Manipulate`Place[51]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`offsetCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`offsetCurveColor$$, 
                    Bold], " "]], 
                    Tooltip[" offset curves        ", 
                    Style[
                    " family of offset curves (curves shifted a fixed \
distance perpendicular to each point of the original curve) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show offset curves", 
                    Manipulate`Place[52]}, {"offset curve distance", 
                    Manipulate`Place[53]}, {"offset curve count", 
                    Manipulate`Place[54]}, {"offset curve thickness", 
                    Manipulate`Place[55]}, {"offset curve color", 
                    Manipulate`Place[56]}, {"offset curve opacity", 
                    Manipulate`Place[57]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`tiltedOffsetCurveTF$$\
, 
                    Style["\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveColor$$, Bold], " "]], 
                    Tooltip[" tilted offset curves ", 
                    Style[
                    " family of tilted offset curves (curves shifted a fixed \
distance in a direction with a fixed angle                                    \
   to the local normal to each point of the original curve) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show tilted offset curves", 
                    Manipulate`Place[58]}, {"tilted offset curve angle", 
                    Manipulate`Place[59]}, {"tilted offset curve distance", 
                    Manipulate`Place[60]}, {"tilted offset curve count", 
                    Manipulate`Place[61]}, {"tilted offset curve thickness", 
                    Manipulate`Place[62]}, {"tilted offset curve color", 
                    Manipulate`Place[63]}, {"tilted offset curve opacity", 
                    Manipulate`Place[64]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`pedalCurveTF$$, 
                    Style["\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`pedalCurveColor$$, 
                    Bold], " "]], 
                    Tooltip[" pedal curves         ", 
                    Style[
                    " family of pedal curves (curves on the tangents of the \
given curve perpendicular to a given point) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show pedal curves", 
                    Manipulate`Place[65]}, {"pedal curve count", 
                    Manipulate`Place[66]}, {"pedal curve thickness", 
                    Manipulate`Place[67]}, {"pedal curve color", 
                    Manipulate`Place[68]}, {"pedal curve opacity", 
                    Manipulate`Place[69]}, {"pedal points", 
                    Manipulate`Place[70]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    True}}], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`negativePedalCurveTF$\
$, 
                    Style["\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveColor$$, Bold], " "]], 
                    Tooltip[" negative pedal curves", 
                    Style[
                    " family of negative pedal curves (envelope curves of \
lines perpendicular to the given curve and a given point) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show negative pedal curves", 
                    Manipulate`Place[71]}, {"negative pedal curve count", 
                    Manipulate`Place[72]}, {"negative pedal curve thickness", 
                    Manipulate`Place[73]}, {"negative pedal curve color", 
                    Manipulate`Place[74]}, {"negative pedal curve opacity", 
                    Manipulate`Place[75]}, {"negative pedal points", 
                    Manipulate`Place[76]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`contraPedalCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveColor$$, Bold], " "]], 
                    Tooltip[" contrapedal curves   ", 
                    Style[
                    " family of contrapedal curves (curves on the normals of \
the given curve perpendicular to a given point) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show contrapedal curves", 
                    Manipulate`Place[77]}, {"contrapedal curve count", 
                    Manipulate`Place[78]}, {"contrapedal curve thickness", 
                    Manipulate`Place[79]}, {"contrapedal curve color", 
                    Manipulate`Place[80]}, {"contrapedal curve opacity", 
                    Manipulate`Place[81]}, {"contrapedal pedal points", 
                    Manipulate`Place[82]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`dualCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`dualCurveColor$$, 
                    Bold], " "]], 
                    Tooltip[" dual curves          ", 
                    Style[
                    " dual curve of the given curve (the dual curbe maps \
inflection points to cusps) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show dual curves", 
                    Manipulate`Place[83]}, {"dual curve count", 
                    Manipulate`Place[84]}, {"dual curve thickness", 
                    Manipulate`Place[85]}, {"dual curve color", 
                    Manipulate`Place[86]}, {"dual curve opacity", 
                    Manipulate`Place[87]}, {"dual curve points", 
                    Manipulate`Place[88]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`inverseCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`inverseCurveColor$$, 
                    Bold], " "]], 
                    Tooltip[" inverse curves       ", 
                    Style[
                    " inverse curves (curves resulting from carrying of an \
inversion on circles) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show inverse curves", 
                    Manipulate`Place[89]}, {"inverse curve count", 
                    Manipulate`Place[90]}, {"inverse curve thickness", 
                    Manipulate`Place[91]}, {"inverse curve color", 
                    Manipulate`Place[92]}, {"inverse curve opacity", 
                    Manipulate`Place[93]}, {"inversion curve points", 
                    Manipulate`Place[94]}, {"inversion circle radius", 
                    Manipulate`Place[95]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`isopticCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`isopticCurveColor$$, 
                    Bold], " "]], 
                    Tooltip[" isoptic curves       ", 
                    Style[
                    " inverse curves (points on isoptic curves have two \
tangents with the given curve and the two tangents meet with the specified \
angle)) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> Column[{
                    Grid[{{"show isoptic curves", 
                    Manipulate`Place[96]}, {"isoptic curve angle", 
                    Manipulate`Place[97]}, {"isoptic curve thickness", 
                    Manipulate`Place[98]}, {"isoptic curve color", 
                    Manipulate`Place[99]}, {"isoptic curve opacity", 
                    Manipulate`Place[100]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], 
                    Dynamic[
                    Style[
                    If[
                    TrueQ[
                    And[
                    CalculateScan`PlotterScanner`Private`isopticCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`x1x2SCPCurves === \
{}]], "(note than the set of isoptic curves for a given angle can be empty)", 
                    ""]], 
                    RGBColor[
                    0.6666666666666666, 0.6666666666666666, 
                    0.6666666666666666]]}, Alignment -> Left], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`orthotomicCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`orthotomicCurveColor$\
$, Bold], " "]], 
                    Tooltip[" orthotomic curves    ", 
                    Style[
                    " orthotomic curves (points of reflections of a given \
point on curve tangents)) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show orthotomic curves", 
                    Manipulate`Place[101]}, {"orthotomic curve angle", 
                    Manipulate`Place[102]}, {"orthotomic curve count", 
                    Manipulate`Place[103]}, {"orthotomic curve thickness", 
                    Manipulate`Place[104]}, {"orthotomic curve color", 
                    Manipulate`Place[105]}, {"orthotomic curve opacity", 
                    Manipulate`Place[106]}, {"orthotomic curve points", 
                    Manipulate`Place[107]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}]}, 2, ImageSize -> {All, Automatic}, 
                    ControlPlacement -> Left]}, 
                    Dividers -> {None, {False, True, True, True}}, Spacings -> 
                    1], ItemSize -> Scaled[1], 
                    Frame -> {None, None, True, None}]}}, FrameStyle -> 
                    GrayLevel[0.9], Alignment -> Left, Spacings -> {0, 0.8}], 
                    False -> Button[
                    Row[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]], 
                    " ", "More controls"}], 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    True, Appearance -> None, BaseStyle -> {}]}, 
                    Dynamic[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], 
                    ImageSize -> Automatic]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]], {{
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleLastParamaters$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`osculatingCircles$$, \
{}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
taylorParabolaLastParamaters$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`taylorParabolas$$, \
{}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
offsetCurveLastParamaters$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
offsetCurvePlotCurves$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveLastParamaters$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurvePlotCurves$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
pedalCurveLastParamaters$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`pedalCurvePlotCurves$\
$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveLastParamaters$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePlotCurves$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveLastParamaters$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurvePlotCurves$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
dualCurveLastParamaters$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`dualCurvePlotCurves$$\
, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
inverseLastParamaters$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
inverseCurvePlotCurves$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
orthotomicLastParamaters$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurvePlotCurves$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
isopticLastParamaters$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
isopticCurvePlotCurves$$, {}}, ControlType -> None}}, 
                  "Options" :> {
                   ControlPlacement -> Bottom, 
                    FrameMargins -> {{0, 0}, {0, 10}}, Paneled -> False, 
                    AppearanceElements -> {}, 
                    LabelStyle -> {
                    "DialogStyle", FontColor -> GrayLevel[0.25]}}, 
                  "DefaultOptions" :> {}], SingleEvaluation -> True], 
                Initialization :> ({{
                   Language`ExtendedDefinition[
                    CalculateScan`PlotterScanner`Private`addTangents] = 
                    Uncompress[
                    "6:eJzNV7tz0zAYT9ryLDCwMLNwcCzJsXBsaUIO7pKQ1oGJIUospzoUybU\
k2vLPgz4/4sh2sGR3aAZdJH/\
6fQ99z9crfhF0O52OeKWXCWIbhTZ4OcIBYUQSziZEyOAICE70cqEoTsgf6+ULp/\
6YR1vR05shomtFkcTeGrHlnHIpcQT/GY6W84j81p+\
WyPcXmgdmUgRPMtAyCwHfvl2zH4gqLIJODaWnVhaUIPH30ILwqf4z4jvu3TLpaUo6whTdYj8hOU0tM\
kegOQvgSjPLHJU5PtJLCize2mIGo16i6AO9nFHEfrUC6xfBjv8v5xtb6JtaKd9ZQ00Ju0s0VC+\
btZp3KBgPZerDLyBSQohUkTleN+NyrghO3+WhXqbch/A1XR/Yi5fAl29Drpj/+SaMsBAaMLkJj+\
xhKd7byvbzU+/DWT+PiUS6OJg8iNYFoXLANloSA9/ajEE19DPQCLONvByjteSRiW7t5iv/qhr/\
OTwb8UmE13CIaEPxJ3l4z6kSjs54lL3tgmyxIH/\
1zzE4mkk9rUpKu103wxxy0cxRYoEIc75cIZVpnXbwrRQzLP3R9nLIia4BA+\
aPMlcTuV5DJPYr0vCSh8kOltme/\
miVxVf1k7kk55iBS9FxAT82nswhCzhHHHAacSefjzWHnDXTXQ6i5E/\
BpgQInO3Td7HPScNXc8sKrbLQfUhogDDn1zhyKMdJfqjNa7t6nXSIWGf+Q+\
ftbsehABBfg1wpD23xuVP5iq+NERV4v3VlOA+\
1QRjS27yNHysW55kq8WHnaVaJpxsPXUVgHsXkrRKf0XsXWDTRqVaBgxXEUOpeGMIcWqCPm1kMN9Amw\
cyGpAUx9Dx6FESKysPDkDkXFqeg+\
BCES5vUZhNRxaSRsTV7StIpmabUGVaYr9zdxZ8WkcIFk4BzTXWh0lNy/RQ5kDIiKyWLpP8A4+pdmw=\
="], Language`ExtendedDefinition[
                    CalculateScan`PlotterScanner`Private`addOsculatingCircles]\
 = Uncompress[
                    "6:eJzNVktT2zAQzoNHKXDhwrkXpr0VpheOadIOBwJu0vYcOZaDporksSQ\
ev57uyo4T22EskTBDDjt6fN799Cna3U+\
hHMXtVqulTsFcEzEzZEYnAxozwTST4popHXcQsANmZDjN4B/AXEke/ZTpXF3CpE/\
41HCi6XhKxCTgUmua4ljQdBKk7B62JiSKbpWFMTHrs3TKqYoPFt7rsRTu3T6Iv4QbQLYakGMTOiCR+\
p/EAfgRBgNZRG/XoYc5dEA5eaJRBjnMpQkISiDiLi5uJlG3HnofTB5BfXZ1Hg++ZifeBfOdE/\
FvI2fn23R2UXXWcOgzV9ePjSy/OLsaMrFNb6SZm/Mxa8Tai+kvw2gu4B6YoYzwGa/\
5559gLDlPpBHRj8ckpUpBCsj28DbGVKtvrnymVMCq6oloRCLGMi+\
79mu1eE1obpYPq38nk9WN4pPfJATGnTpjnAXcqPKez3/DhvN5QD7Ou8UB2JyqdQcoNtkz/\
LzZnHuwYei8LNvKEhIJ5ANN35ZDZwsBL3wCLmXFy+iFqqr7OgnKkDcl+\
GLolel7ua5MsG6dhMVZqZcm3nnlk/RLx57ptnKzJXk3cmXP7FlJyiJ6pPpM4BfyoZ0Vyd/\
WgqynoYR7rxcZrJck/MnWj7wpeXUhKPVRlaRk+y4sfzcO/dkRDLD/\
JNoBfAwDaGuJ4S5o7BGHUP6gGW7uEXtapyw0ugr9D28ERDU="], 
                    Language`ExtendedDefinition[
                    CalculateScan`PlotterScanner`Private`\
addOsculatingCircleRadii] = 
                    Uncompress[
                    "6:eJzNVktTwjAQ5uH7cfHi2YujN/\
XojAcEHQ8iFdQzod1CxpAwTSL463XTQkELNhGcsYedPL5++\
2WTbPaoI5phsVAoyEM094R3NelCuwYh5VRRwe+\
pVGHJANbQNDWDBL6F5k6w4FZEfXmFnSphvmZEQcsnvO0xoRREps0hansRfcOpNgmChoxhlHerNPIZN\
ElAabg98ZD1J81cY8hfCNMgw0IOsqU7Fkgj/\
3lgAdzBRk2k3otZ6O4YWgNG3iFIILvj8HjEhIGHZTO4fJjKWfebaMZe5Imtg7B2lqx6Hc01I/\
x1KbLzVZJdfCfLWfSxLfUoV+WpNVWd8lWykXxt1svMCCtOuo+awjiAG2jqIjDXec7pPzC+\
RH8gNA9uRoMIpMRUkMyZ3WiBkpe2epTQfs8TlCtZ4UEVOGJkwrUec8jZe1XtiUHSM+\
ZhinsiHRRbyoqd9FwOQuzA5ba4kKeqPKblP9VYTsNK+yDnhTWdpB/\
4Oas5d1BDDfnXsM0MGSGeGEL0txpKK3B44eIwDuvaL0+\
HW6pyTEWlBYfDbMxSVPGaHbPs1y1xSINJgH9IGNPEGOfJ5M0HwhaOL/\
f3TOnAYSXpMy1SzDvxYFHM7GHDFGxEWYD3sYF1INHMBm0Kqjq+E1g95hdUFaUi2tHqO/QT8dsTHw==\
"], Language`ExtendedDefinition[
                    CalculateScan`PlotterScanner`Private`\
tangentIntersectionPoint] = 
                    Uncompress[
                    "6:eJztVjtPwzAQTksRj8LMzAQj7c4ARAikAlYLzHFSp7JwbeQHhV8P5yY\
FmhTFVghCggyns+7TffdUbj8Ww7QVBIHaAzHAfGLwhEQhSSmnmgo+\
oEqnbQvogBgaRjL4JogLwcbnQk7VMTzOMEsMw5qMEswjxITWRFqdExkhSZ/\
AFGkgIFxfcrApklgCJCjX6daCocynrO1mxu8xM0SlQQVyZGIHpA3/\
7tEBuA1KKN7ZW2VoN4eGhOEXMs4g3bw8CNsy8AxZv0ztMv0GiJxFHbgSPPeypNdBnDLMH+r46q/\
09XWUh66e0/CoMkwPZ6tzXo7TGm/pFDrdWRgRM6pgpK/\
wZY32ScarP0167xfyaTSwnpf3tXKhvRJrMrpPZUNiRuTHAM1npNnCfMcEeiWbUdRL0W/\
kCxtYeP7A3P2RdV9uat0p/F/P37Ce82PF/\
hivHY6aHVDs4Ya1A3gXFLgHsWEuaHtYXcEfBa7I6sPqRGtJY6OL0DcbrUfm"], 
                    Language`ExtendedDefinition[
                    CalculateScan`PlotterScanner`Private`addTaylorParabolas] = 
                    Uncompress[
                    "6:eJzFVslOwzAQ7cK+\
XLhw5oLggqAXzkCLQGohUODcSeMgC9euvHT5ehg3aWhTpNgtiB5GTvzy5s14PJ2jUDzH5VKppA7RNI\
G/G3gnnTqJKaeaCt6kSscVC1hD82wYSeBbaO4Ei26F7KlLfLgB1jUMNGl3gXcCJrQm0q45kZ1A0gFu\
dSCKXmDMhAxAQigYqHh7yr3oSdm9xyF/A2aIiksFyLYJHZBW+\
GvfAbiDi7rIvJcXobsptE4YjEmUQHbTxARgE8Djqn25SoKqi4430aT86sSVOq6fJ/\
Guo7lmwD9WIrv4TbJanqwg6GNX6lGhylNnqhblv8kGxdqcw1wQVp4+PhlK0gRuoGmJyF7hH+r+\
wPoSvb4wPGqM+pIohdc/2bOn0SZanbnq6WfVW5kKeYEQHWfnGjCT3imfAnbPyHjGM+\
0Rf18X3r6mYflU57xI+ok/H7/V1WKsLZXPQAyJ/K+\
Qqf08p2XybkIUr80WtgetXxvwvOa5SpzP3CpUSfL8Oth86jxaTJLgrOJuQM3HIvT3ZNAY4J8mfrVMx\
6gud4SjPz3CrJ9O2msqjyfTxD2fDEvj3PxgG/mDw5yxhws7RYF2AO/\
jAoczMMwFbdW1sJHjSFc861xpLWlodB76BcuBCOg="], 
                    Language`ExtendedDefinition[
                    CalculateScan`PlotterScanner`Private`getSplineSegments] = 
                    Uncompress[
                    "6:eJytVcly00AQlZNANrhwyZlLDvkA7uCFUGUTEQFnt6UeMZXxjJglhK+\
Hbo2tJJYrlirRoWuWN728XvR+Ya7FIEkSd0ZiCroMUOJ8hEJq6aXRU+\
m82GPAAYnroDDCj0hcGlVMjF26D7QZgsqDAo9ZDnqeKuM9Wl5rtPPUylu6mpfos0pJjRmWS9TeieO1\
6rYhx3dXf/RPUAGdSHYgs7DogGS/f1QdgCe0GJnG+qANPV1BR6jgLxYRcrriJQWOX8fDZ/\
DzwK7GaPeQxEq9O++qWcVgX5H4pEDfRFWvScxMwVndwsU7Vm6WlQm6GN9VFp2jioh3+\
8w4enfR1YHKOOnEwbp2UtpyffWJYLB2eXyXY/\
UgYbXLg0fxxUQiqKfP168l7zYqgN9cIhSuXk1AORQctmPYFxHRfJXBEr/1ZSJpO/+\
GnYz5HwZ7i324aZIyg6ql6D7ZGSrM/SP0fT9Pgs59k2GuZCpt9DgERx3QkPMdbnq51hCdESIS/\
bKZrF8f111hfV1VEcqNMlHcKTombku2d5DQHg6pCm5LSPIffbtR9VHPSmnImqIu/\
a8e1Mu9hux2aFwkny0S0I5/B1Cbdra5v9/uEib5a4d5yub4ZwG+A/htXXsCguqC5thmNJzoz7V7pn/\
03spF8JvQ/5sGx/A="]}, 
                   ReleaseHold[
                    Uncompress[
                    "6:eJztVm1v0zAQbinv7/\
APkPiMtDHBviABHYxJA0pSvvcWO42Fawfb2QZ/Hnx2kzRrVymmAzSlH071pXl899xz13tyJKO03+\
v19FVrPkhO0ht4emzNUM5yWQjy7jRXVGsmRXoFn922JqZmj3L4QYn3XbfmvVQzMP78Ct8HnhQcDP1q\
GGeGUT3ZV5BnLNG1Z6TYsf3JhMsEOPtJn2693N3efbHjYTCWERhDldDP20LmmQJN0x4CXbPmLQfxzR\
8flcdPBecx/V5QkVD9wHrHCoiFkQI45hN86+Vm6i4mZkAQUOTCaXLyHLa9QBvFxHRMZzm+\
cT5ZW22BQU215+Zeyc06Bfnwb+IDGbuYvMcl7c6OwLAwLhl9Z2X1z7kb4Pl1W3glT1YTh/\
m94cgbGHZM9TKdz1rXyTNSda2Lfs7VRc2XjQZ5/pSp/\
5cOmTbLYWy3DYPOjmyNV2tvGX6nLbzMsevn4r5vzWfvKAFXDYdKcB8lKfg8imbKAy/\
R9unq3Do8xp2K7xidIRWscCIbZ9kvrj8eVuD1phBj7SYbkI6oZ0BEc2pdxHG7x6bMDDNQkFjg+\
XX9ssnGsg4l4M72tWeCMDvAPCHrlic0B+lC3cEk2Zc/Km4llzNNhrwfCEOnVK0V/\
S2sj7LkCjKWgZHEeEFTr8EcVkmNQAXLflCCxDkIhpDsl/24b/\
7hYiWQqn2F6lKexYErzWl4Ev2ywIdUTE3W3LEDR1dw22I2kTypVRexNF2cNptjut9kunFDc6CHkhBa\
kvCB3m0K3abwVzeFpT24WxO6NaFbE7o1oVsT/t81wUWM/0q/AS2MuL4="]]}; 
                 Typeset`initDone$$ = True), DynamicModuleValues :> {}, 
                Deinitialization :> None, 
                UntrackedVariables :> {Typeset`size$$}, 
                SynchronousInitialization -> True, 
                UnsavedVariables :> {Typeset`initDone$$}, 
                UndoTrackedVariables :> {
                 Typeset`show$$, Typeset`bookmarkMode$$}], "Manipulate", 
               Deployed -> True, StripOnInput -> False], TraditionalForm], 
             Manipulate`InterpretManipulate[1]], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n  ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n "}]}], 
   Typeset`pod14$$ = XMLElement[
   "pod", {"title" -> "Differential equation solution curve families", 
     "scanner" -> "Plotter", "id" -> 
     "DifferentialEquationSolutionCurveFamilies", "position" -> "1000", 
     "error" -> "false", "numsubpods" -> "0", "async" -> 
     "https://www6b3.wolframalpha.com/api/v1/asyncPod.jsp?id=\
MSPa10361288203cbb506abf00005h8aa5d3hi8gih166235443652248981561", 
     "asyncfailed" -> "data not found", "asyncfailed" -> "data not found"}, {
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod15$$ = XMLElement[
   "pod", {"title" -> "Inverse iterations", "scanner" -> "Plotter", "id" -> 
     "InverseIterations", "position" -> "1100", "error" -> "false", 
     "numsubpods" -> "0", "async" -> 
     "https://www6b3.wolframalpha.com/api/v1/asyncPod.jsp?id=\
MSPa10371288203cbb506abf00001639h2f75b6008746235443652248981561", 
     "asyncfailed" -> "data not found", "asyncfailed" -> "data not found"}, {
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod16$$, Typeset`pod17$$, Typeset`pod18$$, Typeset`pod19$$, 
   Typeset`pod20$$, Typeset`pod21$$, Typeset`pod22$$, Typeset`pod23$$, 
   Typeset`pod24$$, Typeset`pod25$$, Typeset`pod26$$, Typeset`pod27$$, 
   Typeset`pod28$$, Typeset`pod29$$, Typeset`pod30$$, Typeset`pod31$$, 
   Typeset`pod32$$, Typeset`pod33$$, Typeset`pod34$$, Typeset`pod35$$, 
   Typeset`pod36$$, Typeset`pod37$$, Typeset`pod38$$, Typeset`pod39$$, 
   Typeset`pod40$$, Typeset`pod41$$, Typeset`aux1$$ = {
   True, False, {False}, True}, Typeset`aux2$$ = {
   True, False, {False, False}, True}, Typeset`aux3$$ = {
   True, False, {False}, True}, Typeset`aux4$$ = {True, False, {False}, True},
    Typeset`aux5$$ = {True, False, {False, False, False}, True}, 
   Typeset`aux6$$ = {True, False, {False}, True}, Typeset`aux7$$ = {
   True, False, {False}, True}, Typeset`aux8$$ = {True, False, {False}, True},
    Typeset`aux9$$ = {True, False, {False, False}, True}, Typeset`aux10$$ = {
   True, False, {False, False, False}, True}, Typeset`aux11$$ = {
   True, False, {False, False, False}, True}, Typeset`aux12$$ = {
   True, False, {False, False}, True}, Typeset`aux13$$ = {
   True, False, {False}, True}, Typeset`aux14$$ = {
   True, False, {False}, True}, Typeset`aux15$$ = {
   True, False, {False}, True}, Typeset`aux16$$ = {
   True, False, {False}, True}, Typeset`aux17$$ = {
   True, False, {False}, True}, Typeset`aux18$$ = {
   True, False, {False}, True}, Typeset`aux19$$ = {
   True, False, {False}, True}, Typeset`aux20$$ = {
   True, False, {False}, True}, Typeset`aux21$$ = {
   True, False, {False}, True}, Typeset`aux22$$ = {
   True, False, {False}, True}, Typeset`aux23$$ = {
   True, False, {False}, True}, Typeset`aux24$$ = {
   True, False, {False}, True}, Typeset`aux25$$ = {
   True, False, {False}, True}, Typeset`aux26$$ = {
   True, False, {False}, True}, Typeset`aux27$$ = {
   True, False, {False}, True}, Typeset`aux28$$ = {
   True, False, {False}, True}, Typeset`aux29$$ = {
   True, False, {False}, True}, Typeset`aux30$$ = {
   True, False, {False}, True}, Typeset`aux31$$ = {
   True, False, {False}, True}, Typeset`aux32$$ = {
   True, False, {False}, True}, Typeset`aux33$$ = {
   True, False, {False}, True}, Typeset`aux34$$ = {
   True, False, {False}, True}, Typeset`aux35$$ = {
   True, False, {False}, True}, Typeset`aux36$$ = {
   True, False, {False}, True}, Typeset`aux37$$ = {
   True, False, {False}, True}, Typeset`aux38$$ = {
   True, False, {False}, True}, Typeset`aux39$$ = {
   True, False, {False}, True}, Typeset`aux40$$ = {
   True, False, {False}, True}, Typeset`aux41$$ = {
   True, False, {False}, True}, Typeset`asyncpods$$ = {}, Typeset`nonpods$$ = {
    XMLElement["assumptions", {"count" -> "1"}, {
      XMLElement[
      "assumption", {
       "type" -> "Function", "word" -> "Log", "template" -> 
        "Assuming \"Log\" is the natural logarithm${separator}Use ${desc} \
instead", "count" -> "2", "pulldown" -> "false", "default" -> 
        "{\"FunClash\", \"Log\"} -> {\"Log\", \"dflt\"}"}, {
        XMLElement[
        "value", {
         "name" -> "Log", "desc" -> "the natural logarithm", "input" -> 
          "{\"FunClash\", \"Log\"} -> {\"Log\"}"}, {}], 
        XMLElement[
        "value", {
         "name" -> "Log10", "desc" -> "the base 10 logarithm", "input" -> 
          "{\"FunClash\", \"Log\"} -> {\"Log10\"}"}, {}]}]}]}, 
   Typeset`initdone$$ = FrontEnd`SuppressEvaluationHash[True], 
   Typeset`queryinfo$$ = {{
    "success" -> "true", "error" -> 
     "false", {"http://www.w3.org/XML/1998/namespace", "space"} -> "preserve",
      "numpods" -> "11", "datatypes" -> "Math", "timedout" -> 
     "InterestingDefiniteIntegrals,\
InterestingMultiDimensionalDefiniteIntegrals,MathematicalFunctionData", 
     "timedoutpods" -> "", "timing" -> "4.003", "parsetiming" -> 
     "0.28300000000000003", "parsetimedout" -> "false", "recalculate" -> 
     "https://www6b3.wolframalpha.com/api/v1/recalc.jsp?id=\
MSPa10311288203cbb506abf00001026da92a4ai750e6235443652248981561", "id" -> 
     "MSP10321288203cbb506abf0000175efge7bfa19ii5", "host" -> 
     "https://www6b3.wolframalpha.com", "server" -> "5", "related" -> 
     "https://www6b3.wolframalpha.com/api/v1/relatedQueries.jsp?id=\
MSPa10331288203cbb506abf00004f1h713beh9f90886235443652248981561", "version" -> 
     "2.6", "inputstring" -> "x*Log[Log[x]]"}, {
    "success" -> "true", "error" -> 
     "false", {"http://www.w3.org/XML/1998/namespace", "space"} -> "preserve",
      "numpods" -> "4", "datatypes" -> "Math", "timedout" -> 
     "InterestingDefiniteIntegrals", "timedoutpods" -> "", "timing" -> 
     "5.094", "parsetimedout" -> "false", "recalculate" -> "", "id" -> "", 
     "parseidserver" -> "20", "host" -> "https://www6b3.wolframalpha.com", 
     "server" -> "20", "related" -> "", "version" -> "2.6", "inputstring" -> 
     "x*Log[Log[x]]"}}, Typeset`sessioninfo$$ = {
   "TimeZone" -> 8., 
    "Date" -> {2022, 9, 18, 2, 21, 43.4061734`9.390126372883831}, "Line" -> 
    21, "SessionID" -> 30014593700477189380}, Typeset`showpods$$ = {1, 2, 3, 
   4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}, Typeset`failedpods$$ = {14, 15, 
   16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
    35, 36, 37, 38, 39, 40, 41}, Typeset`chosen$$ = {}, Typeset`open$$ = 
   False, Typeset`newq$$ = "x*Log[Log[x]]"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       2, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$, Typeset`pod8$$, 
         Typeset`pod9$$, Typeset`pod10$$, Typeset`pod11$$, Typeset`pod12$$, 
         Typeset`pod13$$, Typeset`pod14$$, Typeset`pod15$$, Typeset`pod16$$, 
         Typeset`pod17$$, Typeset`pod18$$, Typeset`pod19$$, Typeset`pod20$$, 
         Typeset`pod21$$, Typeset`pod22$$, Typeset`pod23$$, Typeset`pod24$$, 
         Typeset`pod25$$, Typeset`pod26$$, Typeset`pod27$$, Typeset`pod28$$, 
         Typeset`pod29$$, Typeset`pod30$$, Typeset`pod31$$, Typeset`pod32$$, 
         Typeset`pod33$$, Typeset`pod34$$, Typeset`pod35$$, Typeset`pod36$$, 
         Typeset`pod37$$, Typeset`pod38$$, Typeset`pod39$$, Typeset`pod40$$, 
         Typeset`pod41$$}, {
        Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$, Typeset`aux4$$, 
         Typeset`aux5$$, Typeset`aux6$$, Typeset`aux7$$, Typeset`aux8$$, 
         Typeset`aux9$$, Typeset`aux10$$, Typeset`aux11$$, Typeset`aux12$$, 
         Typeset`aux13$$, Typeset`aux14$$, Typeset`aux15$$, Typeset`aux16$$, 
         Typeset`aux17$$, Typeset`aux18$$, Typeset`aux19$$, Typeset`aux20$$, 
         Typeset`aux21$$, Typeset`aux22$$, Typeset`aux23$$, Typeset`aux24$$, 
         Typeset`aux25$$, Typeset`aux26$$, Typeset`aux27$$, Typeset`aux28$$, 
         Typeset`aux29$$, Typeset`aux30$$, Typeset`aux31$$, Typeset`aux32$$, 
         Typeset`aux33$$, Typeset`aux34$$, Typeset`aux35$$, Typeset`aux36$$, 
         Typeset`aux37$$, Typeset`aux38$$, Typeset`aux39$$, Typeset`aux40$$, 
         Typeset`aux41$$}, Typeset`chosen$$, Typeset`open$$, 
        Typeset`elements$$, Typeset`q$$, Typeset`opts$$, Typeset`nonpods$$, 
        Typeset`queryinfo$$, Typeset`sessioninfo$$, Typeset`showpods$$, 
        Typeset`failedpods$$, Typeset`newq$$}]], StandardForm],
    ImageSizeCache->{506., {1189.8544921875, 1195.1455078125}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     And[
      Not[Typeset`initdone$$ === True], 
      Not[Typeset`initdone$$ === FrontEnd`SuppressEvaluationHash[True]]], 
     Null; AlphaIntegration`DoAsyncInitialization[
       Hold[{
        2, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
          Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$, Typeset`pod8$$, 
          Typeset`pod9$$, Typeset`pod10$$, Typeset`pod11$$, Typeset`pod12$$, 
          Typeset`pod13$$, Typeset`pod14$$, Typeset`pod15$$, Typeset`pod16$$, 
          Typeset`pod17$$, Typeset`pod18$$, Typeset`pod19$$, Typeset`pod20$$, 
          Typeset`pod21$$, Typeset`pod22$$, Typeset`pod23$$, Typeset`pod24$$, 
          Typeset`pod25$$, Typeset`pod26$$, Typeset`pod27$$, Typeset`pod28$$, 
          Typeset`pod29$$, Typeset`pod30$$, Typeset`pod31$$, Typeset`pod32$$, 
          Typeset`pod33$$, Typeset`pod34$$, Typeset`pod35$$, Typeset`pod36$$, 
          Typeset`pod37$$, Typeset`pod38$$, Typeset`pod39$$, Typeset`pod40$$, 
          Typeset`pod41$$}, {
         Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$, Typeset`aux4$$, 
          Typeset`aux5$$, Typeset`aux6$$, Typeset`aux7$$, Typeset`aux8$$, 
          Typeset`aux9$$, Typeset`aux10$$, Typeset`aux11$$, Typeset`aux12$$, 
          Typeset`aux13$$, Typeset`aux14$$, Typeset`aux15$$, Typeset`aux16$$, 
          Typeset`aux17$$, Typeset`aux18$$, Typeset`aux19$$, Typeset`aux20$$, 
          Typeset`aux21$$, Typeset`aux22$$, Typeset`aux23$$, Typeset`aux24$$, 
          Typeset`aux25$$, Typeset`aux26$$, Typeset`aux27$$, Typeset`aux28$$, 
          Typeset`aux29$$, Typeset`aux30$$, Typeset`aux31$$, Typeset`aux32$$, 
          Typeset`aux33$$, Typeset`aux34$$, Typeset`aux35$$, Typeset`aux36$$, 
          Typeset`aux37$$, Typeset`aux38$$, Typeset`aux39$$, Typeset`aux40$$, 
          Typeset`aux41$$}, Typeset`chosen$$, Typeset`open$$, 
         Typeset`elements$$, Typeset`q$$, Typeset`opts$$, Typeset`nonpods$$, 
         Typeset`queryinfo$$, Typeset`sessioninfo$$, Typeset`showpods$$, 
         Typeset`failedpods$$, Typeset`newq$$, 
         "https://www6b3.wolframalpha.com/api/v1/recalc.jsp?id=\
MSPa10311288203cbb506abf00001026da92a4ai750e6235443652248981561", 
         Typeset`asyncpods$$}]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = FrontEnd`SuppressEvaluationHash[True]],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "Print", "WolframAlphaFullOutput",
 CellChangeTimes->{
  3.8724277034911947`*^9},ExpressionUUID->"23c1c02e-9942-439c-b912-\
5d761f440f3d"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Trace", "[", 
  RowBox[{"Integrate", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"1", " ", "/", " ", 
      RowBox[{"Log", "[", "x", "]"}]}], "+", 
     RowBox[{"Log", "[", 
      RowBox[{"Log", "[", "x", "]"}], "]"}]}], ",", "x"}], "]"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.872427798638632*^9, 3.872427803645014*^9}},
 CellLabel->"In[22]:=",ExpressionUUID->"4ad79f4d-9094-4496-83e4-ef2f79b461f3"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       TagBox[
        FractionBox["1", 
         RowBox[{"Log", "[", "x", "]"}]],
        HoldForm], ",", 
       TagBox[
        FractionBox["1", 
         RowBox[{"Log", "[", "x", "]"}]],
        HoldForm]}], "}"}], ",", 
     TagBox[
      RowBox[{
       FractionBox["1", 
        RowBox[{"Log", "[", "x", "]"}]], "+", 
       RowBox[{"Log", "[", 
        RowBox[{"Log", "[", "x", "]"}], "]"}]}],
      HoldForm]}], "}"}], ",", 
   TagBox[
    RowBox[{"\[Integral]", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{
        FractionBox["1", 
         RowBox[{"Log", "[", "x", "]"}]], "+", 
        RowBox[{"Log", "[", 
         RowBox[{"Log", "[", "x", "]"}], "]"}]}], ")"}], 
      RowBox[{"\[DifferentialD]", "x"}]}]}],
    HoldForm], ",", 
   TagBox[
    RowBox[{"x", " ", 
     RowBox[{"Log", "[", 
      RowBox[{"Log", "[", "x", "]"}], "]"}]}],
    HoldForm]}], "}"}]], "Output",
 CellChangeTimes->{3.872427806017866*^9},
 CellLabel->"Out[22]=",ExpressionUUID->"e5fadd32-016d-46e3-b58d-d1d7dff4c925"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"TracePrint", "[", 
  RowBox[{"Integrate", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"1", " ", "/", " ", 
      RowBox[{"Log", "[", "x", "]"}]}], "+", 
     RowBox[{"Log", "[", 
      RowBox[{"Log", "[", "x", "]"}], "]"}]}], ",", "x"}], "]"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.872427835040732*^9, 3.8724278367437735`*^9}},
 CellLabel->"",ExpressionUUID->"0752fd6d-3f42-4e94-b6ed-2b45951d2e84"]
},
WindowSize->{570.75, 610.5},
WindowMargins->{{Automatic, -1598.25}, {Automatic, 78}},
TaggingRules-><|"TryRealOnly" -> False|>,
FrontEndVersion->"13.1 for Microsoft Windows (64-bit) (2022\:5e746\:670816\
\:65e5)",
StyleDefinitions->"Default.nb",
ExpressionUUID->"9daa16fa-36a8-4dea-9fe1-5b1295714769"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 292, 6, 43, "Input",ExpressionUUID->"542bf022-1f02-4ad9-a0be-8e231882e0de"],
Cell[875, 30, 172, 3, 32, "Output",ExpressionUUID->"b47a6069-8072-49ff-9571-1ff9f205b799"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1084, 38, 347, 8, 43, "Input",ExpressionUUID->"bb43ff49-28e3-4875-bdf8-7d8176cdbae5"],
Cell[1434, 48, 197, 4, 32, "Output",ExpressionUUID->"89710869-aa0d-49a3-aa1a-27530dafdc38"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1668, 57, 344, 8, 43, "Input",ExpressionUUID->"fc2b00b5-a9b8-487c-bcc6-f57d8845f7ee"],
Cell[2015, 67, 283, 7, 49, "Output",ExpressionUUID->"bd4c5432-2b30-4700-adf1-122a78d2ffc0"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2335, 79, 335, 8, 43, "Input",ExpressionUUID->"13e5da8c-90de-4b2d-a5f0-b155b6a2628f"],
Cell[2673, 89, 281, 7, 49, "Output",ExpressionUUID->"3a86ddef-f949-44ba-bd84-2124f4a59f49"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2991, 101, 332, 8, 43, "Input",ExpressionUUID->"1c09b411-bf2a-44b4-bde1-8767deea21bc"],
Cell[3326, 111, 187, 3, 32, "Output",ExpressionUUID->"6784507b-e9dd-410a-9da5-164ea1d5a941"]
}, Open  ]],
Cell[CellGroupData[{
Cell[3550, 119, 227, 6, 43, "Input",ExpressionUUID->"87002a90-4a2b-4894-a3d5-b492a0265ef4"],
Cell[3780, 127, 185, 3, 32, "Output",ExpressionUUID->"49ec4900-9b23-44dd-ac5b-b2d3ab243be6"]
}, Open  ]],
Cell[CellGroupData[{
Cell[4002, 135, 293, 7, 43, "Input",ExpressionUUID->"1eab905a-a289-4bb7-b487-e01e6ae75169"],
Cell[4298, 144, 185, 3, 32, "Output",ExpressionUUID->"a69d0c5b-a4ca-4510-a66f-afd2977b9a0a"]
}, Open  ]],
Cell[CellGroupData[{
Cell[4520, 152, 306, 7, 46, "Input",ExpressionUUID->"0ffe6e9a-1431-4efd-8196-528b47a0592b"],
Cell[4829, 161, 187, 3, 32, "Output",ExpressionUUID->"c6e6487b-3fd0-44ee-a14b-270d10402b3c"]
}, Open  ]],
Cell[CellGroupData[{
Cell[5053, 169, 339, 9, 43, "Input",ExpressionUUID->"2aa161b6-25ca-4f73-940f-a87267cffa65"],
Cell[5395, 180, 44260, 745, 243, "Output",ExpressionUUID->"73d72c8e-9032-4302-9145-07869774a539"]
}, Open  ]],
Cell[49670, 928, 278, 6, 43, "Input",ExpressionUUID->"c1f54ab8-e580-4398-9043-c16e7ff88843"],
Cell[CellGroupData[{
Cell[49973, 938, 553, 16, 82, InheritFromParent,ExpressionUUID->"6afee3ed-ea7c-4c73-8838-80800b30ba6f"],
Cell[50529, 956, 299, 8, 49, "Output",ExpressionUUID->"7e0a744f-a5a1-4214-b0ca-52e656758794"],
Cell[50831, 966, 411, 12, 49, "Output",ExpressionUUID->"f6ac0d48-3157-4b66-98b4-4988217362f2"]
}, Open  ]],
Cell[CellGroupData[{
Cell[51279, 983, 348, 8, 43, "Input",ExpressionUUID->"dfad6ab7-cb0a-4310-b59b-2fc44a643ca7"],
Cell[51630, 993, 241, 5, 32, "Output",ExpressionUUID->"11313216-531c-4b2a-b51e-f681ae176603"]
}, Open  ]],
Cell[CellGroupData[{
Cell[51908, 1003, 395, 11, 43, "Input",ExpressionUUID->"9b4104a7-5204-4217-9eb2-e45a131daf09"],
Cell[52306, 1016, 39254, 663, 239, "Output",ExpressionUUID->"0a784360-5b84-4d63-9f1a-b58cad7610a5"]
}, Open  ]],
Cell[CellGroupData[{
Cell[91597, 1684, 378, 10, 43, "Input",ExpressionUUID->"6c3922f8-f719-4675-9e4a-01d5a2025948"],
Cell[91978, 1696, 241, 5, 32, "Output",ExpressionUUID->"0e2afdf2-9e3e-4c37-b0b5-0679e8bef95f"]
}, Open  ]],
Cell[CellGroupData[{
Cell[92256, 1706, 293, 7, 43, "Input",ExpressionUUID->"9261f573-66d5-42a7-b34b-490d4c3b9ed9"],
Cell[92552, 1715, 565, 15, 48, "Output",ExpressionUUID->"fd05d868-b546-4f3b-91b5-d2ef22df0aa7"]
}, Open  ]],
Cell[CellGroupData[{
Cell[93154, 1735, 290, 6, 43, "Input",ExpressionUUID->"a0d1928a-0b33-4f76-bf5b-3e9994aec608"],
Cell[93447, 1743, 186, 3, 32, "Output",ExpressionUUID->"81f68e3a-a17b-469c-835d-2424c30ef44e"]
}, Open  ]],
Cell[CellGroupData[{
Cell[93670, 1751, 143, 2, 43, "Input",ExpressionUUID->"0b5189ba-3b38-4913-b3a8-1e5b125086f5"],
Cell[93816, 1755, 186, 3, 32, "Output",ExpressionUUID->"9987cdbe-1b02-4059-9988-5797aa87a7d4"]
}, Open  ]],
Cell[CellGroupData[{
Cell[94039, 1763, 391, 9, 43, "Input",ExpressionUUID->"c0423d6a-11b7-4a33-9470-edada7b5c538"],
Cell[94433, 1774, 232, 5, 32, "Output",ExpressionUUID->"ed3d706c-08e6-4c46-935f-76509b2b3e7e"]
}, Open  ]],
Cell[CellGroupData[{
Cell[94702, 1784, 120, 1, 41, "WolframAlphaLong",ExpressionUUID->"37db9d51-037c-44b1-a7e1-7ba791bd0a9e"],
Cell[94825, 1787, 437310, 8059, 2395, "Print",ExpressionUUID->"23c1c02e-9942-439c-b912-5d761f440f3d"]
}, Open  ]],
Cell[CellGroupData[{
Cell[532172, 9851, 428, 11, 43, "Input",ExpressionUUID->"4ad79f4d-9094-4496-83e4-ef2f79b461f3"],
Cell[532603, 9864, 1116, 39, 92, "Output",ExpressionUUID->"e5fadd32-016d-46e3-b58d-d1d7dff4c925"]
}, Open  ]],
Cell[533734, 9906, 427, 11, 43, "Input",ExpressionUUID->"0752fd6d-3f42-4e94-b6ed-2b45951d2e84"]
}
]
*)

(* End of internal cache information *)

